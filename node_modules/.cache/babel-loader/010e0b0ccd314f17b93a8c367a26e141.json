{"ast":null,"code":"import React from 'react';\nexport const createDoctors = async incomingDoctors => {\n  await incomingDoctors.map(async doctor => {\n    let detailedDoctor;\n\n    try {\n      let res = await axios.get(`http://localhost:3000/geocodes/details/${doctor.place_id}`);\n      detailedDoctor = res.data.result;\n    } catch (err) {\n      console.log(err, \"E\");\n    } // destructuring for values in schema\n\n\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: {\n          lat,\n          lng\n        }\n      }\n    } = detailedDoctor; // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews\n    }; // create post headers\n\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'Application/json');\n    myHeaders.append('accepts', 'application/json'); // TODO check into stringify\n    // TODO check into redirect: follow\n    // options hash for post request to api\n\n    let data;\n    let photoData; // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n      console.log(data, 'DATA IN CREATE DOCTOR');\n      let reviewData;\n      reviews.forEach(async singleReview => {\n        const {\n          author_name,\n          author_url,\n          profile_photo_url,\n          rating,\n          relative_time_description,\n          text,\n          time\n        } = singleReview;\n        const reviewHash = {\n          author_name,\n          author_url,\n          profile_photo_url,\n          rating,\n          relative_time_description,\n          text,\n          time,\n          place_id,\n          doctor_id: data.id\n        };\n        let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n        reviewData = res.data;\n        console.log('reviewData from reviewPost', reviewData); //\n      });\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n        console.log(photoData);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  });\n};\nexport const createReviews = () => {};\nexport const createPhotos = () => {};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/helpers/helpers.js"],"names":["React","createDoctors","incomingDoctors","map","doctor","detailedDoctor","res","axios","get","place_id","data","result","err","console","log","formatted_address","formatted_phone_number","name","rating","url","website","user_ratings_total","reviews","photos","geometry","location","lat","lng","doctorHash","myHeaders","Headers","append","photoData","post","reviewData","forEach","singleReview","author_name","author_url","profile_photo_url","relative_time_description","text","time","reviewHash","doctor_id","id","photoPayload","incomingPhotos","doctorId","placeId","createPhotos","createReviews"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport const createDoctors = async (incomingDoctors) => {\n  await incomingDoctors.map(async (doctor) => {\n    let detailedDoctor;\n\n    try {\n      let res = await axios.get(\n        `http://localhost:3000/geocodes/details/${doctor.place_id}`\n      );\n      detailedDoctor = res.data.result;\n    } catch (err) {\n      console.log(err, \"E\")\n    }\n\n    // destructuring for values in schema\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: { lat, lng },\n      },\n    } = detailedDoctor;\n\n    // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews,\n    };\n\n    // create post headers\n    const myHeaders = new Headers();\n\n    myHeaders.append('Content-Type', 'Application/json');\n    myHeaders.append('accepts', 'application/json');\n\n    // TODO check into stringify\n    // TODO check into redirect: follow\n    // options hash for post request to api\n\n    let data;\n    let photoData;\n\n    // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n\n      console.log(data, 'DATA IN CREATE DOCTOR');\n      let reviewData;\n\n      reviews.forEach(async (singleReview) => {\n        const {\n          author_name,\n          author_url,\n          profile_photo_url,\n          rating,\n          relative_time_description,\n          text,\n          time,\n        } = singleReview;\n        const reviewHash = {\n          author_name,\n          author_url,\n          profile_photo_url,\n          rating,\n          relative_time_description,\n          text,\n          time,\n          place_id,\n          doctor_id: data.id,\n        };\n\n        let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n\n        reviewData = res.data;\n        console.log('reviewData from reviewPost', reviewData);\n\n        //\n      });\n\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id,\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n        console.log(photoData);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  });\n};\n\nexport const createReviews = () => {};\n\nexport const createPhotos = () => {};\n"]},"metadata":{},"sourceType":"module"}