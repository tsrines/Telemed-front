{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Link, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: \"\",\n        email: \"\",\n        address: \"\",\n        password: \"\",\n        passwordConfirmation: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.rate = (e, data) => {\n      console.log(e, data);\n    };\n\n    this.createDoctor = doctor => {\n      let doctorObj = {\n        api_id: doctor.id,\n        first_name: doctor.firstName,\n        last_name: doctor.lastName,\n        address: doctor.address,\n        image: doctor.image,\n        specialty: doctor.specialty,\n        title: doctor.title,\n        gender: doctor.gender,\n        bio: doctor.bio,\n        phone_number: doctor.phone\n      };\n      fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/doctors`, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accepts\": \"application/json\"\n        },\n        body: JSON.stringify(doctorObj)\n      }).then(resp => resp.json()).then(data => {\n        let doctors = [...this.state.doctors];\n        this.setState({ ...this.state,\n          doctors: [data, ...doctors]\n        }, () => {\n          this.props.history.push('/doctors');\n        });\n      }, this.setState({\n        isLoading: false\n      }));\n    };\n\n    this.heart = doctor => {\n      console.log(\"this is doctor: \", doctor);\n      let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id);\n      console.log(\"in the heart, before if\", favorite);\n\n      if (typeof favorite == \"object\") {\n        console.log(\"in the if, before unHeart is called\", favorite);\n        this.unHeart(favorite);\n      } else {\n        console.log(\"in the else, before favorite is called\", favorite);\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      // debugger\n      console.log(\"got here in the unheart\", favorite); // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n\n      fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/favorites/${favorite.id}`, {\n        method: \"DELETE\"\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      console.log(\"in the favorite\");\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/favorites`, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accepts\": \"application/json\"\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        }, () => console.log(\"this.state.currentUser\", this.state.currentUser));\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      // console.log(URL)\n      // debugger\n      fetch(\"https://cryptic-island-45793.herokuapp.com\" + \"/users\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accepts\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          console.log(\"after profile button is clicked: \", this.state.currentUser.doctors);\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.toGeoCode = formData => {\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${formData.address}&key=` + \"AIzaSyAkZI07elJzbOUJR5DCnSDGTZuDGmcptBM\").then(resp => resp.json()).then(data => this.setState({\n        lat: data[\"results\"][0].geometry.location.lat,\n        lng: data[\"results\"][0].geometry.location.lng\n      }, () => this.getDoctors(formData))).catch(err => console.dir(err));\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.getDoctors = formData => {\n      fetch(`https://api.betterdoctor.com/2015-01-27/doctors?query=${formData.ailment}&location=${this.state.lat}%2C${this.state.lng}%2C${formData.miles}&skip=0&limit=100&user_key=` + \"376761dc9a0b6db741da0e97bfad107e\").then(resp => resp.json()).then(data => {\n        console.log(\"data from betterdoc\", data);\n        this.setState({\n          apiDoctors: data.data,\n          isLoading: false\n        }, () => this.isResolved());\n        this.parseDoctors(data.data);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.parseDoctors = doctorsArray => {\n      let doctors = [];\n      doctorsArray.map(element => {\n        try {\n          let doctorHash = {};\n          doctorHash.id = element.uid; // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n\n          doctorHash.firstName = element.profile.first_name;\n          doctorHash.lastName = element.profile.last_name;\n\n          if (element.profile.gender === 'male') {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/matthew.png';\n          } else if (element.profile.gender === 'female') {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/kristy.png';\n          } else {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/elyse.png';\n          }\n\n          doctorHash.title = element.profile.title;\n          doctorHash.bio = element.profile.bio;\n          doctorHash.address = element.practices[0].address;\n          doctorHash.gender = element.profile.gender;\n          doctorHash.phone = element.practices[0].phones[0].number;\n          doctorHash.specialty = element.specialties[0].name;\n          doctors.push(doctorHash);\n          this.createDoctor(doctorHash);\n        } catch (err) {\n          console.dir(err.message);\n        }\n      });\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users/${this.state.currentUser.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accepts\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }, () => console.log(this.state.currentUser)));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users`).then(resp => resp.json()).then(users => {\n      console.log(\"in component did mount users\", users);\n      this.setState({\n        users\n      }, () => console.log(\"this.state.users after mount: \", this.state.users));\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({\n        createDoctor: this.createDoctor\n      }, routerProps, {\n        doctors: this.state.doctors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        toGeoCode: this.toGeoCode,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Link","Switch","withRouter","Button","Image","DoctorShow","Doctors","Login","Profile","Search","App","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","error","apiDoctors","users","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","rate","e","data","console","log","createDoctor","doctorObj","first_name","last_name","image","specialty","title","gender","bio","phone_number","phone","fetch","method","headers","body","JSON","stringify","then","resp","json","history","push","heart","find","unHeart","favoriteObject","user_id","doctor_id","newdoc","onSubmit","formData","logInOrSignUp","password_confirmation","userProfile","logOut","onSignUp","toGeoCode","geometry","location","getDoctors","catch","err","dir","isResolved","ailment","miles","parseDoctors","doctorsArray","map","element","doctorHash","uid","profile","practices","phones","number","specialties","name","message","loadingHandler","patchUser","userData","searchButton","alert","componentDidMount","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Route,\n  Link,\n  Switch,\n  withRouter,\n} from 'react-router-dom'\nimport { Button, Image } from 'semantic-ui-react'\nimport DoctorShow from './components/DoctorShow'\nimport Doctors from './containers/Doctors'\nimport Login from './components/Login'\nimport Profile from './components/Profile'\nimport Search from './components/Search'\nimport './App.css';\n\n\n\nclass App extends React.Component {\n\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: \"\",\n      email: \"\",\n      address: \"\",\n      password: \"\",\n      passwordConfirmation: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      doctors: [],\n      favorites: []\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    error: false,\n    apiDoctors: [],\n    users: []\n  }\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id)\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1\n      })\n    }\n\n  }\n\n  rate = (e, data) => {\n    console.log(e, data)\n  }\n\n  createDoctor = (doctor) => {\n\n    let doctorObj = {\n      api_id: doctor.id,\n      first_name: doctor.firstName,\n      last_name: doctor.lastName,\n      address: doctor.address,\n      image: doctor.image,\n      specialty: doctor.specialty,\n      title: doctor.title,\n      gender: doctor.gender,\n      bio: doctor.bio,\n      phone_number: doctor.phone\n    }\n\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/doctors`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify(doctorObj)\n    }).then(resp => resp.json())\n      .then(data => {\n\n        let doctors = [...this.state.doctors]\n        this.setState({\n          ...this.state,\n          doctors: [data, ...doctors]\n        }, () => { this.props.history.push('/doctors') })\n      }, this.setState({ isLoading: false }))\n  }\n\n  heart = (doctor) => {\n\n    console.log(\"this is doctor: \", doctor)\n    let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id)\n\n    console.log(\"in the heart, before if\", favorite)\n    if (typeof favorite == \"object\") {\n      console.log(\"in the if, before unHeart is called\", favorite)\n      this.unHeart(favorite)\n    } else {\n      console.log(\"in the else, before favorite is called\", favorite)\n      this.favorite(doctor)\n    }\n  }\n\n  unHeart = (favorite) => {\n    // debugger\n    console.log(\"got here in the unheart\", favorite)\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/favorites/${favorite.id}`, {\n      method: \"DELETE\",\n    }).then(resp => resp.json()).then(data => {\n      let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id)\n      let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id)\n      this.setState({\n        ...this.state,\n        favorite: 0,\n        doctors: [data.doctor, ...this.state.doctors],\n        currentUser: {\n          ...this.state.currentUser,\n          favorites: favorites,\n          doctors: doctors\n        }\n      })\n    })\n  }\n\n  favorite = (doctor) => {\n    console.log(\"in the favorite\")\n\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id\n    }\n\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/favorites`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify(favoriteObject)\n    }).then(resp => resp.json())\n      .then(data => {\n        let favorites = [...this.state.currentUser.favorites]\n        let doctors = [...this.state.currentUser.doctors]\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n\n          }\n        }, () => console.log(\"this.state.currentUser\", this.state.currentUser))\n\n      })\n\n  }\n\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData)\n  }\n\n  logInOrSignUp = (formData) => {\n    // console.log(URL)\n    // debugger\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + \"/users\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation\n\n      })\n    }).then(resp => resp.json())\n      .then(data => {\n\n        this.setState({\n          ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'))\n      }\n\n      )\n\n  }\n\n  userProfile = () => {\n\n\n    let id = this.state.currentUser.id\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users/${id}`)\n      .then(resp => resp.json())\n      .then(data => {\n        this.setState({\n          ...this.state,\n          currentUser: {\n            ...this.state.currentUser,\n            doctors: data.doctors\n          }\n\n        }, () => {\n          console.log(\"after profile button is clicked: \", this.state.currentUser.doctors)\n          this.props.history.push('/profile')\n        })\n      })\n  }\n\n  logOut = () => {\n    this.props.history.push('/')\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] })\n  }\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register })\n  }\n  // request to Google GeoCode API to turn string into Longitude/Latitude\n  toGeoCode = (formData) => {\n\n\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${formData.address}&key=` + \"AIzaSyAkZI07elJzbOUJR5DCnSDGTZuDGmcptBM\")\n      .then(resp => resp.json())\n      .then(data => this.setState({\n        lat: data[\"results\"][0].geometry.location.lat,\n        lng: data[\"results\"][0].geometry.location.lng\n      }, () => this.getDoctors(formData))).catch(err => console.dir(err))\n\n  }\n\n  // request to BetterDoc API with Long/Lat\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true })\n    } else {\n      this.setState({ error: false })\n    }\n  }\n\n  getDoctors = (formData) => {\n\n    fetch(`https://api.betterdoctor.com/2015-01-27/doctors?query=${formData.ailment}&location=${this.state.lat}%2C${this.state.lng}%2C${formData.miles}&skip=0&limit=100&user_key=` + \"376761dc9a0b6db741da0e97bfad107e\")\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(\"data from betterdoc\", data)\n        this.setState({\n          apiDoctors: data.data,\n          isLoading: false\n        }, () => this.isResolved())\n        this.parseDoctors(data.data)\n      }).catch((error) => {\n        console.log(error)\n      })\n  }\n\n  // imageApi = (firstName, lastName, title) => {\n\n  //   fetch(`https://serpapi.com/search?q=${firstName}%20${lastName},%20${title}&tbm=isch&ijn=0&api_key=${REACT_APP_SERP_API_KEY}`)\n  //     .then(resp => { resp.json() })\n  //     .then(data => {\n\n  //       return data.images_results[0].original\n  //     })\n  //     .catch(err => {\n\n  //       console.error(err)\n  //     })\n  // }\n\n  parseDoctors = (doctorsArray) => {\n\n    let doctors = []\n    doctorsArray.map(element => {\n\n\n      try {\n        let doctorHash = {}\n        doctorHash.id = element.uid\n        // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n        doctorHash.firstName = element.profile.first_name\n        doctorHash.lastName = element.profile.last_name\n        if (element.profile.gender === 'male') {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/matthew.png'\n        } else if (element.profile.gender === 'female') {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/kristy.png'\n        } else {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/elyse.png'\n        }\n        doctorHash.title = element.profile.title\n        doctorHash.bio = element.profile.bio\n        doctorHash.address = element.practices[0].address\n        doctorHash.gender = element.profile.gender\n        doctorHash.phone = element.practices[0].phones[0].number\n\n        doctorHash.specialty = element.specialties[0].name\n        doctors.push(doctorHash)\n        this.createDoctor(doctorHash)\n      }\n      catch (err) {\n        console.dir(err.message)\n      }\n    })\n  }\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true })\n  }\n\n\n  patchUser = (userData) => {\n\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users/${this.state.currentUser.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        password_confirmation: userData.passwordConfirmation,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        address: userData.address,\n\n      })\n    }).then(resp => resp.json())\n      .then(data =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name\n          }\n        }, () => console.log(this.state.currentUser)))\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users`)\n      .then(resp => resp.json())\n      .then(users => {\n        console.log(\"in component did mount users\", users)\n        this.setState({\n          users\n        }, () => console.log(\"this.state.users after mount: \", this.state.users))\n      })\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search')\n    } else {\n      alert('Please log in before searching')\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Button color=\"red\" onClick={() => this.searchButton()} >Search</Button>\n        {this.state.isLoggedIn && <Button color=\"red\" onClick={() => this.userProfile()}>Profile</Button>}\n        {this.state.isLoggedIn && <Button color=\"red\" onClick={this.logOut}>Logout</Button>}\n        <Image alt=\"\" src=\"\"></Image>\n        {!this.state.isLoggedIn && <Login isLoggedIn={this.state.isLoggedIn} onSignUp={this.onSignUp} onSubmit={this.onSubmit} register={this.state.register} />}\n        <Switch>\n          <Route exact path='/doctors' render={routerProps => <Doctors createDoctor={this.createDoctor}  {...routerProps} doctors={this.state.doctors} />} />\n          <Route exact path='/search' render={routerProps => <Search error={this.state.error} isLoading={this.state.isLoading} currentUser={this.state.currentUser} loadingHandler={this.loadingHandler} {...routerProps} toGeoCode={this.toGeoCode} favorite={this.favorite} />} />\n          <Route exact path='/doctors/:id' render={routerProps => <DoctorShow rate={this.rate} doctors={this.state.doctors} favorite={this.state.favorite} isFavorite={this.isFavorite} heart={this.heart} currentUser={this.state.currentUser} {...routerProps} favorite={this.favorite} />} />\n          <Route exact path='/profile' render={routerProps => <Profile patchUser={this.patchUser} currentUser={this.state.currentUser} doctors={this.state.doctors} isLoggedIn={this.state.isLoggedIn} {...routerProps} />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App)"]},"metadata":{},"sourceType":"module"}