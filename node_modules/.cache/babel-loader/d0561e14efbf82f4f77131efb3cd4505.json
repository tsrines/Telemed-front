{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/profile/Profile.js\";\nimport React from 'react';\nimport { Header, Divider, Button, Form, Input, Grid, Card, Icon } from 'semantic-ui-react';\nimport DoctorCard from '../DoctorCard';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\nconst Profile = ({\n  currentUser,\n  loadUser,\n  history\n}) => {\n  const profileDoctors = () => currentUser.doctors ? currentUser.doctors.map(doc => React.createElement(DoctorCard, {\n    key: doc.id,\n    doctor: doc,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })) : history.push('/login');\n\n  useEffect(() => {\n    loadUser();\n    profileDoctors();\n  }, [profileDoctors]);\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    style: {\n      padding: '2em'\n    },\n    columns: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, currentUser && React.createElement(React.Fragment, null, React.createElement(Header, {\n    display: \"flex\",\n    textAlign: \"center\",\n    color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    size: \"tiny\",\n    name: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), currentUser.email)), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })), currentUser && React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h2\",\n    display: \"flex\",\n    textAlign: \"center\",\n    color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Favorite Doctors\"), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Card.Group, {\n    style: {\n      overflow: 'auto',\n      maxHeight: '52em'\n    },\n    display: \"flex\",\n    \"justify-content\": \"center\",\n    itemsPerRow: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, profileDoctors()))));\n};\n\nProfile.propTypes = {\n  loadUser: PropTypes.func.isRequired,\n  currentUser: PropTypes.object.isRequired\n};\nexport default Profile;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/profile/Profile.js"],"names":["React","Header","Divider","Button","Form","Input","Grid","Card","Icon","DoctorCard","PropTypes","useEffect","Profile","currentUser","loadUser","history","profileDoctors","doctors","map","doc","id","push","padding","email","overflow","maxHeight","propTypes","func","isRequired","object"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,MADF,EAEEC,OAFF,EAGEC,MAHF,EAIEC,IAJF,EAKEC,KALF,EAMEC,IANF,EAOEC,IAPF,EAQEC,IARF,QASO,mBATP;AAWA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AACtD,QAAMC,cAAc,GAAG,MACrBH,WAAW,CAACI,OAAZ,GACIJ,WAAW,CAACI,OAAZ,CAAoBC,GAApB,CAAyBC,GAAD,IACtB,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEA,GAAG,CAACC,EAArB;AAAyB,IAAA,MAAM,EAAED,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADJ,GAIIJ,OAAO,CAACM,IAAR,CAAa,QAAb,CALN;;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ;AACRE,IAAAA,cAAc;AACf,GAHQ,EAGN,CAAEA,cAAF,CAHM,CAAT;AAKA,SACE,0CACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEM,MAAAA,OAAO,EAAE;AAAX,KAAb;AAAiC,IAAA,OAAO,EAAE,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,WAAW,IACV,0CACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,MAAhB;AAAuB,IAAA,SAAS,EAAC,QAAjC;AAA0C,IAAA,KAAK,EAAC,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,MAAX;AAAkB,IAAA,IAAI,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGA,WAAW,CAACU,KAFf,CADF,CAFJ,EASE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF,EAYGV,WAAW,IACV,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,IAAX;AAAgB,IAAA,OAAO,EAAC,MAAxB;AAA+B,IAAA,SAAS,EAAC,QAAzC;AAAkD,IAAA,KAAK,EAAC,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAIE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,oBAAC,IAAD,CAAM,KAAN;AACE,IAAA,KAAK,EAAE;AAAEW,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KADT;AAEE,IAAA,OAAO,EAAC,MAFV;AAGE,uBAAgB,QAHlB;AAIE,IAAA,WAAW,EAAE,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGT,cAAc,EANjB,CALF,CAbJ,CADF,CADF;AAiCD,CA7CD;;AA+CAJ,OAAO,CAACc,SAAR,GAAoB;AAClBZ,EAAAA,QAAQ,EAAEJ,SAAS,CAACiB,IAAV,CAAeC,UADP;AAElBf,EAAAA,WAAW,EAAEH,SAAS,CAACmB,MAAV,CAAiBD;AAFZ,CAApB;AAKA,eAAehB,OAAf","sourcesContent":["import React from 'react';\n\nimport {\n  Header,\n  Divider,\n  Button,\n  Form,\n  Input,\n  Grid,\n  Card,\n  Icon,\n} from 'semantic-ui-react';\n\nimport DoctorCard from '../DoctorCard';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\nconst Profile = ({ currentUser, loadUser, history }) => {\n  const profileDoctors = () =>\n    currentUser.doctors\n      ? currentUser.doctors.map((doc) => (\n          <DoctorCard key={doc.id} doctor={doc} />\n        ))\n      : history.push('/login');\n  useEffect(() => {\n    loadUser();\n    profileDoctors();\n  }, [ profileDoctors]);\n\n  return (\n    <>\n      <Grid style={{ padding: '2em' }} columns={2}>\n        <Grid.Row>\n          {currentUser && (\n            <>\n              <Header display='flex' textAlign='center' color='red'>\n                <Icon size='tiny' name='edit'></Icon>\n                {currentUser.email}\n              </Header>\n            </>\n          )}\n          <Divider />\n        </Grid.Row>\n        {currentUser && (\n          <Grid.Row>\n            <Header as='h2' display='flex' textAlign='center' color='red'>\n              Favorite Doctors\n            </Header>\n            <Divider />\n            <Card.Group\n              style={{ overflow: 'auto', maxHeight: '52em' }}\n              display='flex'\n              justify-content='center'\n              itemsPerRow={1}\n            >\n              {profileDoctors()}\n            </Card.Group>\n          </Grid.Row>\n        )}\n      </Grid>\n    </>\n  );\n};\n\nProfile.propTypes = {\n  loadUser: PropTypes.func.isRequired,\n  currentUser: PropTypes.object.isRequired,\n};\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}