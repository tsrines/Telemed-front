{"ast":null,"code":"import _objectSpread from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import{Route,Link,Switch,withRouter}from'react-router-dom';import{Button,Image}from'semantic-ui-react';import DoctorShow from'./components/DoctorShow';import Doctors from'./containers/Doctors';import Login from'./components/Login';import Profile from'./components/Profile';import Search from'./components/Search';import'./App.css';import{URL,REACT_APP_GOOGLE_GEOCODE_API_KEY,REACT_APP_BETTER_DOC_API_KEY}from'./netlify.toml';var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);function App(){var _getPrototypeOf2;var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(App)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={isLoading:false,isLoggedIn:false,register:false,favorite:0,currentUser:{id:\"\",email:\"\",address:\"\",password:\"\",passwordConfirmation:\"\",firstName:\"\",lastName:\"\",doctors:[],favorites:[]},lat:0,lng:0,doctors:[],error:false,apiDoctors:[],users:[]};_this.isFavorite=function(){var favoriteArray=_this.state.currentUser.doctors.filter(function(doctor){return doctor.api_id==_this.props.match.params.id;});if(favoriteArray.length>0){_this.setState({favorite:1});}};_this.rate=function(e,data){console.log(e,data);};_this.createDoctor=function(doctor){var doctorObj={api_id:doctor.id,first_name:doctor.firstName,last_name:doctor.lastName,address:doctor.address,image:doctor.image,specialty:doctor.specialty,title:doctor.title,gender:doctor.gender,bio:doctor.bio,phone_number:doctor.phone};fetch(URL+\"/doctors\",{method:\"POST\",headers:{\"content-type\":\"application/json\",\"accepts\":\"application/json\"},body:JSON.stringify(doctorObj)}).then(function(resp){return resp.json();}).then(function(data){var doctors=_toConsumableArray(_this.state.doctors);_this.setState(_objectSpread({},_this.state,{doctors:[data].concat(_toConsumableArray(doctors))}),function(){_this.props.history.push('/doctors');});},_this.setState({isLoading:false}));};_this.heart=function(doctor){console.log(\"this is doctor: \",doctor);var favorite=_this.state.currentUser.favorites.find(function(favorite){return favorite.api_id==doctor.api_id;});console.log(\"in the heart, before if\",favorite);if(typeof favorite==\"object\"){console.log(\"in the if, before unHeart is called\",favorite);_this.unHeart(favorite);}else{console.log(\"in the else, before favorite is called\",favorite);_this.favorite(doctor);}};_this.unHeart=function(favorite){// debugger\nconsole.log(\"got here in the unheart\",favorite);// let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\nfetch(URL+\"/favorites/\".concat(favorite.id),{method:\"DELETE\"}).then(function(resp){return resp.json();}).then(function(data){var favorites=_this.state.currentUser.favorites.filter(function(favorite){return favorite.id!==data.id;});var doctors=_this.state.currentUser.doctors.filter(function(doctor){return doctor.api_id!==data.api_id;});_this.setState(_objectSpread({},_this.state,{favorite:0,doctors:[data.doctor].concat(_toConsumableArray(_this.state.doctors)),currentUser:_objectSpread({},_this.state.currentUser,{favorites:favorites,doctors:doctors})}));});};_this.favorite=function(doctor){console.log(\"in the favorite\");var favoriteObject={user_id:_this.state.currentUser.id,doctor_id:doctor.id,api_id:doctor.api_id};fetch(URL+\"/favorites\",{method:\"POST\",headers:{\"content-type\":\"application/json\",\"accepts\":\"application/json\"},body:JSON.stringify(favoriteObject)}).then(function(resp){return resp.json();}).then(function(data){var favorites=_toConsumableArray(_this.state.currentUser.favorites);var doctors=_toConsumableArray(_this.state.currentUser.doctors);var newdoc={id:data.doctor_id,api_id:doctor.api_id,first_name:doctor.first_name,last_name:doctor.last_name,title:doctor.title,gender:doctor.gender,bio:doctor.bio,phone_number:doctor.phone_number};// userDoctors.filter\n_this.setState(_objectSpread({},_this.state,{favorite:1,currentUser:_objectSpread({},_this.state.currentUser,{favorites:[data].concat(_toConsumableArray(favorites)),doctors:[newdoc].concat(_toConsumableArray(doctors))})}),function(){return console.log(\"this.state.currentUser\",_this.state.currentUser);});});};_this.onSubmit=function(formData){_this.logInOrSignUp(formData);};_this.logInOrSignUp=function(formData){// console.log(URL)\n// debugger\nfetch(URL+\"/users\",{method:\"POST\",headers:{\"content-type\":\"application/json\",\"accepts\":\"application/json\"},body:JSON.stringify({email:formData.email,password:formData.password,password_confirmation:formData.passwordConfirmation})}).then(function(resp){return resp.json();}).then(function(data){_this.setState(_objectSpread({},_this.state,{currentUser:{id:data.id,email:data.email,address:data.address,password:data.password,passwordConfirmation:data.password_confirmation,firstName:data.first_name,lastName:data.last_name,doctors:data.doctors,favorites:data.favorites},isLoggedIn:true}),function(){return _this.props.history.push('/search');});});};_this.userProfile=function(){var id=_this.state.currentUser.id;fetch(URL+\"/users/\".concat(id)).then(function(resp){return resp.json();}).then(function(data){_this.setState(_objectSpread({},_this.state,{currentUser:_objectSpread({},_this.state.currentUser,{doctors:data.doctors})}),function(){console.log(\"after profile button is clicked: \",_this.state.currentUser.doctors);_this.props.history.push('/profile');});});};_this.logOut=function(){_this.props.history.push('/');_this.setState({isLoggedIn:false,currentUser:{},doctors:[]});};_this.onSignUp=function(){_this.setState({register:!_this.state.register});};_this.toGeoCode=function(formData){fetch(\"https://maps.googleapis.com/maps/api/geocode/json?address=\".concat(formData.address,\"&key=\")+REACT_APP_GOOGLE_GEOCODE_API_KEY).then(function(resp){return resp.json();}).then(function(data){return _this.setState({lat:data[\"results\"][0].geometry.location.lat,lng:data[\"results\"][0].geometry.location.lng},function(){return _this.getDoctors(formData);});}).catch(function(err){return console.dir(err);});};_this.isResolved=function(){if(_this.state.apiDoctors.length<1){_this.setState({error:true});}else{_this.setState({error:false});}};_this.getDoctors=function(formData){fetch(\"https://api.betterdoctor.com/2016-03-01/doctors?query=\".concat(formData.ailment,\"&location=\").concat(_this.state.lat,\"%2C\").concat(_this.state.lng,\"%2C\").concat(formData.miles,\"&skip=0&limit=100&user_key=\")+REACT_APP_BETTER_DOC_API_KEY).then(function(resp){return resp.json();}).then(function(data){console.log(\"data from betterdoc\",data);_this.setState({apiDoctors:data.data,isLoading:false},function(){return _this.isResolved();});_this.parseDoctors(data.data);}).catch(function(error){console.log(error);});};_this.parseDoctors=function(doctorsArray){var doctors=[];doctorsArray.map(function(element){try{var doctorHash={};doctorHash.id=element.uid;// doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\ndoctorHash.firstName=element.profile.first_name;doctorHash.lastName=element.profile.last_name;if(element.profile.gender==='male'){doctorHash.image='https://semantic-ui.com/images/avatar2/large/matthew.png';}else if(element.profile.gender==='female'){doctorHash.image='https://semantic-ui.com/images/avatar2/large/kristy.png';}else{doctorHash.image='https://semantic-ui.com/images/avatar2/large/elyse.png';}doctorHash.title=element.profile.title;doctorHash.bio=element.profile.bio;doctorHash.address=element.practices[0].address;doctorHash.gender=element.profile.gender;doctorHash.phone=element.practices[0].phones[0].number;doctorHash.specialty=element.specialties[0].name;doctors.push(doctorHash);_this.createDoctor(doctorHash);}catch(err){console.log(err.message);}});};_this.loadingHandler=function(){_this.setState({isLoading:true});};_this.patchUser=function(userData){fetch(URL+\"/users/\".concat(_this.state.currentUser.id),{method:\"PATCH\",headers:{\"content-type\":\"application/json\",\"accepts\":\"application/json\"},body:JSON.stringify({email:userData.email,password:userData.password,password_confirmation:userData.passwordConfirmation,first_name:userData.firstName,last_name:userData.lastName,address:userData.address})}).then(function(resp){return resp.json();}).then(function(data){return _this.setState(_objectSpread({},_this.state,{currentUser:{doctors:data.doctors,favorites:data.favorites,id:data.id,email:data.email,address:data.address,password:data.password,passwordConfirmation:data.password_confirmation,firstName:data.first_name,lastName:data.last_name}}),function(){return console.log(_this.state.currentUser);});});};_this.searchButton=function(){if(_this.state.isLoggedIn){_this.props.history.push('/search');}else{alert('Please log in before searching');}};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// let doctorsInCurrentState = [...this.state.doctors]\nfetch(URL+\"/users\").then(function(resp){return resp.json();}).then(function(users){console.log(\"in component did mount users\",users);_this2.setState({users:users},function(){return console.log(\"this.state.users after mount: \",_this2.state.users);});});}},{key:\"render\",value:function render(){var _this3=this;return React.createElement(\"div\",null,React.createElement(Button,{color:\"red\",onClick:function onClick(){return _this3.searchButton();}},\"Search\"),this.state.isLoggedIn&&React.createElement(Button,{color:\"red\",onClick:function onClick(){return _this3.userProfile();}},\"Profile\"),this.state.isLoggedIn&&React.createElement(Button,{color:\"red\",onClick:this.logOut},\"Logout\"),React.createElement(Image,{alt:\"\",src:\"\"}),!this.state.isLoggedIn&&React.createElement(Login,{isLoggedIn:this.state.isLoggedIn,onSignUp:this.onSignUp,onSubmit:this.onSubmit,register:this.state.register}),React.createElement(Switch,null,React.createElement(Route,{exact:true,path:\"/doctors\",render:function render(routerProps){return React.createElement(Doctors,Object.assign({createDoctor:_this3.createDoctor},routerProps,{doctors:_this3.state.doctors}));}}),React.createElement(Route,{exact:true,path:\"/search\",render:function render(routerProps){return React.createElement(Search,Object.assign({error:_this3.state.error,isLoading:_this3.state.isLoading,currentUser:_this3.state.currentUser,loadingHandler:_this3.loadingHandler},routerProps,{toGeoCode:_this3.toGeoCode,favorite:_this3.favorite}));}}),React.createElement(Route,{exact:true,path:\"/doctors/:id\",render:function render(routerProps){return React.createElement(DoctorShow,Object.assign({rate:_this3.rate,doctors:_this3.state.doctors,favorite:_this3.state.favorite,isFavorite:_this3.isFavorite,heart:_this3.heart,currentUser:_this3.state.currentUser},routerProps,{favorite:_this3.favorite}));}}),React.createElement(Route,{exact:true,path:\"/profile\",render:function render(routerProps){return React.createElement(Profile,Object.assign({patchUser:_this3.patchUser,currentUser:_this3.state.currentUser,doctors:_this3.state.doctors,isLoggedIn:_this3.state.isLoggedIn},routerProps));}})));}}]);return App;}(React.Component);export default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Link","Switch","withRouter","Button","Image","DoctorShow","Doctors","Login","Profile","Search","URL","REACT_APP_GOOGLE_GEOCODE_API_KEY","REACT_APP_BETTER_DOC_API_KEY","App","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","error","apiDoctors","users","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","rate","e","data","console","log","createDoctor","doctorObj","first_name","last_name","image","specialty","title","gender","bio","phone_number","phone","fetch","method","headers","body","JSON","stringify","then","resp","json","history","push","heart","find","unHeart","favoriteObject","user_id","doctor_id","newdoc","onSubmit","formData","logInOrSignUp","password_confirmation","userProfile","logOut","onSignUp","toGeoCode","geometry","location","getDoctors","catch","err","dir","isResolved","ailment","miles","parseDoctors","doctorsArray","map","element","doctorHash","uid","profile","practices","phones","number","specialties","name","message","loadingHandler","patchUser","userData","searchButton","alert","routerProps","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Route,\n  Link,\n  Switch,\n  withRouter,\n} from 'react-router-dom'\nimport { Button, Image } from 'semantic-ui-react'\nimport DoctorShow from './components/DoctorShow'\nimport Doctors from './containers/Doctors'\nimport Login from './components/Login'\nimport Profile from './components/Profile'\nimport Search from './components/Search'\nimport './App.css';\n\nimport { URL, REACT_APP_GOOGLE_GEOCODE_API_KEY, REACT_APP_BETTER_DOC_API_KEY } from './netlify.toml'\n\nclass App extends React.Component {\n\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: \"\",\n      email: \"\",\n      address: \"\",\n      password: \"\",\n      passwordConfirmation: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      doctors: [],\n      favorites: []\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    error: false,\n    apiDoctors: [],\n    users: []\n  }\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id)\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1\n      })\n    }\n\n  }\n\n  rate = (e, data) => {\n    console.log(e, data)\n  }\n\n  createDoctor = (doctor) => {\n\n    let doctorObj = {\n      api_id: doctor.id,\n      first_name: doctor.firstName,\n      last_name: doctor.lastName,\n      address: doctor.address,\n      image: doctor.image,\n      specialty: doctor.specialty,\n      title: doctor.title,\n      gender: doctor.gender,\n      bio: doctor.bio,\n      phone_number: doctor.phone\n    }\n\n    fetch(URL + `/doctors`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify(doctorObj)\n    }).then(resp => resp.json())\n      .then(data => {\n\n        let doctors = [...this.state.doctors]\n        this.setState({\n          ...this.state,\n          doctors: [data, ...doctors]\n        }, () => { this.props.history.push('/doctors') })\n      }, this.setState({ isLoading: false }))\n  }\n\n  heart = (doctor) => {\n\n    console.log(\"this is doctor: \", doctor)\n    let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id)\n\n    console.log(\"in the heart, before if\", favorite)\n    if (typeof favorite == \"object\") {\n      console.log(\"in the if, before unHeart is called\", favorite)\n      this.unHeart(favorite)\n    } else {\n      console.log(\"in the else, before favorite is called\", favorite)\n      this.favorite(doctor)\n    }\n  }\n\n  unHeart = (favorite) => {\n    // debugger\n    console.log(\"got here in the unheart\", favorite)\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    fetch(URL + `/favorites/${favorite.id}`, {\n      method: \"DELETE\",\n    }).then(resp => resp.json()).then(data => {\n      let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id)\n      let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id)\n      this.setState({\n        ...this.state,\n        favorite: 0,\n        doctors: [data.doctor, ...this.state.doctors],\n        currentUser: {\n          ...this.state.currentUser,\n          favorites: favorites,\n          doctors: doctors\n        }\n      })\n    })\n  }\n\n  favorite = (doctor) => {\n    console.log(\"in the favorite\")\n\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id\n    }\n\n    fetch(URL + `/favorites`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify(favoriteObject)\n    }).then(resp => resp.json())\n      .then(data => {\n        let favorites = [...this.state.currentUser.favorites]\n        let doctors = [...this.state.currentUser.doctors]\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n\n          }\n        }, () => console.log(\"this.state.currentUser\", this.state.currentUser))\n\n      })\n\n  }\n\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData)\n  }\n\n  logInOrSignUp = (formData) => {\n    // console.log(URL)\n    // debugger\n    fetch(URL + \"/users\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation\n\n      })\n    }).then(resp => resp.json())\n      .then(data => {\n\n        this.setState({\n          ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'))\n      }\n\n      )\n\n  }\n\n  userProfile = () => {\n\n\n    let id = this.state.currentUser.id\n    fetch(URL + `/users/${id}`)\n      .then(resp => resp.json())\n      .then(data => {\n        this.setState({\n          ...this.state,\n          currentUser: {\n            ...this.state.currentUser,\n            doctors: data.doctors\n          }\n\n        }, () => {\n          console.log(\"after profile button is clicked: \", this.state.currentUser.doctors)\n          this.props.history.push('/profile')\n        })\n      })\n  }\n\n  logOut = () => {\n    this.props.history.push('/')\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] })\n  }\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register })\n  }\n  // request to Google GeoCode API to turn string into Longitude/Latitude\n  toGeoCode = (formData) => {\n\n\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${formData.address}&key=` + REACT_APP_GOOGLE_GEOCODE_API_KEY)\n      .then(resp => resp.json())\n      .then(data => this.setState({\n        lat: data[\"results\"][0].geometry.location.lat,\n        lng: data[\"results\"][0].geometry.location.lng\n      }, () => this.getDoctors(formData))).catch(err => console.dir(err))\n\n  }\n\n  // request to BetterDoc API with Long/Lat\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true })\n    } else {\n      this.setState({ error: false })\n    }\n  }\n\n  getDoctors = (formData) => {\n\n    fetch(`https://api.betterdoctor.com/2016-03-01/doctors?query=${formData.ailment}&location=${this.state.lat}%2C${this.state.lng}%2C${formData.miles}&skip=0&limit=100&user_key=` + REACT_APP_BETTER_DOC_API_KEY)\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(\"data from betterdoc\", data)\n        this.setState({\n          apiDoctors: data.data,\n          isLoading: false\n        }, () => this.isResolved())\n        this.parseDoctors(data.data)\n      }).catch((error) => {\n        console.log(error)\n      })\n  }\n\n  // imageApi = (firstName, lastName, title) => {\n\n  //   fetch(`https://serpapi.com/search?q=${firstName}%20${lastName},%20${title}&tbm=isch&ijn=0&api_key=${REACT_APP_SERP_API_KEY}`)\n  //     .then(resp => { resp.json() })\n  //     .then(data => {\n\n  //       return data.images_results[0].original\n  //     })\n  //     .catch(err => {\n\n  //       console.error(err)\n  //     })\n  // }\n\n  parseDoctors = (doctorsArray) => {\n\n    let doctors = []\n    doctorsArray.map(element => {\n\n\n      try {\n        let doctorHash = {}\n        doctorHash.id = element.uid\n        // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n        doctorHash.firstName = element.profile.first_name\n        doctorHash.lastName = element.profile.last_name\n        if (element.profile.gender === 'male') {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/matthew.png'\n        } else if (element.profile.gender === 'female') {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/kristy.png'\n        } else {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/elyse.png'\n        }\n        doctorHash.title = element.profile.title\n        doctorHash.bio = element.profile.bio\n        doctorHash.address = element.practices[0].address\n        doctorHash.gender = element.profile.gender\n        doctorHash.phone = element.practices[0].phones[0].number\n\n        doctorHash.specialty = element.specialties[0].name\n        doctors.push(doctorHash)\n        this.createDoctor(doctorHash)\n      }\n      catch (err) {\n        console.log(err.message)\n      }\n    })\n  }\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true })\n  }\n\n\n  patchUser = (userData) => {\n\n    fetch(URL + `/users/${this.state.currentUser.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        password_confirmation: userData.passwordConfirmation,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        address: userData.address,\n\n      })\n    }).then(resp => resp.json())\n      .then(data =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name\n          }\n        }, () => console.log(this.state.currentUser)))\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(URL + `/users`)\n      .then(resp => resp.json())\n      .then(users => {\n        console.log(\"in component did mount users\", users)\n        this.setState({\n          users\n        }, () => console.log(\"this.state.users after mount: \", this.state.users))\n      })\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search')\n    } else {\n      alert('Please log in before searching')\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Button color=\"red\" onClick={() => this.searchButton()} >Search</Button>\n        {this.state.isLoggedIn && <Button color=\"red\" onClick={() => this.userProfile()}>Profile</Button>}\n        {this.state.isLoggedIn && <Button color=\"red\" onClick={this.logOut}>Logout</Button>}\n        <Image alt=\"\" src=\"\"></Image>\n        {!this.state.isLoggedIn && <Login isLoggedIn={this.state.isLoggedIn} onSignUp={this.onSignUp} onSubmit={this.onSubmit} register={this.state.register} />}\n        <Switch>\n          <Route exact path='/doctors' render={routerProps => <Doctors createDoctor={this.createDoctor}  {...routerProps} doctors={this.state.doctors} />} />\n          <Route exact path='/search' render={routerProps => <Search error={this.state.error} isLoading={this.state.isLoading} currentUser={this.state.currentUser} loadingHandler={this.loadingHandler} {...routerProps} toGeoCode={this.toGeoCode} favorite={this.favorite} />} />\n          <Route exact path='/doctors/:id' render={routerProps => <DoctorShow rate={this.rate} doctors={this.state.doctors} favorite={this.state.favorite} isFavorite={this.isFavorite} heart={this.heart} currentUser={this.state.currentUser} {...routerProps} favorite={this.favorite} />} />\n          <Route exact path='/profile' render={routerProps => <Profile patchUser={this.patchUser} currentUser={this.state.currentUser} doctors={this.state.doctors} isLoggedIn={this.state.isLoggedIn} {...routerProps} />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App)"]},"metadata":{},"sourceType":"module"}