{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js\";\nimport React from 'react';\nimport { Grid, Rating, Header, Message, Button, Divider, Segment } from 'semantic-ui-react';\n\nclass DoctorShow extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.isFavorite = () => {\n      let favoriteArray = this.props.currentUser.doctors.filter(doctor => doctor.id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      } // debugger\n\n    };\n\n    this.state = {\n      favorite: 0\n    };\n\n    this.favoriteHandler = () => {\n      this.setState({\n        favorite: 0\n      });\n    };\n\n    this.docCheck = () => {\n      let doc;\n\n      if (this.props.doctors.length > 0) {\n        doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id);\n\n        if (!!doc) {\n          this.renderDocJsx(doc);\n        }\n      } else {\n        doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id);\n\n        if (!!doc) {\n          this.renderDocJsx(doc);\n        }\n      }\n    };\n\n    this.rate = (e, data, doc) => {\n      this.setState({\n        favorite: data.rating\n      }, () => this.props.heart(doc));\n    };\n  }\n\n  componentDidMount() {\n    if (Array.isArray(this.props.currentUser.doctors)) {\n      this.isFavorite();\n    }\n  }\n\n  render() {\n    let doc;\n    doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id);\n    console.log(\"doc after currentUser find:\", doc);\n\n    if (doc == undefined) {\n      doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id);\n      console.log(\"doc after doctor find:\", doc);\n    } // if (doc === undefined){\n    // console.log(\"before push\", doc)\n    // this.props.history.push('/profile')\n    // debugger\n    // }\n    // console.log(\"this.props.doctors \", this.props.doctors)\n    // console.log(\"this.props.match \", this.props.match)\n    // console.log(\"this.props.match.params.id: \", this.props.match.params.id)\n    // console.log(\"doc: \", doc)\n    // console.log(\"this.props.currentUser\", this.props.currentUser)\n    // debugger\n\n\n    return (// <div>Hello</div>\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        columns: 2,\n        textAlign: \"center\",\n        style: {\n          height: '100vh'\n        },\n        verticalAlign: \"middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        style: {\n          maxWidth: 750\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, doc.first_name ? doc.first_name : doc.firstName, \" \", doc.last_name ? doc.last_name : doc.lastName, \" \", doc.title), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(Message, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Phone Number: \", doc.phone_number), React.createElement(Rating, {\n        onRate: (e, data) => this.rate(e, data, doc),\n        icon: \"heart\",\n        rating: this.state.favorite,\n        maxRating: 1,\n        size: \"huge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }))), React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Message, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, doc.bio)))))\n    );\n  }\n\n} // DoctorShow.defaultProps = {\n//   currentUser: {\n//     userDoctors: []\n//   }\n// };\n\n\nexport default DoctorShow;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js"],"names":["React","Grid","Rating","Header","Message","Button","Divider","Segment","DoctorShow","Component","isFavorite","favoriteArray","props","currentUser","doctors","filter","doctor","id","match","params","length","setState","favorite","state","favoriteHandler","docCheck","doc","find","renderDocJsx","rate","e","data","rating","heart","componentDidMount","Array","isArray","render","console","log","undefined","height","maxWidth","first_name","firstName","last_name","lastName","title","phone_number","bio"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Grid, Rating, Header, Message, Button, Divider, Segment } from 'semantic-ui-react'\n\n\n\nclass DoctorShow extends React.Component {\n\n  // sendEmail = () => {\n\n  //   emailjs.sendForm('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', e.target, 'YOUR_USER_ID')\n  //     .then((result) => {\n  //       console.log(result.text);\n  //     }, (error) => {\n  //       console.log(error.text)\n  //       this.props.history.push('/video');\n  //     });\n  // }\n\n\n  isFavorite = () => {\n\n\n    let favoriteArray = this.props.currentUser.doctors.filter(doctor => doctor.id == this.props.match.params.id)\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1\n      })\n    }\n    // debugger\n  }\n  // let apiDoc = this.props.apiDoctors.find(doctor => doctor.uid === this.props.match.params.id)\n  // if (Array.isArray(this.props.currentUser.userDoctors) && this.props.currentUser.userDoctors.length > 0) {\n  //   let doctorArray = this.props.currentUser.userDoctors.filter(doctor => doctor.api_id === apiDoc.uid)\n\n  //   if (doctorArray.length === 1) {\n  //     this.setState({\n  //       favorite: 1\n  //     })\n  //   }\n  // }\n\n\n  state = {\n    favorite: 0\n  }\n\n  favoriteHandler = () => {\n    this.setState({\n      favorite: 0\n    })\n  }\n\n  docCheck = () => {\n    let doc\n    if (this.props.doctors.length > 0) {\n      doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id)\n      if (!!doc) {\n        this.renderDocJsx(doc)\n      }\n    } else {\n      doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id)\n      if (!!doc) {\n        this.renderDocJsx(doc)\n      }\n    }\n  }\n\n\n  componentDidMount() {\n    if (Array.isArray(this.props.currentUser.doctors)) {\n      this.isFavorite()\n    }\n  }\n\n  rate = (e, data, doc) => {\n    this.setState({\n      favorite: data.rating\n    }, () => this.props.heart(doc))\n  }\n\n  render() {\n    let doc\n    doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id)\n    console.log(\"doc after currentUser find:\", doc)\n    if (doc == undefined) {\n      doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id)\n      console.log(\"doc after doctor find:\", doc)\n    }\n    // if (doc === undefined){\n    // console.log(\"before push\", doc)\n\n    // this.props.history.push('/profile')\n    // debugger\n    // }\n\n\n\n\n    // console.log(\"this.props.doctors \", this.props.doctors)\n    // console.log(\"this.props.match \", this.props.match)\n    // console.log(\"this.props.match.params.id: \", this.props.match.params.id)\n    // console.log(\"doc: \", doc)\n\n    // console.log(\"this.props.currentUser\", this.props.currentUser)\n    // debugger\n\n\n\n\n    return (\n      // <div>Hello</div>\n\n      <div>\n        <Grid columns={2} textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n          <Grid.Row style={{ maxWidth: 750 }}>\n            <Grid.Column>\n              <Segment >\n                <Header>{doc.first_name ? doc.first_name : doc.firstName} {doc.last_name ? doc.last_name : doc.lastName} {doc.title}</Header>\n                <Divider />\n                <Message>Phone Number: {doc.phone_number}</Message>                \n                <Rating onRate={(e, data) => this.rate(e, data, doc)} icon=\"heart\" rating={this.state.favorite} maxRating={1} size=\"huge\" />\n              </Segment >\n            </Grid.Column>\n            <Grid.Column>\n              <Message>{doc.bio}</Message>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\n// DoctorShow.defaultProps = {\n//   currentUser: {\n//     userDoctors: []\n//   }\n// };\n\nexport default DoctorShow"]},"metadata":{},"sourceType":"module"}