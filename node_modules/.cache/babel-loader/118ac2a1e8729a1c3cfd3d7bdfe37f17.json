{"ast":null,"code":"import React from 'react';\nimport axios from 'axios';\nexport const fetchApiDoctors = async payload => {\n  const {\n    address,\n    query,\n    distance,\n    lat,\n    lng\n  } = payload;\n  let data;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`);\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n\n  return data;\n};\nexport const createDoctors = async incomingDoctors => {\n  incomingDoctors.map(async doctor => {\n    let detailedDoctor = await createDoctor(doctor); // destructuring for values in schema\n\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: {\n          lat,\n          lng\n        }\n      }\n    } = detailedDoctor; // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews\n    };\n    let data;\n    let photoData; // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    return data;\n  });\n};\n\nconst createDoctor = async singleDoctor => {\n  let detailedDoctor;\n  let doctorFromBackend;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/details/${singleDoctor.place_id}`);\n    detailedDoctor = res.data.result;\n  } catch (err) {\n    console.log(err, 'FROM CREATEDOCTORS HELPER');\n    throw err;\n  }\n\n  const {\n    formatted_address,\n    formatted_phone_number,\n    name,\n    place_id,\n    rating,\n    url,\n    website,\n    user_ratings_total,\n    reviews,\n    photos,\n    geometry: {\n      location: {\n        lat,\n        lng\n      }\n    }\n  } = detailedDoctor; // ES6 key value assignment operator\n\n  const doctorHash = {\n    place_id,\n    name,\n    formatted_address,\n    rating,\n    user_ratings_total,\n    formatted_phone_number,\n    lat,\n    lng,\n    url,\n    website,\n    photos,\n    reviews\n  };\n  let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n  doctorFromBackend = res.data;\n  let createdReviews = await createReviews(doctorFromBackend, reviews);\n  let createdPhotos = await createPhotos(doctorFromBackend.place_id);\n  doctorFromBackend.reviews = createdReviews;\n  doctorFromBackend.photos = createdPhotos;\n  return doctorFromBackend;\n};\n\nconst createReviews = async (reviews, doctorFromBackend) => {\n  const revs = [];\n  reviews.forEach(async singleReview => {\n    revs.push((await createReview(singleReview, doctorFromBackend)));\n  });\n  return revs;\n};\n\nconst createReview = async (singleReview, doctorFromBackend) => {\n  const {\n    author_name,\n    author_url,\n    profile_photo_url,\n    rating,\n    relative_time_description,\n    text,\n    time\n  } = singleReview;\n  const reviewHash = {\n    author_name,\n    author_url,\n    profile_photo_url,\n    rating,\n    relative_time_description,\n    text,\n    time,\n    place_id,\n    doctor_id: doctorFromBackend.id\n  };\n\n  try {\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n    return res.data;\n  } catch (error) {\n    console.log(err);\n    throw err;\n  }\n};\n\nconst createPhotos = async ({\n  doctorId,\n  placeId\n}) => {\n  let data = [];\n  const myHeaders = new Headers();\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/helpers/helpers.js"],"names":["React","axios","fetchApiDoctors","payload","address","query","distance","lat","lng","data","res","get","results","err","console","log","createDoctors","incomingDoctors","map","doctor","detailedDoctor","createDoctor","formatted_address","formatted_phone_number","name","place_id","rating","url","website","user_ratings_total","reviews","photos","geometry","location","doctorHash","photoData","post","photoPayload","incomingPhotos","doctorId","id","placeId","createPhotos","singleDoctor","doctorFromBackend","result","createdReviews","createReviews","createdPhotos","revs","forEach","singleReview","push","createReview","author_name","author_url","profile_photo_url","relative_time_description","text","time","reviewHash","doctor_id","error","myHeaders","Headers","photoHash","doctor_reference"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport const fetchApiDoctors = async (payload) => {\n  const { address, query, distance, lat, lng } = payload;\n  let data;\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`\n    );\n\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n  return data;\n};\n\nexport const createDoctors = async (incomingDoctors) => {\n  incomingDoctors.map(async (doctor) => {\n    let detailedDoctor = await createDoctor(doctor);\n\n    // destructuring for values in schema\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: { lat, lng },\n      },\n    } = detailedDoctor;\n\n    // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews,\n    };\n\n    let data;\n    let photoData;\n\n    // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id,\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n    return data;\n  });\n};\n\nconst createDoctor = async (singleDoctor) => {\n  let detailedDoctor;\n  let doctorFromBackend;\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/details/${singleDoctor.place_id}`\n    );\n    detailedDoctor = res.data.result;\n  } catch (err) {\n    console.log(err, 'FROM CREATEDOCTORS HELPER');\n    throw err;\n  }\n\n  const {\n    formatted_address,\n    formatted_phone_number,\n    name,\n    place_id,\n    rating,\n    url,\n    website,\n    user_ratings_total,\n    reviews,\n    photos,\n    geometry: {\n      location: { lat, lng },\n    },\n  } = detailedDoctor;\n\n  // ES6 key value assignment operator\n\n  const doctorHash = {\n    place_id,\n    name,\n    formatted_address,\n    rating,\n    user_ratings_total,\n    formatted_phone_number,\n    lat,\n    lng,\n    url,\n    website,\n    photos,\n    reviews,\n  };\n\n  let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n  doctorFromBackend = res.data;\n  let createdReviews = await createReviews(doctorFromBackend, reviews);\n  let createdPhotos = await createPhotos(doctorFromBackend.place_id);\n  doctorFromBackend.reviews = createdReviews;\n  doctorFromBackend.photos = createdPhotos;\n  return doctorFromBackend;\n};\n\nconst createReviews = async (reviews, doctorFromBackend) => {\n  const revs = [];\n  reviews.forEach(async (singleReview) => {\n    revs.push(await createReview(singleReview, doctorFromBackend));\n  });\n  return revs;\n};\n\nconst createReview = async (singleReview, doctorFromBackend) => {\n  const {\n    author_name,\n    author_url,\n    profile_photo_url,\n    rating,\n    relative_time_description,\n    text,\n    time,\n  } = singleReview;\n  const reviewHash = {\n    author_name,\n    author_url,\n    profile_photo_url,\n    rating,\n    relative_time_description,\n    text,\n    time,\n    place_id,\n    doctor_id: doctorFromBackend.id,\n  };\n\n  try {\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n    return res.data;\n  } catch (error) {\n    console.log(err);\n    throw err;\n  }\n};\n\n\n\nconst createPhotos = async ({ doctorId, placeId }) => {\n  let data = [];\n  const myHeaders = new Headers();\n\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId,\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}