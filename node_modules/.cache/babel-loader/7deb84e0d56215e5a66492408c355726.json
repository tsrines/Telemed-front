{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/ConversationsList.js\";\nimport React from 'react';\nimport NewConversationForm from './NewConversationForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\nimport ActionCableConsumer from 'react-actioncable-provider';\nimport { API_ROOT } from '../constants';\n\nclass ConversationsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      conversations: [],\n      activeConversation: null\n    };\n\n    this.componentDidMount = () => {\n      fetch(`${API_ROOT}/conversations`).then(res => res.json()).then(conversations => this.setState({\n        conversations\n      }));\n    };\n\n    this.handleClick = id => {\n      this.setState({\n        activeConversation: id\n      });\n    };\n\n    this.handleReceivedConversation = response => {\n      const {\n        conversation\n      } = response;\n      this.setState({\n        conversations: [...this.state.conversations, conversation]\n      });\n    };\n\n    this.handleReceivedMessage = response => {\n      const {\n        message\n      } = response;\n      const conversations = [...this.state.conversations];\n      const conversation = conversations.find(conversation => conversation.id === message.conversation_id);\n      conversation.messages = [...conversation.messages, message];\n      this.setState({\n        conversations\n      });\n    };\n\n    this.render = () => {\n      const {\n        conversations,\n        activeConversation\n      } = this.state;\n      return React.createElement(\"div\", {\n        className: \"conversationsList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(ActionCableConsumer, {\n        channel: {\n          channel: 'ConversationsChannel'\n        },\n        onReceived: this.handleReceivedConversation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), this.state.conversations.length ? React.createElement(Cable, {\n        conversations: conversations,\n        handleReceivedMessage: this.handleReceivedMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }) : null, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Conversations\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, mapConversations(conversations, this.handleClick)), React.createElement(NewConversationForm, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), activeConversation ? React.createElement(MessagesArea, {\n        conversation: findActiveConversation(conversations, activeConversation),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }) : null);\n    };\n  }\n\n}\n\nexport default ConversationsList; // helpers\n\nconst findActiveConversation = (conversations, activeConversation) => {\n  return conversations.find(conversation => conversation.id === activeConversation);\n};\n\nconst mapConversations = (conversations, handleClick) => {\n  return conversations.map(conversation => {\n    return React.createElement(\"li\", {\n      key: conversation.id,\n      onClick: () => handleClick(conversation.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, conversation.title);\n  });\n};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/ConversationsList.js"],"names":["React","NewConversationForm","MessagesArea","Cable","ActionCableConsumer","API_ROOT","ConversationsList","Component","state","conversations","activeConversation","componentDidMount","fetch","then","res","json","setState","handleClick","id","handleReceivedConversation","response","conversation","handleReceivedMessage","message","find","conversation_id","messages","render","channel","length","mapConversations","findActiveConversation","map","title"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\n\nimport NewConversationForm from './NewConversationForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\nimport ActionCableConsumer from 'react-actioncable-provider';\nimport { API_ROOT } from '../constants';\n\nclass ConversationsList extends React.Component {\n  state = {\n    conversations: [],\n    activeConversation: null,\n  };\n\n  componentDidMount = () => {\n    fetch(`${API_ROOT}/conversations`)\n      .then((res) => res.json())\n      .then((conversations) => this.setState({ conversations }));\n  };\n\n  handleClick = (id) => {\n    this.setState({ activeConversation: id });\n  };\n\n  handleReceivedConversation = (response) => {\n    const { conversation } = response;\n    this.setState({\n      conversations: [...this.state.conversations, conversation],\n    });\n  };\n\n  handleReceivedMessage = (response) => {\n    const { message } = response;\n    const conversations = [...this.state.conversations];\n    const conversation = conversations.find(\n      (conversation) => conversation.id === message.conversation_id\n    );\n    conversation.messages = [...conversation.messages, message];\n    this.setState({ conversations });\n  };\n\n  render = () => {\n    const { conversations, activeConversation } = this.state;\n    return (\n      <div className='conversationsList'>\n        <ActionCableConsumer\n          channel={{ channel: 'ConversationsChannel' }}\n          onReceived={this.handleReceivedConversation}\n        />\n        {this.state.conversations.length ? (\n          <Cable\n            conversations={conversations}\n            handleReceivedMessage={this.handleReceivedMessage}\n          />\n        ) : null}\n        <h2>Conversations</h2>\n        <ul>{mapConversations(conversations, this.handleClick)}</ul>\n        <NewConversationForm />\n        {activeConversation ? (\n          <MessagesArea\n            conversation={findActiveConversation(\n              conversations,\n              activeConversation\n            )}\n          />\n        ) : null}\n      </div>\n    );\n  };\n}\n\nexport default ConversationsList;\n\n// helpers\n\nconst findActiveConversation = (conversations, activeConversation) => {\n  return conversations.find(\n    (conversation) => conversation.id === activeConversation\n  );\n};\n\nconst mapConversations = (conversations, handleClick) => {\n  return conversations.map((conversation) => {\n    return (\n      <li key={conversation.id} onClick={() => handleClick(conversation.id)}>\n        {conversation.title}\n      </li>\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module"}