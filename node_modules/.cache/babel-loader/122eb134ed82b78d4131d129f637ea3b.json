{"ast":null,"code":"(function () {\n  var context = this;\n  (function () {\n    (function () {\n      var slice = [].slice;\n      this.ActionCable = {\n        INTERNAL: {\n          \"message_types\": {\n            \"welcome\": \"welcome\",\n            \"ping\": \"ping\",\n            \"confirmation\": \"confirm_subscription\",\n            \"rejection\": \"reject_subscription\"\n          },\n          \"default_mount_path\": \"/cable\",\n          \"protocols\": [\"actioncable-v1-json\", \"actioncable-unsupported\"]\n        },\n        WebSocket: window.WebSocket,\n        logger: window.console,\n        createConsumer: function createConsumer(url) {\n          var ref;\n\n          if (url == null) {\n            url = (ref = this.getConfig(\"url\")) != null ? ref : this.INTERNAL.default_mount_path;\n          }\n\n          return new ActionCable.Consumer(this.createWebSocketURL(url));\n        },\n        getConfig: function getConfig(name) {\n          var element;\n          element = document.head.querySelector(\"meta[name='action-cable-\" + name + \"']\");\n          return element != null ? element.getAttribute(\"content\") : void 0;\n        },\n        createWebSocketURL: function createWebSocketURL(url) {\n          var a;\n\n          if (url && !/^wss?:/i.test(url)) {\n            a = document.createElement(\"a\");\n            a.href = url;\n            a.href = a.href;\n            a.protocol = a.protocol.replace(\"http\", \"ws\");\n            return a.href;\n          } else {\n            return url;\n          }\n        },\n        startDebugging: function startDebugging() {\n          return this.debugging = true;\n        },\n        stopDebugging: function stopDebugging() {\n          return this.debugging = null;\n        },\n        log: function log() {\n          var messages, ref;\n          messages = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n\n          if (this.debugging) {\n            messages.push(Date.now());\n            return (ref = this.logger).log.apply(ref, [\"[ActionCable]\"].concat(slice.call(messages)));\n          }\n        }\n      };\n    }).call(this);\n  }).call(context);\n  var ActionCable = context.ActionCable;\n  (function () {\n    (function () {\n      var bind = function bind(fn, me) {\n        return function () {\n          return fn.apply(me, arguments);\n        };\n      };\n\n      ActionCable.ConnectionMonitor = function () {\n        var clamp, now, secondsSince;\n        ConnectionMonitor.pollInterval = {\n          min: 3,\n          max: 30\n        };\n        ConnectionMonitor.staleThreshold = 6;\n\n        function ConnectionMonitor(connection) {\n          this.connection = connection;\n          this.visibilityDidChange = bind(this.visibilityDidChange, this);\n          this.reconnectAttempts = 0;\n        }\n\n        ConnectionMonitor.prototype.start = function () {\n          if (!this.isRunning()) {\n            this.startedAt = now();\n            delete this.stoppedAt;\n            this.startPolling();\n            document.addEventListener(\"visibilitychange\", this.visibilityDidChange);\n            return ActionCable.log(\"ConnectionMonitor started. pollInterval = \" + this.getPollInterval() + \" ms\");\n          }\n        };\n\n        ConnectionMonitor.prototype.stop = function () {\n          if (this.isRunning()) {\n            this.stoppedAt = now();\n            this.stopPolling();\n            document.removeEventListener(\"visibilitychange\", this.visibilityDidChange);\n            return ActionCable.log(\"ConnectionMonitor stopped\");\n          }\n        };\n\n        ConnectionMonitor.prototype.isRunning = function () {\n          return this.startedAt != null && this.stoppedAt == null;\n        };\n\n        ConnectionMonitor.prototype.recordPing = function () {\n          return this.pingedAt = now();\n        };\n\n        ConnectionMonitor.prototype.recordConnect = function () {\n          this.reconnectAttempts = 0;\n          this.recordPing();\n          delete this.disconnectedAt;\n          return ActionCable.log(\"ConnectionMonitor recorded connect\");\n        };\n\n        ConnectionMonitor.prototype.recordDisconnect = function () {\n          this.disconnectedAt = now();\n          return ActionCable.log(\"ConnectionMonitor recorded disconnect\");\n        };\n\n        ConnectionMonitor.prototype.startPolling = function () {\n          this.stopPolling();\n          return this.poll();\n        };\n\n        ConnectionMonitor.prototype.stopPolling = function () {\n          return clearTimeout(this.pollTimeout);\n        };\n\n        ConnectionMonitor.prototype.poll = function () {\n          return this.pollTimeout = setTimeout(function (_this) {\n            return function () {\n              _this.reconnectIfStale();\n\n              return _this.poll();\n            };\n          }(this), this.getPollInterval());\n        };\n\n        ConnectionMonitor.prototype.getPollInterval = function () {\n          var interval, max, min, ref;\n          ref = this.constructor.pollInterval, min = ref.min, max = ref.max;\n          interval = 5 * Math.log(this.reconnectAttempts + 1);\n          return Math.round(clamp(interval, min, max) * 1000);\n        };\n\n        ConnectionMonitor.prototype.reconnectIfStale = function () {\n          if (this.connectionIsStale()) {\n            ActionCable.log(\"ConnectionMonitor detected stale connection. reconnectAttempts = \" + this.reconnectAttempts + \", pollInterval = \" + this.getPollInterval() + \" ms, time disconnected = \" + secondsSince(this.disconnectedAt) + \" s, stale threshold = \" + this.constructor.staleThreshold + \" s\");\n            this.reconnectAttempts++;\n\n            if (this.disconnectedRecently()) {\n              return ActionCable.log(\"ConnectionMonitor skipping reopening recent disconnect\");\n            } else {\n              ActionCable.log(\"ConnectionMonitor reopening\");\n              return this.connection.reopen();\n            }\n          }\n        };\n\n        ConnectionMonitor.prototype.connectionIsStale = function () {\n          var ref;\n          return secondsSince((ref = this.pingedAt) != null ? ref : this.startedAt) > this.constructor.staleThreshold;\n        };\n\n        ConnectionMonitor.prototype.disconnectedRecently = function () {\n          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;\n        };\n\n        ConnectionMonitor.prototype.visibilityDidChange = function () {\n          if (document.visibilityState === \"visible\") {\n            return setTimeout(function (_this) {\n              return function () {\n                if (_this.connectionIsStale() || !_this.connection.isOpen()) {\n                  ActionCable.log(\"ConnectionMonitor reopening stale connection on visibilitychange. visbilityState = \" + document.visibilityState);\n                  return _this.connection.reopen();\n                }\n              };\n            }(this), 200);\n          }\n        };\n\n        now = function now() {\n          return new Date().getTime();\n        };\n\n        secondsSince = function secondsSince(time) {\n          return (now() - time) / 1000;\n        };\n\n        clamp = function clamp(number, min, max) {\n          return Math.max(min, Math.min(max, number));\n        };\n\n        return ConnectionMonitor;\n      }();\n    }).call(this);\n    (function () {\n      var i,\n          message_types,\n          protocols,\n          ref,\n          supportedProtocols,\n          unsupportedProtocol,\n          slice = [].slice,\n          bind = function bind(fn, me) {\n        return function () {\n          return fn.apply(me, arguments);\n        };\n      },\n          indexOf = [].indexOf || function (item) {\n        for (var i = 0, l = this.length; i < l; i++) {\n          if (i in this && this[i] === item) return i;\n        }\n\n        return -1;\n      };\n\n      ref = ActionCable.INTERNAL, message_types = ref.message_types, protocols = ref.protocols;\n      supportedProtocols = 2 <= protocols.length ? slice.call(protocols, 0, i = protocols.length - 1) : (i = 0, []), unsupportedProtocol = protocols[i++];\n\n      ActionCable.Connection = function () {\n        Connection.reopenDelay = 500;\n\n        function Connection(consumer) {\n          this.consumer = consumer;\n          this.open = bind(this.open, this);\n          this.subscriptions = this.consumer.subscriptions;\n          this.monitor = new ActionCable.ConnectionMonitor(this);\n          this.disconnected = true;\n        }\n\n        Connection.prototype.send = function (data) {\n          if (this.isOpen()) {\n            this.webSocket.send(JSON.stringify(data));\n            return true;\n          } else {\n            return false;\n          }\n        };\n\n        Connection.prototype.open = function () {\n          if (this.isActive()) {\n            ActionCable.log(\"Attempted to open WebSocket, but existing socket is \" + this.getState());\n            return false;\n          } else {\n            ActionCable.log(\"Opening WebSocket, current state is \" + this.getState() + \", subprotocols: \" + protocols);\n\n            if (this.webSocket != null) {\n              this.uninstallEventHandlers();\n            }\n\n            this.webSocket = new ActionCable.WebSocket(this.consumer.url, protocols);\n            this.installEventHandlers();\n            this.monitor.start();\n            return true;\n          }\n        };\n\n        Connection.prototype.close = function (arg) {\n          var allowReconnect, ref1;\n          allowReconnect = (arg != null ? arg : {\n            allowReconnect: true\n          }).allowReconnect;\n\n          if (!allowReconnect) {\n            this.monitor.stop();\n          }\n\n          if (this.isActive()) {\n            return (ref1 = this.webSocket) != null ? ref1.close() : void 0;\n          }\n        };\n\n        Connection.prototype.reopen = function () {\n          var error;\n          ActionCable.log(\"Reopening WebSocket, current state is \" + this.getState());\n\n          if (this.isActive()) {\n            try {\n              return this.close();\n            } catch (error1) {\n              error = error1;\n              return ActionCable.log(\"Failed to reopen WebSocket\", error);\n            } finally {\n              ActionCable.log(\"Reopening WebSocket in \" + this.constructor.reopenDelay + \"ms\");\n              setTimeout(this.open, this.constructor.reopenDelay);\n            }\n          } else {\n            return this.open();\n          }\n        };\n\n        Connection.prototype.getProtocol = function () {\n          var ref1;\n          return (ref1 = this.webSocket) != null ? ref1.protocol : void 0;\n        };\n\n        Connection.prototype.isOpen = function () {\n          return this.isState(\"open\");\n        };\n\n        Connection.prototype.isActive = function () {\n          return this.isState(\"open\", \"connecting\");\n        };\n\n        Connection.prototype.isProtocolSupported = function () {\n          var ref1;\n          return ref1 = this.getProtocol(), indexOf.call(supportedProtocols, ref1) >= 0;\n        };\n\n        Connection.prototype.isState = function () {\n          var ref1, states;\n          states = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return ref1 = this.getState(), indexOf.call(states, ref1) >= 0;\n        };\n\n        Connection.prototype.getState = function () {\n          var ref1, state, value;\n\n          for (state in WebSocket) {\n            value = WebSocket[state];\n\n            if (value === ((ref1 = this.webSocket) != null ? ref1.readyState : void 0)) {\n              return state.toLowerCase();\n            }\n          }\n\n          return null;\n        };\n\n        Connection.prototype.installEventHandlers = function () {\n          var eventName, handler;\n\n          for (eventName in this.events) {\n            handler = this.events[eventName].bind(this);\n            this.webSocket[\"on\" + eventName] = handler;\n          }\n        };\n\n        Connection.prototype.uninstallEventHandlers = function () {\n          var eventName;\n\n          for (eventName in this.events) {\n            this.webSocket[\"on\" + eventName] = function () {};\n          }\n        };\n\n        Connection.prototype.events = {\n          message: function message(event) {\n            var identifier, message, ref1, type;\n\n            if (!this.isProtocolSupported()) {\n              return;\n            }\n\n            ref1 = JSON.parse(event.data), identifier = ref1.identifier, message = ref1.message, type = ref1.type;\n\n            switch (type) {\n              case message_types.welcome:\n                this.monitor.recordConnect();\n                return this.subscriptions.reload();\n\n              case message_types.ping:\n                return this.monitor.recordPing();\n\n              case message_types.confirmation:\n                return this.subscriptions.notify(identifier, \"connected\");\n\n              case message_types.rejection:\n                return this.subscriptions.reject(identifier);\n\n              default:\n                return this.subscriptions.notify(identifier, \"received\", message);\n            }\n          },\n          open: function open() {\n            ActionCable.log(\"WebSocket onopen event, using '\" + this.getProtocol() + \"' subprotocol\");\n            this.disconnected = false;\n\n            if (!this.isProtocolSupported()) {\n              ActionCable.log(\"Protocol is unsupported. Stopping monitor and disconnecting.\");\n              return this.close({\n                allowReconnect: false\n              });\n            }\n          },\n          close: function close(event) {\n            ActionCable.log(\"WebSocket onclose event\");\n\n            if (this.disconnected) {\n              return;\n            }\n\n            this.disconnected = true;\n            this.monitor.recordDisconnect();\n            return this.subscriptions.notifyAll(\"disconnected\", {\n              willAttemptReconnect: this.monitor.isRunning()\n            });\n          },\n          error: function error() {\n            return ActionCable.log(\"WebSocket onerror event\");\n          }\n        };\n        return Connection;\n      }();\n    }).call(this);\n    (function () {\n      var slice = [].slice;\n\n      ActionCable.Subscriptions = function () {\n        function Subscriptions(consumer) {\n          this.consumer = consumer;\n          this.subscriptions = [];\n        }\n\n        Subscriptions.prototype.create = function (channelName, mixin) {\n          var channel, params, subscription;\n          channel = channelName;\n          params = typeof channel === \"object\" ? channel : {\n            channel: channel\n          };\n          subscription = new ActionCable.Subscription(this.consumer, params, mixin);\n          return this.add(subscription);\n        };\n\n        Subscriptions.prototype.add = function (subscription) {\n          this.subscriptions.push(subscription);\n          this.consumer.ensureActiveConnection();\n          this.notify(subscription, \"initialized\");\n          this.sendCommand(subscription, \"subscribe\");\n          return subscription;\n        };\n\n        Subscriptions.prototype.remove = function (subscription) {\n          this.forget(subscription);\n\n          if (!this.findAll(subscription.identifier).length) {\n            this.sendCommand(subscription, \"unsubscribe\");\n          }\n\n          return subscription;\n        };\n\n        Subscriptions.prototype.reject = function (identifier) {\n          var i, len, ref, results, subscription;\n          ref = this.findAll(identifier);\n          results = [];\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            subscription = ref[i];\n            this.forget(subscription);\n            this.notify(subscription, \"rejected\");\n            results.push(subscription);\n          }\n\n          return results;\n        };\n\n        Subscriptions.prototype.forget = function (subscription) {\n          var s;\n\n          this.subscriptions = function () {\n            var i, len, ref, results;\n            ref = this.subscriptions;\n            results = [];\n\n            for (i = 0, len = ref.length; i < len; i++) {\n              s = ref[i];\n\n              if (s !== subscription) {\n                results.push(s);\n              }\n            }\n\n            return results;\n          }.call(this);\n\n          return subscription;\n        };\n\n        Subscriptions.prototype.findAll = function (identifier) {\n          var i, len, ref, results, s;\n          ref = this.subscriptions;\n          results = [];\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            s = ref[i];\n\n            if (s.identifier === identifier) {\n              results.push(s);\n            }\n          }\n\n          return results;\n        };\n\n        Subscriptions.prototype.reload = function () {\n          var i, len, ref, results, subscription;\n          ref = this.subscriptions;\n          results = [];\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            subscription = ref[i];\n            results.push(this.sendCommand(subscription, \"subscribe\"));\n          }\n\n          return results;\n        };\n\n        Subscriptions.prototype.notifyAll = function () {\n          var args, callbackName, i, len, ref, results, subscription;\n          callbackName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          ref = this.subscriptions;\n          results = [];\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            subscription = ref[i];\n            results.push(this.notify.apply(this, [subscription, callbackName].concat(slice.call(args))));\n          }\n\n          return results;\n        };\n\n        Subscriptions.prototype.notify = function () {\n          var args, callbackName, i, len, results, subscription, subscriptions;\n          subscription = arguments[0], callbackName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n\n          if (typeof subscription === \"string\") {\n            subscriptions = this.findAll(subscription);\n          } else {\n            subscriptions = [subscription];\n          }\n\n          results = [];\n\n          for (i = 0, len = subscriptions.length; i < len; i++) {\n            subscription = subscriptions[i];\n            results.push(typeof subscription[callbackName] === \"function\" ? subscription[callbackName].apply(subscription, args) : void 0);\n          }\n\n          return results;\n        };\n\n        Subscriptions.prototype.sendCommand = function (subscription, command) {\n          var identifier;\n          identifier = subscription.identifier;\n          return this.consumer.send({\n            command: command,\n            identifier: identifier\n          });\n        };\n\n        return Subscriptions;\n      }();\n    }).call(this);\n    (function () {\n      ActionCable.Subscription = function () {\n        var extend;\n\n        function Subscription(consumer, params, mixin) {\n          this.consumer = consumer;\n\n          if (params == null) {\n            params = {};\n          }\n\n          this.identifier = JSON.stringify(params);\n          extend(this, mixin);\n        }\n\n        Subscription.prototype.perform = function (action, data) {\n          if (data == null) {\n            data = {};\n          }\n\n          data.action = action;\n          return this.send(data);\n        };\n\n        Subscription.prototype.send = function (data) {\n          return this.consumer.send({\n            command: \"message\",\n            identifier: this.identifier,\n            data: JSON.stringify(data)\n          });\n        };\n\n        Subscription.prototype.unsubscribe = function () {\n          return this.consumer.subscriptions.remove(this);\n        };\n\n        extend = function extend(object, properties) {\n          var key, value;\n\n          if (properties != null) {\n            for (key in properties) {\n              value = properties[key];\n              object[key] = value;\n            }\n          }\n\n          return object;\n        };\n\n        return Subscription;\n      }();\n    }).call(this);\n    (function () {\n      ActionCable.Consumer = function () {\n        function Consumer(url) {\n          this.url = url;\n          this.subscriptions = new ActionCable.Subscriptions(this);\n          this.connection = new ActionCable.Connection(this);\n        }\n\n        Consumer.prototype.send = function (data) {\n          return this.connection.send(data);\n        };\n\n        Consumer.prototype.connect = function () {\n          return this.connection.open();\n        };\n\n        Consumer.prototype.disconnect = function () {\n          return this.connection.close({\n            allowReconnect: false\n          });\n        };\n\n        Consumer.prototype.ensureActiveConnection = function () {\n          if (!this.connection.isActive()) {\n            return this.connection.open();\n          }\n        };\n\n        return Consumer;\n      }();\n    }).call(this);\n  }).call(this);\n\n  if (typeof module === \"object\" && module.exports) {\n    module.exports = ActionCable;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(ActionCable);\n  }\n}).call(this);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/actioncable/lib/assets/compiled/action_cable.js"],"names":["context","slice","ActionCable","INTERNAL","WebSocket","window","logger","console","createConsumer","url","ref","getConfig","default_mount_path","Consumer","createWebSocketURL","name","element","document","head","querySelector","getAttribute","a","test","createElement","href","protocol","replace","startDebugging","debugging","stopDebugging","log","messages","arguments","length","call","push","Date","now","apply","concat","bind","fn","me","ConnectionMonitor","clamp","secondsSince","pollInterval","min","max","staleThreshold","connection","visibilityDidChange","reconnectAttempts","prototype","start","isRunning","startedAt","stoppedAt","startPolling","addEventListener","getPollInterval","stop","stopPolling","removeEventListener","recordPing","pingedAt","recordConnect","disconnectedAt","recordDisconnect","poll","clearTimeout","pollTimeout","setTimeout","_this","reconnectIfStale","interval","constructor","Math","round","connectionIsStale","disconnectedRecently","reopen","visibilityState","isOpen","getTime","time","number","i","message_types","protocols","supportedProtocols","unsupportedProtocol","indexOf","item","l","Connection","reopenDelay","consumer","open","subscriptions","monitor","disconnected","send","data","webSocket","JSON","stringify","isActive","getState","uninstallEventHandlers","installEventHandlers","close","arg","allowReconnect","ref1","error","error1","getProtocol","isState","isProtocolSupported","states","state","value","readyState","toLowerCase","eventName","handler","events","message","event","identifier","type","parse","welcome","reload","ping","confirmation","notify","rejection","reject","notifyAll","willAttemptReconnect","Subscriptions","create","channelName","mixin","channel","params","subscription","Subscription","add","ensureActiveConnection","sendCommand","remove","forget","findAll","len","results","s","args","callbackName","command","extend","perform","action","unsubscribe","object","properties","key","connect","disconnect","module","exports","define","amd"],"mappings":"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","sourcesContent":["(function() {\n  var context = this;\n\n  (function() {\n    (function() {\n      var slice = [].slice;\n\n      this.ActionCable = {\n        INTERNAL: {\n          \"message_types\": {\n            \"welcome\": \"welcome\",\n            \"ping\": \"ping\",\n            \"confirmation\": \"confirm_subscription\",\n            \"rejection\": \"reject_subscription\"\n          },\n          \"default_mount_path\": \"/cable\",\n          \"protocols\": [\"actioncable-v1-json\", \"actioncable-unsupported\"]\n        },\n        WebSocket: window.WebSocket,\n        logger: window.console,\n        createConsumer: function(url) {\n          var ref;\n          if (url == null) {\n            url = (ref = this.getConfig(\"url\")) != null ? ref : this.INTERNAL.default_mount_path;\n          }\n          return new ActionCable.Consumer(this.createWebSocketURL(url));\n        },\n        getConfig: function(name) {\n          var element;\n          element = document.head.querySelector(\"meta[name='action-cable-\" + name + \"']\");\n          return element != null ? element.getAttribute(\"content\") : void 0;\n        },\n        createWebSocketURL: function(url) {\n          var a;\n          if (url && !/^wss?:/i.test(url)) {\n            a = document.createElement(\"a\");\n            a.href = url;\n            a.href = a.href;\n            a.protocol = a.protocol.replace(\"http\", \"ws\");\n            return a.href;\n          } else {\n            return url;\n          }\n        },\n        startDebugging: function() {\n          return this.debugging = true;\n        },\n        stopDebugging: function() {\n          return this.debugging = null;\n        },\n        log: function() {\n          var messages, ref;\n          messages = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          if (this.debugging) {\n            messages.push(Date.now());\n            return (ref = this.logger).log.apply(ref, [\"[ActionCable]\"].concat(slice.call(messages)));\n          }\n        }\n      };\n\n    }).call(this);\n  }).call(context);\n\n  var ActionCable = context.ActionCable;\n\n  (function() {\n    (function() {\n      var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n      ActionCable.ConnectionMonitor = (function() {\n        var clamp, now, secondsSince;\n\n        ConnectionMonitor.pollInterval = {\n          min: 3,\n          max: 30\n        };\n\n        ConnectionMonitor.staleThreshold = 6;\n\n        function ConnectionMonitor(connection) {\n          this.connection = connection;\n          this.visibilityDidChange = bind(this.visibilityDidChange, this);\n          this.reconnectAttempts = 0;\n        }\n\n        ConnectionMonitor.prototype.start = function() {\n          if (!this.isRunning()) {\n            this.startedAt = now();\n            delete this.stoppedAt;\n            this.startPolling();\n            document.addEventListener(\"visibilitychange\", this.visibilityDidChange);\n            return ActionCable.log(\"ConnectionMonitor started. pollInterval = \" + (this.getPollInterval()) + \" ms\");\n          }\n        };\n\n        ConnectionMonitor.prototype.stop = function() {\n          if (this.isRunning()) {\n            this.stoppedAt = now();\n            this.stopPolling();\n            document.removeEventListener(\"visibilitychange\", this.visibilityDidChange);\n            return ActionCable.log(\"ConnectionMonitor stopped\");\n          }\n        };\n\n        ConnectionMonitor.prototype.isRunning = function() {\n          return (this.startedAt != null) && (this.stoppedAt == null);\n        };\n\n        ConnectionMonitor.prototype.recordPing = function() {\n          return this.pingedAt = now();\n        };\n\n        ConnectionMonitor.prototype.recordConnect = function() {\n          this.reconnectAttempts = 0;\n          this.recordPing();\n          delete this.disconnectedAt;\n          return ActionCable.log(\"ConnectionMonitor recorded connect\");\n        };\n\n        ConnectionMonitor.prototype.recordDisconnect = function() {\n          this.disconnectedAt = now();\n          return ActionCable.log(\"ConnectionMonitor recorded disconnect\");\n        };\n\n        ConnectionMonitor.prototype.startPolling = function() {\n          this.stopPolling();\n          return this.poll();\n        };\n\n        ConnectionMonitor.prototype.stopPolling = function() {\n          return clearTimeout(this.pollTimeout);\n        };\n\n        ConnectionMonitor.prototype.poll = function() {\n          return this.pollTimeout = setTimeout((function(_this) {\n            return function() {\n              _this.reconnectIfStale();\n              return _this.poll();\n            };\n          })(this), this.getPollInterval());\n        };\n\n        ConnectionMonitor.prototype.getPollInterval = function() {\n          var interval, max, min, ref;\n          ref = this.constructor.pollInterval, min = ref.min, max = ref.max;\n          interval = 5 * Math.log(this.reconnectAttempts + 1);\n          return Math.round(clamp(interval, min, max) * 1000);\n        };\n\n        ConnectionMonitor.prototype.reconnectIfStale = function() {\n          if (this.connectionIsStale()) {\n            ActionCable.log(\"ConnectionMonitor detected stale connection. reconnectAttempts = \" + this.reconnectAttempts + \", pollInterval = \" + (this.getPollInterval()) + \" ms, time disconnected = \" + (secondsSince(this.disconnectedAt)) + \" s, stale threshold = \" + this.constructor.staleThreshold + \" s\");\n            this.reconnectAttempts++;\n            if (this.disconnectedRecently()) {\n              return ActionCable.log(\"ConnectionMonitor skipping reopening recent disconnect\");\n            } else {\n              ActionCable.log(\"ConnectionMonitor reopening\");\n              return this.connection.reopen();\n            }\n          }\n        };\n\n        ConnectionMonitor.prototype.connectionIsStale = function() {\n          var ref;\n          return secondsSince((ref = this.pingedAt) != null ? ref : this.startedAt) > this.constructor.staleThreshold;\n        };\n\n        ConnectionMonitor.prototype.disconnectedRecently = function() {\n          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;\n        };\n\n        ConnectionMonitor.prototype.visibilityDidChange = function() {\n          if (document.visibilityState === \"visible\") {\n            return setTimeout((function(_this) {\n              return function() {\n                if (_this.connectionIsStale() || !_this.connection.isOpen()) {\n                  ActionCable.log(\"ConnectionMonitor reopening stale connection on visibilitychange. visbilityState = \" + document.visibilityState);\n                  return _this.connection.reopen();\n                }\n              };\n            })(this), 200);\n          }\n        };\n\n        now = function() {\n          return new Date().getTime();\n        };\n\n        secondsSince = function(time) {\n          return (now() - time) / 1000;\n        };\n\n        clamp = function(number, min, max) {\n          return Math.max(min, Math.min(max, number));\n        };\n\n        return ConnectionMonitor;\n\n      })();\n\n    }).call(this);\n    (function() {\n      var i, message_types, protocols, ref, supportedProtocols, unsupportedProtocol,\n        slice = [].slice,\n        bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n        indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n      ref = ActionCable.INTERNAL, message_types = ref.message_types, protocols = ref.protocols;\n\n      supportedProtocols = 2 <= protocols.length ? slice.call(protocols, 0, i = protocols.length - 1) : (i = 0, []), unsupportedProtocol = protocols[i++];\n\n      ActionCable.Connection = (function() {\n        Connection.reopenDelay = 500;\n\n        function Connection(consumer) {\n          this.consumer = consumer;\n          this.open = bind(this.open, this);\n          this.subscriptions = this.consumer.subscriptions;\n          this.monitor = new ActionCable.ConnectionMonitor(this);\n          this.disconnected = true;\n        }\n\n        Connection.prototype.send = function(data) {\n          if (this.isOpen()) {\n            this.webSocket.send(JSON.stringify(data));\n            return true;\n          } else {\n            return false;\n          }\n        };\n\n        Connection.prototype.open = function() {\n          if (this.isActive()) {\n            ActionCable.log(\"Attempted to open WebSocket, but existing socket is \" + (this.getState()));\n            return false;\n          } else {\n            ActionCable.log(\"Opening WebSocket, current state is \" + (this.getState()) + \", subprotocols: \" + protocols);\n            if (this.webSocket != null) {\n              this.uninstallEventHandlers();\n            }\n            this.webSocket = new ActionCable.WebSocket(this.consumer.url, protocols);\n            this.installEventHandlers();\n            this.monitor.start();\n            return true;\n          }\n        };\n\n        Connection.prototype.close = function(arg) {\n          var allowReconnect, ref1;\n          allowReconnect = (arg != null ? arg : {\n            allowReconnect: true\n          }).allowReconnect;\n          if (!allowReconnect) {\n            this.monitor.stop();\n          }\n          if (this.isActive()) {\n            return (ref1 = this.webSocket) != null ? ref1.close() : void 0;\n          }\n        };\n\n        Connection.prototype.reopen = function() {\n          var error;\n          ActionCable.log(\"Reopening WebSocket, current state is \" + (this.getState()));\n          if (this.isActive()) {\n            try {\n              return this.close();\n            } catch (error1) {\n              error = error1;\n              return ActionCable.log(\"Failed to reopen WebSocket\", error);\n            } finally {\n              ActionCable.log(\"Reopening WebSocket in \" + this.constructor.reopenDelay + \"ms\");\n              setTimeout(this.open, this.constructor.reopenDelay);\n            }\n          } else {\n            return this.open();\n          }\n        };\n\n        Connection.prototype.getProtocol = function() {\n          var ref1;\n          return (ref1 = this.webSocket) != null ? ref1.protocol : void 0;\n        };\n\n        Connection.prototype.isOpen = function() {\n          return this.isState(\"open\");\n        };\n\n        Connection.prototype.isActive = function() {\n          return this.isState(\"open\", \"connecting\");\n        };\n\n        Connection.prototype.isProtocolSupported = function() {\n          var ref1;\n          return ref1 = this.getProtocol(), indexOf.call(supportedProtocols, ref1) >= 0;\n        };\n\n        Connection.prototype.isState = function() {\n          var ref1, states;\n          states = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return ref1 = this.getState(), indexOf.call(states, ref1) >= 0;\n        };\n\n        Connection.prototype.getState = function() {\n          var ref1, state, value;\n          for (state in WebSocket) {\n            value = WebSocket[state];\n            if (value === ((ref1 = this.webSocket) != null ? ref1.readyState : void 0)) {\n              return state.toLowerCase();\n            }\n          }\n          return null;\n        };\n\n        Connection.prototype.installEventHandlers = function() {\n          var eventName, handler;\n          for (eventName in this.events) {\n            handler = this.events[eventName].bind(this);\n            this.webSocket[\"on\" + eventName] = handler;\n          }\n        };\n\n        Connection.prototype.uninstallEventHandlers = function() {\n          var eventName;\n          for (eventName in this.events) {\n            this.webSocket[\"on\" + eventName] = function() {};\n          }\n        };\n\n        Connection.prototype.events = {\n          message: function(event) {\n            var identifier, message, ref1, type;\n            if (!this.isProtocolSupported()) {\n              return;\n            }\n            ref1 = JSON.parse(event.data), identifier = ref1.identifier, message = ref1.message, type = ref1.type;\n            switch (type) {\n              case message_types.welcome:\n                this.monitor.recordConnect();\n                return this.subscriptions.reload();\n              case message_types.ping:\n                return this.monitor.recordPing();\n              case message_types.confirmation:\n                return this.subscriptions.notify(identifier, \"connected\");\n              case message_types.rejection:\n                return this.subscriptions.reject(identifier);\n              default:\n                return this.subscriptions.notify(identifier, \"received\", message);\n            }\n          },\n          open: function() {\n            ActionCable.log(\"WebSocket onopen event, using '\" + (this.getProtocol()) + \"' subprotocol\");\n            this.disconnected = false;\n            if (!this.isProtocolSupported()) {\n              ActionCable.log(\"Protocol is unsupported. Stopping monitor and disconnecting.\");\n              return this.close({\n                allowReconnect: false\n              });\n            }\n          },\n          close: function(event) {\n            ActionCable.log(\"WebSocket onclose event\");\n            if (this.disconnected) {\n              return;\n            }\n            this.disconnected = true;\n            this.monitor.recordDisconnect();\n            return this.subscriptions.notifyAll(\"disconnected\", {\n              willAttemptReconnect: this.monitor.isRunning()\n            });\n          },\n          error: function() {\n            return ActionCable.log(\"WebSocket onerror event\");\n          }\n        };\n\n        return Connection;\n\n      })();\n\n    }).call(this);\n    (function() {\n      var slice = [].slice;\n\n      ActionCable.Subscriptions = (function() {\n        function Subscriptions(consumer) {\n          this.consumer = consumer;\n          this.subscriptions = [];\n        }\n\n        Subscriptions.prototype.create = function(channelName, mixin) {\n          var channel, params, subscription;\n          channel = channelName;\n          params = typeof channel === \"object\" ? channel : {\n            channel: channel\n          };\n          subscription = new ActionCable.Subscription(this.consumer, params, mixin);\n          return this.add(subscription);\n        };\n\n        Subscriptions.prototype.add = function(subscription) {\n          this.subscriptions.push(subscription);\n          this.consumer.ensureActiveConnection();\n          this.notify(subscription, \"initialized\");\n          this.sendCommand(subscription, \"subscribe\");\n          return subscription;\n        };\n\n        Subscriptions.prototype.remove = function(subscription) {\n          this.forget(subscription);\n          if (!this.findAll(subscription.identifier).length) {\n            this.sendCommand(subscription, \"unsubscribe\");\n          }\n          return subscription;\n        };\n\n        Subscriptions.prototype.reject = function(identifier) {\n          var i, len, ref, results, subscription;\n          ref = this.findAll(identifier);\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            subscription = ref[i];\n            this.forget(subscription);\n            this.notify(subscription, \"rejected\");\n            results.push(subscription);\n          }\n          return results;\n        };\n\n        Subscriptions.prototype.forget = function(subscription) {\n          var s;\n          this.subscriptions = (function() {\n            var i, len, ref, results;\n            ref = this.subscriptions;\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n              s = ref[i];\n              if (s !== subscription) {\n                results.push(s);\n              }\n            }\n            return results;\n          }).call(this);\n          return subscription;\n        };\n\n        Subscriptions.prototype.findAll = function(identifier) {\n          var i, len, ref, results, s;\n          ref = this.subscriptions;\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            s = ref[i];\n            if (s.identifier === identifier) {\n              results.push(s);\n            }\n          }\n          return results;\n        };\n\n        Subscriptions.prototype.reload = function() {\n          var i, len, ref, results, subscription;\n          ref = this.subscriptions;\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            subscription = ref[i];\n            results.push(this.sendCommand(subscription, \"subscribe\"));\n          }\n          return results;\n        };\n\n        Subscriptions.prototype.notifyAll = function() {\n          var args, callbackName, i, len, ref, results, subscription;\n          callbackName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n          ref = this.subscriptions;\n          results = [];\n          for (i = 0, len = ref.length; i < len; i++) {\n            subscription = ref[i];\n            results.push(this.notify.apply(this, [subscription, callbackName].concat(slice.call(args))));\n          }\n          return results;\n        };\n\n        Subscriptions.prototype.notify = function() {\n          var args, callbackName, i, len, results, subscription, subscriptions;\n          subscription = arguments[0], callbackName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n          if (typeof subscription === \"string\") {\n            subscriptions = this.findAll(subscription);\n          } else {\n            subscriptions = [subscription];\n          }\n          results = [];\n          for (i = 0, len = subscriptions.length; i < len; i++) {\n            subscription = subscriptions[i];\n            results.push(typeof subscription[callbackName] === \"function\" ? subscription[callbackName].apply(subscription, args) : void 0);\n          }\n          return results;\n        };\n\n        Subscriptions.prototype.sendCommand = function(subscription, command) {\n          var identifier;\n          identifier = subscription.identifier;\n          return this.consumer.send({\n            command: command,\n            identifier: identifier\n          });\n        };\n\n        return Subscriptions;\n\n      })();\n\n    }).call(this);\n    (function() {\n      ActionCable.Subscription = (function() {\n        var extend;\n\n        function Subscription(consumer, params, mixin) {\n          this.consumer = consumer;\n          if (params == null) {\n            params = {};\n          }\n          this.identifier = JSON.stringify(params);\n          extend(this, mixin);\n        }\n\n        Subscription.prototype.perform = function(action, data) {\n          if (data == null) {\n            data = {};\n          }\n          data.action = action;\n          return this.send(data);\n        };\n\n        Subscription.prototype.send = function(data) {\n          return this.consumer.send({\n            command: \"message\",\n            identifier: this.identifier,\n            data: JSON.stringify(data)\n          });\n        };\n\n        Subscription.prototype.unsubscribe = function() {\n          return this.consumer.subscriptions.remove(this);\n        };\n\n        extend = function(object, properties) {\n          var key, value;\n          if (properties != null) {\n            for (key in properties) {\n              value = properties[key];\n              object[key] = value;\n            }\n          }\n          return object;\n        };\n\n        return Subscription;\n\n      })();\n\n    }).call(this);\n    (function() {\n      ActionCable.Consumer = (function() {\n        function Consumer(url) {\n          this.url = url;\n          this.subscriptions = new ActionCable.Subscriptions(this);\n          this.connection = new ActionCable.Connection(this);\n        }\n\n        Consumer.prototype.send = function(data) {\n          return this.connection.send(data);\n        };\n\n        Consumer.prototype.connect = function() {\n          return this.connection.open();\n        };\n\n        Consumer.prototype.disconnect = function() {\n          return this.connection.close({\n            allowReconnect: false\n          });\n        };\n\n        Consumer.prototype.ensureActiveConnection = function() {\n          if (!this.connection.isActive()) {\n            return this.connection.open();\n          }\n        };\n\n        return Consumer;\n\n      })();\n\n    }).call(this);\n  }).call(this);\n\n  if (typeof module === \"object\" && module.exports) {\n    module.exports = ActionCable;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(ActionCable);\n  }\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}