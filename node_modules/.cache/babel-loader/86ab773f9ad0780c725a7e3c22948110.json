{"ast":null,"code":"import React from 'react';\nimport axios from 'axios';\nexport const fetchApiDoctors = async payload => {\n  const {\n    address,\n    query,\n    distance,\n    lat,\n    lng\n  } = payload;\n  let data;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`);\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n\n  return data;\n};\nexport const createDoctors = async incomingDoctors => {\n  incomingDoctors.each(async doctor => {\n    let detailedDoctor = await createDoctor(doctor); // destructuring for values in schema\n    // ES6 key value assignment operator\n\n    let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n    data = res.data;\n  });\n};\n\nconst createDoctor = async singleDoctor => {\n  let detailedDoctor;\n  let doctorFromBackend;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/details/${singleDoctor.place_id}`);\n    detailedDoctor = res.data.result;\n  } catch (err) {\n    console.log(err, 'FROM CREATEDOCTORS HELPER');\n    throw err;\n  }\n\n  const {\n    formatted_address,\n    formatted_phone_number,\n    name,\n    place_id,\n    rating,\n    url,\n    website,\n    user_ratings_total,\n    reviews,\n    photos,\n    geometry: {\n      location: {\n        lat,\n        lng\n      }\n    }\n  } = detailedDoctor; // ES6 key value assignment operator\n\n  const doctorHash = {\n    place_id,\n    name,\n    formatted_address,\n    rating,\n    user_ratings_total,\n    formatted_phone_number,\n    lat,\n    lng,\n    url,\n    website,\n    photos,\n    reviews\n  };\n  let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n  doctorFromBackend = res.data;\n  let createdReviews = await createReviews(doctorFromBackend, reviews);\n  let createdPhotos = await createPhotos(doctorFromBackend.place_id);\n  doctorFromBackend.reviews = createdReviews;\n  doctorFromBackend.photos = createdPhotos;\n  return doctorFromBackend;\n};\n\nconst createReviews = async (reviews, doctorFromBackend) => {\n  const revs = [];\n  reviews.forEach(async singleReview => {\n    revs.push((await createReview(singleReview, doctorFromBackend)));\n  });\n  return revs;\n};\n\nconst createReview = async (singleReview, doctorFromBackend) => {\n  const {\n    author_name,\n    author_url,\n    profile_photo_url,\n    rating,\n    relative_time_description,\n    text,\n    time\n  } = singleReview;\n  const reviewHash = {\n    author_name,\n    author_url,\n    profile_photo_url,\n    rating,\n    relative_time_description,\n    text,\n    time,\n    place_id,\n    doctor_id: doctorFromBackend.id\n  };\n\n  try {\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n    return res.data;\n  } catch (error) {\n    console.log(err);\n    throw err;\n  }\n};\n\nconst createPhotos = async ({\n  doctorId,\n  placeId\n}) => {\n  let data = [];\n  const myHeaders = new Headers();\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/helpers/helpers.js"],"names":["React","axios","fetchApiDoctors","payload","address","query","distance","lat","lng","data","res","get","results","err","console","log","createDoctors","incomingDoctors","each","doctor","detailedDoctor","createDoctor","post","doctorHash","singleDoctor","doctorFromBackend","place_id","result","formatted_address","formatted_phone_number","name","rating","url","website","user_ratings_total","reviews","photos","geometry","location","createdReviews","createReviews","createdPhotos","createPhotos","revs","forEach","singleReview","push","createReview","author_name","author_url","profile_photo_url","relative_time_description","text","time","reviewHash","doctor_id","id","error","doctorId","placeId","myHeaders","Headers","photoHash","doctor_reference"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport const fetchApiDoctors = async (payload) => {\n  const { address, query, distance, lat, lng } = payload;\n  let data;\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`\n    );\n\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n  return data;\n};\n\nexport const createDoctors = async (incomingDoctors) => {\n  incomingDoctors.each(async (doctor) => {\n    let detailedDoctor = await createDoctor(doctor);\n        // destructuring for values in schema\n\n    // ES6 key value assignment operator\n    \n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n\n    })\n  }\n\nconst createDoctor = async (singleDoctor) => {\n  let detailedDoctor;\n  let doctorFromBackend;\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/details/${singleDoctor.place_id}`\n    );\n    detailedDoctor = res.data.result;\n  } catch (err) {\n    console.log(err, 'FROM CREATEDOCTORS HELPER');\n    throw err;\n  }\n\n  const {\n    formatted_address,\n    formatted_phone_number,\n    name,\n    place_id,\n    rating,\n    url,\n    website,\n    user_ratings_total,\n    reviews,\n    photos,\n    geometry: {\n      location: { lat, lng },\n    },\n  } = detailedDoctor;\n\n  // ES6 key value assignment operator\n\n  const doctorHash = {\n    place_id,\n    name,\n    formatted_address,\n    rating,\n    user_ratings_total,\n    formatted_phone_number,\n    lat,\n    lng,\n    url,\n    website,\n    photos,\n    reviews,\n  };\n\n  let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n  doctorFromBackend = res.data;\n  let createdReviews = await createReviews(doctorFromBackend, reviews);\n  let createdPhotos = await createPhotos(doctorFromBackend.place_id);\n  doctorFromBackend.reviews = createdReviews;\n  doctorFromBackend.photos = createdPhotos;\n  return doctorFromBackend;\n};\n\nconst createReviews = async (reviews, doctorFromBackend) => {\n  const revs = [];\n  reviews.forEach(async (singleReview) => {\n    revs.push(await createReview(singleReview, doctorFromBackend));\n  });\n  return revs;\n};\n\nconst createReview = async (singleReview, doctorFromBackend) => {\n  const {\n    author_name,\n    author_url,\n    profile_photo_url,\n    rating,\n    relative_time_description,\n    text,\n    time,\n  } = singleReview;\n  const reviewHash = {\n    author_name,\n    author_url,\n    profile_photo_url,\n    rating,\n    relative_time_description,\n    text,\n    time,\n    place_id,\n    doctor_id: doctorFromBackend.id,\n  };\n\n  try {\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n    return res.data;\n  } catch (error) {\n    console.log(err);\n    throw err;\n  }\n};\n\n\n\nconst createPhotos = async ({ doctorId, placeId }) => {\n  let data = [];\n  const myHeaders = new Headers();\n\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId,\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}