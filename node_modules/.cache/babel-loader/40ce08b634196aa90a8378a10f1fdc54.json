{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { useState } from 'react';\n\nconst SearchIndex = ({\n  match,\n  loadUser,\n  currentUser,\n  loadingHandler,\n  loading\n}) => {\n  useEffect(() => {\n    loadUser();\n    loadSearchIndex();\n    console.log('got here in SearchIndex');\n  }, [loadUser]);\n  const [searchIndex, setSearchIndex] = useState([]);\n  const {\n    params: {\n      userId,\n      searchId\n    }\n  } = match;\n  console.log(userId, searchId);\n\n  const loadSearchIndex = async () => {\n    let csv = '';\n    const index = [];\n\n    try {\n      let res = await Axios.get(`http://localhost:3000/searches/${parseInt(searchId)}`);\n      csv = res.data.csv.split(',');\n    } catch (err) {}\n\n    console.log(csv, 'CSV FROM LOADSEARCHINDEX');\n    csv.forEach(async id => {\n      let doctorId = parseInt(id);\n      let res = await Axios.get(`http://localhost:3000/doctors/${doctorId}`);\n      let doc = res.data;\n      console.log(res);\n      index.push(doc);\n    });\n    setSearchIndex(index);\n  };\n\n  console.log(searchIndex); // if(userId !== currentUser.id){\n  //   return <Redirect to={'/search'} />\n  // }\n\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, JSON.stringify(searchIndex, null, 2)) // <div>\n  //   <Grid\n  //     container\n  //     textAlign='center'\n  //     style={{ height: '100vh' }}\n  //     verticalAlign='middle'\n  //   >\n  //     <br></br>\n  //     <Card.Group\n  //       style={{ maxHeight: '35em' }}\n  //       display='flex'\n  //       justify-content='center'\n  //       itemsPerRow={3}\n  //     >\n  //       <DoctorCard />\n  //     </Card.Group>\n  //   </Grid>\n  // </div>\n  ;\n}; // SearchIndex.propTypes = {};\n\n\nexport default SearchIndex;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js"],"names":["React","useEffect","PropTypes","Card","Grid","DoctorCard","Axios","Redirect","useState","SearchIndex","match","loadUser","currentUser","loadingHandler","loading","loadSearchIndex","console","log","searchIndex","setSearchIndex","params","userId","searchId","csv","index","res","get","parseInt","data","split","err","forEach","id","doctorId","doc","push","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,KADmB;AAEnBC,EAAAA,QAFmB;AAGnBC,EAAAA,WAHmB;AAInBC,EAAAA,cAJmB;AAKnBC,EAAAA;AALmB,CAAD,KAMd;AACJb,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ;AACRI,IAAAA,eAAe;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,GAJQ,EAIN,CAACN,QAAD,CAJM,CAAT;AAMA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM;AACJY,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV;AADJ,MAEFZ,KAFJ;AAIAM,EAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ,EAAoBC,QAApB;;AAEA,QAAMP,eAAe,GAAG,YAAY;AAClC,QAAIQ,GAAG,GAAG,EAAV;AACA,UAAMC,KAAK,GAAG,EAAd;;AACA,QAAI;AACF,UAAIC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CACb,kCAAiCC,QAAQ,CAACL,QAAD,CAAW,EADvC,CAAhB;AAGAC,MAAAA,GAAG,GAAGE,GAAG,CAACG,IAAJ,CAASL,GAAT,CAAaM,KAAb,CAAmB,GAAnB,CAAN;AACD,KALD,CAKE,OAAOC,GAAP,EAAY,CAAE;;AAChBd,IAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ,EAAiB,0BAAjB;AAEAA,IAAAA,GAAG,CAACQ,OAAJ,CAAY,MAAOC,EAAP,IAAc;AACxB,UAAIC,QAAQ,GAAGN,QAAQ,CAACK,EAAD,CAAvB;AACA,UAAIP,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CACb,iCAAgCO,QAAS,EAD5B,CAAhB;AAGA,UAAIC,GAAG,GAAGT,GAAG,CAACG,IAAd;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AACAD,MAAAA,KAAK,CAACW,IAAN,CAAWD,GAAX;AACD,KARD;AAUAf,IAAAA,cAAc,CAACK,KAAD,CAAd;AACD,GAtBD;;AAwBAR,EAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ,EAvCI,CAyCJ;AACA;AACA;;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKkB,IAAI,CAACC,SAAL,CAAenB,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAAL,CADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBF;AAqBD,CAvED,C,CAyEA;;;AAEA,eAAeT,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { useState } from 'react';\n\nconst SearchIndex = ({\n  match,\n  loadUser,\n  currentUser,\n  loadingHandler,\n  loading,\n}) => {\n  useEffect(() => {\n    loadUser();\n    loadSearchIndex();\n    console.log('got here in SearchIndex');\n  }, [loadUser]);\n\n  const [searchIndex, setSearchIndex] = useState([]);\n\n  const {\n    params: { userId, searchId },\n  } = match;\n\n  console.log(userId, searchId);\n\n  const loadSearchIndex = async () => {\n    let csv = '';\n    const index = [];\n    try {\n      let res = await Axios.get(\n        `http://localhost:3000/searches/${parseInt(searchId)}`\n      );\n      csv = res.data.csv.split(',');\n    } catch (err) {}\n    console.log(csv, 'CSV FROM LOADSEARCHINDEX');\n    \n    csv.forEach(async (id) => {\n      let doctorId = parseInt(id)\n      let res = await Axios.get(\n        `http://localhost:3000/doctors/${doctorId}`\n      );\n      let doc = res.data;\n      console.log(res)\n      index.push(doc);\n    });\n    \n    setSearchIndex(index);\n  };\n\n  console.log(searchIndex);\n\n  // if(userId !== currentUser.id){\n  //   return <Redirect to={'/search'} />\n  // }\n  return (\n    <h1>{JSON.stringify(searchIndex, null, 2)}</h1>\n    // <div>\n    //   <Grid\n    //     container\n    //     textAlign='center'\n    //     style={{ height: '100vh' }}\n    //     verticalAlign='middle'\n    //   >\n    //     <br></br>\n    //     <Card.Group\n    //       style={{ maxHeight: '35em' }}\n    //       display='flex'\n    //       justify-content='center'\n    //       itemsPerRow={3}\n    //     >\n    //       <DoctorCard />\n    //     </Card.Group>\n    //   </Grid>\n    // </div>\n  );\n};\n\n// SearchIndex.propTypes = {};\n\nexport default SearchIndex;\n"]},"metadata":{},"sourceType":"module"}