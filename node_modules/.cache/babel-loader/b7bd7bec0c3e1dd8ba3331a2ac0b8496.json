{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/Search.js\";\nimport React from 'react';\nimport { Form, Header, Image, Button, Grid, Segment } from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass Search extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      address: '',\n      query: '',\n      distance: '',\n      browserLocation: true,\n      lat: null,\n      lng: null\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = async e => {\n      // console.log('this.props from search', this.props);\n      e.preventDefault();\n      this.props.loadingHandler(true);\n      const payload = this.state;\n      const {\n        lat,\n        lng,\n        distance,\n        query,\n        address\n      } = this.state;\n\n      if (lat === null && lng === null) {\n        try {\n          let res = await axios.get(`http://localhost:3000/geocodes/coords?address=${address}`);\n          payload.lat = res.data.lat;\n          payload.lng = res.data.lng;\n          payload.query = query;\n          await this.props.googleSearch(payload);\n        } catch (err) {\n          alert(err);\n        }\n      } else {\n        payload.query = query;\n        await this.props.googleSearch(payload);\n      }\n\n      this.props.loadingHandler(false);\n    };\n\n    this.useCurrentPosition = async e => {\n      const geo = navigator.geolocation;\n\n      if (!geo) {\n        console.log('Geo not supported');\n      } else {\n        geo.getCurrentPosition(position => {\n          this.setState({\n            lat: position.coords.latitude.toString(),\n            lng: position.coords.longitude.toString(),\n            browserLocation: true\n          });\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 900\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h2\",\n      color: \"red\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: \"../favicon.ico\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), \"Telemed\"), this.props.loading && React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Loading...\"), React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(React.Fragment, null, React.createElement(Form.Checkbox, {\n      onClick: this.useCurrentPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Get my address for me\")), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Current Location?\"), React.createElement(\"input\", {\n      name: \"address\",\n      onChange: e => this.onChange(e),\n      type: \"text\",\n      placeholder: \"Address\",\n      value: this.state.address,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"What kind of doctor do you need to see?\"), React.createElement(\"input\", {\n      required: true,\n      name: \"query\",\n      onChange: e => this.onChange(e),\n      type: \"text\",\n      placeholder: \"...foot, heart, etc\",\n      value: this.state.query,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(Form.Field, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"How far are you willing to travel?\"), React.createElement(\"input\", {\n      label: 'Travel Distance',\n      required: true,\n      name: \"distance\",\n      onChange: e => this.onChange(e),\n      type: \"number\",\n      placeholder: \"...in miles\",\n      value: this.state.distance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(Button, {\n      loading: this.props.loading,\n      color: \"red\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Get Doctors\"))))));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/Search.js"],"names":["React","Form","Header","Image","Button","Grid","Segment","axios","Search","Component","state","address","query","distance","browserLocation","lat","lng","onChange","e","setState","target","name","value","onSubmit","preventDefault","props","loadingHandler","payload","res","get","data","googleSearch","err","alert","useCurrentPosition","geo","navigator","geolocation","console","log","getCurrentPosition","position","coords","latitude","toString","longitude","render","height","maxWidth","loading"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Header, Image, Button, Grid, Segment } from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass Search extends React.Component {\n  state = {\n    address: '',\n    query: '',\n    distance: '',\n    browserLocation: true,\n    lat: null,\n    lng: null,\n  };\n\n  onChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  onSubmit = async (e) => {\n    // console.log('this.props from search', this.props);\n    e.preventDefault();\n    this.props.loadingHandler(true);\n    const payload = this.state;\n    const { lat, lng, distance, query, address } = this.state;\n    if (lat === null && lng === null) {\n      try {\n        let res = await axios.get(\n          `http://localhost:3000/geocodes/coords?address=${address}`\n        );\n        payload.lat = res.data.lat;\n        payload.lng = res.data.lng;\n        payload.query = query;\n        await this.props.googleSearch(payload);\n      } catch (err) {\n        alert(err);\n      }\n    } else {\n      payload.query = query;\n      await this.props.googleSearch(payload);\n    }\n    this.props.loadingHandler(false);\n  };\n\n  useCurrentPosition = async (e) => {\n    const geo = navigator.geolocation;\n\n    if (!geo) {\n      console.log('Geo not supported');\n    } else {\n      geo.getCurrentPosition((position) => {\n        this.setState({\n          lat: position.coords.latitude.toString(),\n          lng: position.coords.longitude.toString(),\n          browserLocation: true,\n        });\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Grid\n          textAlign='center'\n          style={{ height: '100vh' }}\n          verticalAlign='middle'\n        >\n          <Grid.Column style={{ maxWidth: 900 }}>\n            <Header as='h2' color='red' textAlign='center'>\n              <Image src='../favicon.ico' />\n              Telemed\n            </Header>\n            {this.props.loading && <Segment>Loading...</Segment>}\n\n            <Form onSubmit={this.onSubmit}>\n              <>\n                <Form.Checkbox onClick={this.useCurrentPosition}>\n                  <label>Get my address for me</label>\n                </Form.Checkbox>\n                <Form.Field>\n                  <label>Current Location?</label>\n                  <input\n                    name='address'\n                    onChange={(e) => this.onChange(e)}\n                    type='text'\n                    placeholder='Address'\n                    value={this.state.address}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>What kind of doctor do you need to see?</label>\n                  <input\n                    required\n                    name='query'\n                    onChange={(e) => this.onChange(e)}\n                    type='text'\n                    placeholder='...foot, heart, etc'\n                    value={this.state.query}\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>How far are you willing to travel?</label>\n                  <input\n                    label={'Travel Distance'}\n                    required\n                    name='distance'\n                    onChange={(e) => this.onChange(e)}\n                    type='number'\n                    placeholder='...in miles'\n                    value={this.state.distance}\n                  />\n                </Form.Field>\n                <Button loading={this.props.loading} color='red' type='submit'>\n                  Get Doctors\n                </Button>\n                \n              </>\n            </Form>\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}