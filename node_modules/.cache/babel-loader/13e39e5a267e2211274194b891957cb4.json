{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js\";\nimport React from 'react';\nimport { Grid, Rating, Header, Message, Divider, Segment, Image, GridColumn } from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass DoctorShow extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      favorite: 0,\n      currentUser: null,\n      doc: {},\n      id: null\n    };\n\n    this.isFavorite = () => {\n      const favorite = this.props.currentUser.doctors.find(doc => doc.id === parseInt(this.props.match.params.id));\n      if (favorite) this.setState({\n        favorite: 1\n      });\n    };\n\n    this.postFavorite = async () => {\n      const favoriteObject = {\n        doctor_id: this.props.match.params.id,\n        user_id: this.props.currentUser.id\n      };\n\n      try {\n        let res = await axios.post(`http://localhost:3000/favorites`, favoriteObject);\n        this.setState({\n          favorite: 1,\n          id: res.data.id\n        }, () => {\n          this.props.loadUser();\n        });\n        console.log(res.data);\n      } catch (error) {}\n    };\n\n    this.deleteFavorite = async () => {\n      let favorite = this.props.currentUser.favorites.find(favorite => favorite.doctor_id === parseInt(this.props.match.params.id));\n\n      if (favorite === -1) {\n        this.setState({\n          favorite: 0\n        });\n      }\n\n      try {\n        let res = await axios.delete(`http://localhost:3000/favorites/${favorite.id}`);\n        console.log('res.data from deletefavorite', res.data);\n        this.setState({\n          favorite: 0,\n          id: null\n        }, () => {\n          this.props.loadUser();\n        });\n      } catch (err) {\n        console.log('error', err);\n      }\n\n      console.log('got here in delete');\n    };\n\n    this.rate = (e, {\n      rating\n    }) => {\n      if (rating === 0) {\n        this.deleteFavorite();\n      } else {\n        this.postFavorite();\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.getDoctorById(parseInt(this.props.match.params.id));\n    await this.props.loadUser();\n    this.isFavorite(); // if(this.props.currentUser.doctors.includes(this.props.doctorShow)) this.setState({favorite: 1})\n  }\n\n  render() {\n    console.log('DOCTOR SHOW THIS.STATE: ', this.state); // debugger\n\n    const {\n      name,\n      formatted_phone_number,\n      formatted_address,\n      rating,\n      url,\n      website,\n      reviews,\n      photos\n    } = this.props.doctorShow;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: 3,\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      style: {\n        maxWidth: 1000\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: website,\n      rel: \"noopener noreferrer\",\n      target: \"_blank\",\n      to: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, name)), React.createElement(Rating, {\n      onRate: (e, data) => this.rate(e, data),\n      icon: \"heart\",\n      rating: this.state.favorite,\n      maxRating: 1,\n      size: \"huge\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      rel: \"noopener noreferrer\",\n      href: `tel:${formatted_phone_number}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, formatted_phone_number)), React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: url,\n      rel: \"noopener no referrer\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, formatted_address)), rating && React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Average Rating: \", rating), React.createElement(GridColumn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), reviews && reviews.map(review => React.createElement(\"div\", {\n      key: review.author_name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, review.author_name)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, review.text)))))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, photos && photos.map(photo => React.createElement(Image, {\n      size: \"small\",\n      key: photo.id,\n      alt: \"\",\n      src: photo.slug,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default DoctorShow;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js"],"names":["React","Grid","Rating","Header","Message","Divider","Segment","Image","GridColumn","axios","DoctorShow","Component","state","favorite","currentUser","doc","id","isFavorite","props","doctors","find","parseInt","match","params","setState","postFavorite","favoriteObject","doctor_id","user_id","res","post","data","loadUser","console","log","error","deleteFavorite","favorites","delete","err","rate","e","rating","componentDidMount","getDoctorById","render","name","formatted_phone_number","formatted_address","url","website","reviews","photos","doctorShow","height","maxWidth","map","review","author_name","text","photo","slug"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Grid,\n  Rating,\n  Header,\n  Message,\n  Divider,\n  Segment,\n  Image,\n  GridColumn,\n} from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass DoctorShow extends React.Component {\n  state = {\n    favorite: 0,\n    currentUser: null,\n    doc: {},\n    id: null,\n  };\n \n\n  isFavorite = () => {\n    const favorite = this.props.currentUser.doctors.find(\n      (doc) => doc.id === parseInt(this.props.match.params.id)\n    );\n    if (favorite) this.setState({ favorite: 1 });\n  };\n\n  async componentDidMount() {\n    await this.props.getDoctorById(parseInt(this.props.match.params.id));\n    await this.props.loadUser();\n    this.isFavorite();\n\n    // if(this.props.currentUser.doctors.includes(this.props.doctorShow)) this.setState({favorite: 1})\n  }\n\n  postFavorite = async () => {\n    const favoriteObject = {\n      doctor_id: this.props.match.params.id,\n      user_id: this.props.currentUser.id,\n    };\n    try {\n      let res = await axios.post(\n        `http://localhost:3000/favorites`,\n        favoriteObject\n      );\n      this.setState({ favorite: 1, id: res.data.id }, () => {\n        this.props.loadUser();\n      });\n      console.log(res.data);\n    } catch (error) {}\n  };\n\n  deleteFavorite = async () => {\n    let favorite = this.props.currentUser.favorites.find(\n      (favorite) => favorite.doctor_id === parseInt(this.props.match.params.id)\n    );\n    if (favorite === -1) {\n      this.setState({ favorite: 0 });\n    }\n    try {\n      let res = await axios.delete(\n        `http://localhost:3000/favorites/${favorite.id}`\n      );\n      console.log('res.data from deletefavorite', res.data);\n      this.setState({ favorite: 0, id: null }, () => {\n        this.props.loadUser();\n      });\n    } catch (err) {\n      console.log('error', err);\n    }\n\n    console.log('got here in delete');\n  };\n\n  rate = (e, { rating }) => {\n    if (rating === 0) {\n      this.deleteFavorite();\n    } else {\n      this.postFavorite();\n    }\n  };\n\n  render() {\n    console.log('DOCTOR SHOW THIS.STATE: ', this.state);\n    // debugger\n    const {\n      name,\n      formatted_phone_number,\n      formatted_address,\n      rating,\n      url,\n      website,\n      reviews,\n      photos,\n    } = this.props.doctorShow;\n\n    return (\n      <div>\n        <Grid\n          columns={3}\n          textAlign='center'\n          style={{ height: '100vh' }}\n          verticalAlign='middle'\n        >\n          <Grid.Row style={{ maxWidth: 1000 }}>\n            <Grid.Column>\n              <Segment>\n                <Header>\n                  <a\n                    href={website}\n                    rel='noopener noreferrer'\n                    target='_blank'\n                    to={website}\n                  >\n                    {name}\n                  </a>\n                </Header>\n                <Rating\n                  onRate={(e, data) => this.rate(e, data)}\n                  icon='heart'\n                  rating={this.state.favorite}\n                  maxRating={1}\n                  size='huge'\n                />\n                <Divider />\n                <Message>\n                  <a\n                    rel='noopener noreferrer'\n                    href={`tel:${formatted_phone_number}`}\n                  >\n                    {formatted_phone_number}\n                  </a>\n                </Message>\n                <Message>\n                  <a href={url} rel='noopener no referrer' target='_blank'>\n                    {formatted_address}\n                  </a>\n                </Message>\n\n                {rating && <Message>Average Rating: {rating}</Message>}\n                <GridColumn></GridColumn>\n                {reviews &&\n                  reviews.map((review) => (\n                    <div key={review.author_name}>\n                      <Message>\n                        <span>\n                          <strong>{review.author_name}</strong>\n                        </span>\n                        <p>{review.text}</p>\n                      </Message>\n                    </div>\n                  ))}\n              </Segment>\n            </Grid.Column>\n            <Grid.Column>\n              {photos &&\n                photos.map((photo) => (\n                  <Image size='small' key={photo.id} alt='' src={photo.slug}></Image>\n                ))}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default DoctorShow;\n"]},"metadata":{},"sourceType":"module"}