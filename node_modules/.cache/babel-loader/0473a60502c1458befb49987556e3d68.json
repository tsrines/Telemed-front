{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport axios from 'axios';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: '',\n        email: '',\n        address: '',\n        password: '',\n        passwordConfirmation: '',\n        firstName: '',\n        lastName: '',\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      allDocs: [],\n      searchedPlaceIds: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter( // eslint-disable-next-line\n      doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.rate = (e, data) => {};\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find( // eslint-disable-next-line\n      favorite => favorite.api_id == doctor.api_id); // eslint-disable-next-line\n\n      if (typeof favorite == 'object') {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      //\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      // eslint-disable-next-line\n      fetch(`http://localhost:3000/favorites/${favorite.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch('http://localhost:3000/favorites', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      fetch('http://localhost:3000/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`http://localhost:3000/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.createDoctors = async incomingDoctors => {\n      await incomingDoctors.map(async doctor => {\n        let detailedDoctor;\n\n        try {\n          let res = await axios.get(`http://localhost:3000/geocodes/details/${doctor.place_id}`);\n          detailedDoctor = res.data.result;\n        } catch (err) {} // destructuring for values in schema\n\n\n        const {\n          formatted_address,\n          formatted_phone_number,\n          name,\n          place_id,\n          rating,\n          url,\n          website,\n          user_ratings_total,\n          reviews,\n          photos,\n          geometry: {\n            location: {\n              lat,\n              lng\n            }\n          }\n        } = detailedDoctor; // ES6 key value assignment operator\n\n        const doctorHash = {\n          place_id,\n          name,\n          formatted_address,\n          rating,\n          user_ratings_total,\n          formatted_phone_number,\n          lat,\n          lng,\n          url,\n          website,\n          photos,\n          reviews\n        }; // create post headers\n\n        const myHeaders = new Headers();\n        myHeaders.append('Content-Type', 'Application/json');\n        myHeaders.append('accepts', 'application/json'); // TODO check into stringify\n        // TODO check into redirect: follow\n        // options hash for post request to api\n\n        let data;\n        let reviewData;\n        let photoData; // CREATE DOCTOR\n\n        try {\n          let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n          data = res.data;\n          console.log(data, 'DATA IN CREATE DOCTOR');\n          reviews.forEach(async singleReview => {\n            const {\n              author_name,\n              author_url,\n              profile_photo_url,\n              rating,\n              relative_time_description,\n              text,\n              time\n            } = singleReview;\n            const reviewHash = {\n              author_name,\n              author_url,\n              profile_photo_url,\n              rating,\n              relative_time_description,\n              text,\n              time,\n              place_id,\n              doctor_id: data.id\n            };\n            let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n            reviewData = res.data;\n            console.log('res.data from reviewPost', res.data); //\n          });\n          const photoPayload = {\n            incomingPhotos: photos,\n            doctorId: data.id,\n            placeId: place_id\n          };\n\n          try {\n            photoData = await this.createPhotos(photoPayload);\n            console.log(photoData);\n          } catch (err) {\n            console.log(err);\n          }\n\n          try {\n            let array = [];\n            let res = await axios.get(`http://localhost:3000/doctors`);\n            let doctors = res.data; // debugger\n\n            doctors = doctors.filter(doc => {\n              this.state.searchedPlaceIds.includes(doc.place_id);\n            }); // console.log(doctors)\n\n            this.setState({\n              doctors\n            }, () => console.log(this.state, 'this.state after setState'));\n          } catch (err) {\n            console.log(err);\n          } // await this.fetchDoctors(doctorIds)\n          // TODO actually need to be setting state with reviews and photos properly added in\n          // this.setState({\n          //   doctors: [...this.state.doctors, data],\n          // });\n\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    };\n\n    this.fetchDoctors = async () => {\n      let allDocs;\n      allDocs = await axios.get(`http://localhost:3000/doctors`);\n      allDocs = allDocs.data;\n      this.setState({\n        allDocs\n      });\n    };\n\n    this.createPhotos = async ({\n      doctorId,\n      placeId\n    }) => {\n      let data = [];\n      const myHeaders = new Headers();\n      const photoHash = {\n        doctor_id: doctorId,\n        doctor_reference: placeId\n      };\n\n      try {\n        let res = await axios.post(`http://localhost:3000/photos`, photoHash); // debugger\n\n        data = res.data;\n      } catch (err) {\n        console.log(err);\n        throw err;\n      }\n\n      return data;\n    };\n\n    this.googleSearch = async payload => {\n      const {\n        address,\n        query,\n        distance,\n        lat,\n        lng\n      } = payload;\n      let data;\n\n      try {\n        let res = await axios.get(`http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`);\n        data = res.data.results;\n        const promise = await this.createDoctors(data);\n        console.log('promise from googleSearch', promise);\n        const searchedPlaceIds = data.map(place => place.place_id);\n        this.setState({\n          searchedPlaceIds\n        });\n      } catch (err) {\n        console.log('This is your error:', err);\n      }\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch(`http://localhost:3000/users/${this.state.currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    this.fetchDoctors();\n  }\n\n  render() {\n    console.log('this.state from App.js: ', this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({}, routerProps, {\n        doctors: this.state.doctors,\n        searchedPlaceIds: this.state.searchedPlaceIds,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        googleSearch: this.googleSearch,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        // eslint-disable-next-line\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Switch","withRouter","Button","Image","axios","DoctorShow","Doctors","Login","Profile","Search","App","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","allDocs","searchedPlaceIds","error","apiDoctors","users","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","rate","e","data","heart","find","unHeart","fetch","method","then","resp","json","favoriteObject","user_id","doctor_id","headers","accepts","body","JSON","stringify","newdoc","first_name","last_name","title","gender","bio","phone_number","onSubmit","formData","logInOrSignUp","password_confirmation","history","push","userProfile","logOut","onSignUp","createDoctors","incomingDoctors","map","detailedDoctor","res","get","place_id","result","err","formatted_address","formatted_phone_number","name","rating","url","website","user_ratings_total","reviews","photos","geometry","location","doctorHash","myHeaders","Headers","append","reviewData","photoData","post","console","log","forEach","singleReview","author_name","author_url","profile_photo_url","relative_time_description","text","time","reviewHash","photoPayload","incomingPhotos","doctorId","placeId","createPhotos","array","doc","includes","fetchDoctors","photoHash","doctor_reference","googleSearch","payload","query","distance","results","promise","place","isResolved","loadingHandler","patchUser","userData","searchButton","alert","componentDidMount","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport axios from 'axios';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: '',\n      email: '',\n      address: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      doctors: [],\n      favorites: [],\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    allDocs: [],\n    searchedPlaceIds: [],\n    error: false,\n    apiDoctors: [],\n    users: [],\n  };\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(\n      // eslint-disable-next-line\n      (doctor) => doctor.api_id == this.props.match.params.id\n    );\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1,\n      });\n    }\n  };\n\n  rate = (e, data) => {};\n\n  heart = (doctor) => {\n    let favorite = this.state.currentUser.favorites.find(\n      // eslint-disable-next-line\n      (favorite) => favorite.api_id == doctor.api_id\n    );\n\n    // eslint-disable-next-line\n    if (typeof favorite == 'object') {\n      this.unHeart(favorite);\n    } else {\n      this.favorite(doctor);\n    }\n  };\n\n  unHeart = (favorite) => {\n    //\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    // eslint-disable-next-line\n    fetch(`http://localhost:3000/favorites/${favorite.id}`, {\n      method: 'DELETE',\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = this.state.currentUser.favorites.filter(\n          (favorite) => favorite.id !== data.id\n        );\n        let doctors = this.state.currentUser.doctors.filter(\n          (doctor) => doctor.api_id !== data.api_id\n        );\n        this.setState({\n          ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors,\n          },\n        });\n      });\n  };\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id,\n    };\n\n    fetch('http://localhost:3000/favorites', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify(favoriteObject),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number,\n        };\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors],\n          },\n        });\n      });\n  };\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData);\n  };\n\n  logInOrSignUp = (formData) => {\n    fetch('http://localhost:3000/users', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              id: data.id,\n              email: data.email,\n              address: data.address,\n              password: data.password,\n              passwordConfirmation: data.password_confirmation,\n              firstName: data.first_name,\n              lastName: data.last_name,\n              doctors: data.doctors,\n              favorites: data.favorites,\n            },\n            isLoggedIn: true,\n          },\n          () => this.props.history.push('/search')\n        );\n      });\n  };\n\n  userProfile = () => {\n    let id = this.state.currentUser.id;\n    fetch(`http://localhost:3000/users/${id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              ...this.state.currentUser,\n              doctors: data.doctors,\n            },\n          },\n          () => {\n            this.props.history.push('/profile');\n          }\n        );\n      });\n  };\n\n  logOut = () => {\n    this.props.history.push('/');\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] });\n  };\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register });\n  };\n  // TODO retype this stuff\n  // TODO validations for max distance\n\n  createDoctors = async (incomingDoctors) => {\n    await incomingDoctors.map(async (doctor) => {\n      let detailedDoctor;\n\n      try {\n        let res = await axios.get(\n          `http://localhost:3000/geocodes/details/${doctor.place_id}`\n        );\n        detailedDoctor = res.data.result;\n      } catch (err) {}\n\n      // destructuring for values in schema\n      const {\n        formatted_address,\n        formatted_phone_number,\n        name,\n        place_id,\n        rating,\n        url,\n        website,\n        user_ratings_total,\n        reviews,\n        photos,\n        geometry: {\n          location: { lat, lng },\n        },\n      } = detailedDoctor;\n\n      // ES6 key value assignment operator\n\n      const doctorHash = {\n        place_id,\n        name,\n        formatted_address,\n        rating,\n        user_ratings_total,\n        formatted_phone_number,\n        lat,\n        lng,\n        url,\n        website,\n        photos,\n        reviews,\n      };\n\n      // create post headers\n      const myHeaders = new Headers();\n\n      myHeaders.append('Content-Type', 'Application/json');\n      myHeaders.append('accepts', 'application/json');\n\n      // TODO check into stringify\n      // TODO check into redirect: follow\n      // options hash for post request to api\n\n      let data;\n      let reviewData;\n      let photoData;\n\n      // CREATE DOCTOR\n\n      try {\n        let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n        data = res.data;\n\n        console.log(data, 'DATA IN CREATE DOCTOR');\n\n        reviews.forEach(async (singleReview) => {\n          const {\n            author_name,\n            author_url,\n            profile_photo_url,\n            rating,\n            relative_time_description,\n            text,\n            time,\n          } = singleReview;\n          const reviewHash = {\n            author_name,\n            author_url,\n            profile_photo_url,\n            rating,\n            relative_time_description,\n            text,\n            time,\n            place_id,\n            doctor_id: data.id,\n          };\n\n          let res = await axios.post(\n            'http://localhost:3000/reviews',\n            reviewHash\n          );\n\n          reviewData = res.data;\n          console.log('res.data from reviewPost', res.data);\n\n          //\n        });\n\n        const photoPayload = {\n          incomingPhotos: photos,\n          doctorId: data.id,\n          placeId: place_id,\n        };\n\n        try {\n          photoData = await this.createPhotos(photoPayload);\n          console.log(photoData);\n        } catch (err) {\n          console.log(err);\n        }\n\n        try {\n          let array = [];\n\n          let res = await axios.get(`http://localhost:3000/doctors`);\n          let doctors = res.data;\n          // debugger\n\n          doctors = doctors.filter((doc) => {\n            this.state.searchedPlaceIds.includes(doc.place_id);\n          });\n\n          // console.log(doctors)\n          this.setState({ doctors }, () =>\n            console.log(this.state, 'this.state after setState')\n          );\n        } catch (err) {\n          console.log(err);\n        }\n\n        // await this.fetchDoctors(doctorIds)\n\n        // TODO actually need to be setting state with reviews and photos properly added in\n        // this.setState({\n        //   doctors: [...this.state.doctors, data],\n        // });\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  };\n\n  fetchDoctors = async () => {\n    let allDocs;\n    allDocs = await axios.get(`http://localhost:3000/doctors`);\n    allDocs = allDocs.data;\n\n    this.setState({ allDocs });\n  };\n\n  createPhotos = async ({ doctorId, placeId }) => {\n    let data = [];\n    const myHeaders = new Headers();\n\n    const photoHash = {\n      doctor_id: doctorId,\n      doctor_reference: placeId,\n    };\n\n    try {\n      let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n      // debugger\n      data = res.data;\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n    return data;\n  };\n\n  googleSearch = async (payload) => {\n    const { address, query, distance, lat, lng } = payload;\n    let data;\n    try {\n      let res = await axios.get(\n        `http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`\n      );\n\n      data = res.data.results;\n\n      const promise = await this.createDoctors(data);\n      console.log('promise from googleSearch', promise);\n      const searchedPlaceIds = data.map((place) => place.place_id);\n      this.setState({ searchedPlaceIds });\n    } catch (err) {\n      console.log('This is your error:', err);\n    }\n  };\n\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true });\n  };\n\n  patchUser = (userData) => {\n    fetch(`http://localhost:3000/users/${this.state.currentUser.id}`, {\n      method: 'PATCH',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        password_confirmation: userData.passwordConfirmation,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        address: userData.address,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n          },\n        })\n      );\n  };\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    this.fetchDoctors();\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search');\n    } else {\n      alert('Please log in before searching');\n    }\n  };\n\n  render() {\n    console.log('this.state from App.js: ', this.state);\n    return (\n      <div>\n        <Button color='red' onClick={() => this.searchButton()}>\n          Search\n        </Button>\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={() => this.userProfile()}>\n            Profile\n          </Button>\n        )}\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={this.logOut}>\n            Logout\n          </Button>\n        )}\n        <Image alt='' src=''></Image>\n        {!this.state.isLoggedIn && (\n          <Login\n            isLoggedIn={this.state.isLoggedIn}\n            onSignUp={this.onSignUp}\n            onSubmit={this.onSubmit}\n            register={this.state.register}\n          />\n        )}\n        <Switch>\n          <Route\n            exact\n            path='/doctors'\n            render={(routerProps) => (\n              <Doctors\n                {...routerProps}\n                doctors={this.state.doctors}\n                searchedPlaceIds={this.state.searchedPlaceIds}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/search'\n            render={(routerProps) => (\n              <Search\n                error={this.state.error}\n                isLoading={this.state.isLoading}\n                currentUser={this.state.currentUser}\n                loadingHandler={this.loadingHandler}\n                {...routerProps}\n                googleSearch={this.googleSearch}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/doctors/:id'\n            render={(routerProps) => (\n              <DoctorShow\n                rate={this.rate}\n                doctors={this.state.doctors}\n                favorite={this.state.favorite}\n                isFavorite={this.isFavorite}\n                heart={this.heart}\n                currentUser={this.state.currentUser}\n                {...routerProps}\n                // eslint-disable-next-line\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/profile'\n            render={(routerProps) => (\n              <Profile\n                patchUser={this.patchUser}\n                currentUser={this.state.currentUser}\n                doctors={this.state.doctors}\n                isLoggedIn={this.state.isLoggedIn}\n                {...routerProps}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}