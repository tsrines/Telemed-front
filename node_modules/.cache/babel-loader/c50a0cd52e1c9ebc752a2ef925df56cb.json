{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { useState } from 'react';\n\nconst SearchIndex = ({\n  match,\n  loadUser,\n  currentUser,\n  loadingHandler,\n  loading,\n  setSearchIndex,\n  searchIndex\n}) => {\n  const loadSearchIndex = async () => {\n    let csv = '';\n\n    try {\n      let res = await Axios.get(`http://localhost:3000/searches/${searchId}`);\n      csv = res.data.csv;\n    } catch (err) {}\n\n    csv = csv.split(',');\n    csv.pop();\n    console.log(csv, 'CSV FROM LOADSEARCHINDEX');\n    await csv.forEach(async id => {\n      console.log(id);\n      let doctorId = parseInt(id);\n      let res = await Axios.get(`http://localhost:3000/doctors/${doctorId}`);\n      let doc = res.data;\n      console.log(doc);\n      index.push(doc);\n    });\n    console.log(index);\n    await setSearchIndex(index);\n  };\n\n  const displayDoctors = () => {\n    console.log(searchIndex);\n    return searchIndex.map(doc => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, doc.name));\n  };\n\n  useEffect(() => {\n    loadSearchIndex();\n    return () => {\n      cleanup;\n    };\n  }, []);\n  const {\n    params: {\n      userId,\n      searchId\n    }\n  } = match;\n  console.log(userId, searchId);\n  const index = []; // if(userId !== currentUser.id){\n  //   return <Redirect to={'/search'} />\n  // }\n\n  return (// <h4>{JSON.stringify(searchIndex, null, 2)}</h4>\n    React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, searchIndex && currentUser && displayDoctors())\n  );\n}; // SearchIndex.propTypes = {};\n\n\nexport default SearchIndex;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js"],"names":["React","useEffect","PropTypes","Card","Grid","DoctorCard","Axios","Redirect","useState","SearchIndex","match","loadUser","currentUser","loadingHandler","loading","setSearchIndex","searchIndex","loadSearchIndex","csv","res","get","searchId","data","err","split","pop","console","log","forEach","id","doctorId","parseInt","doc","index","push","displayDoctors","map","name","cleanup","params","userId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,KADmB;AAEnBC,EAAAA,QAFmB;AAGnBC,EAAAA,WAHmB;AAInBC,EAAAA,cAJmB;AAKnBC,EAAAA,OALmB;AAMnBC,EAAAA,cANmB;AAOnBC,EAAAA;AAPmB,CAAD,KAQd;AACJ,QAAMC,eAAe,GAAG,YAAY;AAClC,QAAIC,GAAG,GAAG,EAAV;;AACA,QAAI;AACF,UAAIC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAW,kCAAiCC,QAAS,EAArD,CAAhB;AACAH,MAAAA,GAAG,GAAGC,GAAG,CAACG,IAAJ,CAASJ,GAAf;AACD,KAHD,CAGE,OAAOK,GAAP,EAAY,CAAE;;AAChBL,IAAAA,GAAG,GAAGA,GAAG,CAACM,KAAJ,CAAU,GAAV,CAAN;AACAN,IAAAA,GAAG,CAACO,GAAJ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ,EAAiB,0BAAjB;AACA,UAAMA,GAAG,CAACU,OAAJ,CAAY,MAAOC,EAAP,IAAc;AAC9BH,MAAAA,OAAO,CAACC,GAAR,CAAYE,EAAZ;AACA,UAAIC,QAAQ,GAAGC,QAAQ,CAACF,EAAD,CAAvB;AACA,UAAIV,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAW,iCAAgCU,QAAS,EAApD,CAAhB;AACA,UAAIE,GAAG,GAAGb,GAAG,CAACG,IAAd;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACAC,MAAAA,KAAK,CAACC,IAAN,CAAWF,GAAX;AACD,KAPK,CAAN;AAQAN,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACA,UAAMlB,cAAc,CAACkB,KAAD,CAApB;AACD,GAnBD;;AAoBA,QAAME,cAAc,GAAG,MAAM;AAC3BT,IAAAA,OAAO,CAACC,GAAR,CAAYX,WAAZ;AACA,WAAOA,WAAW,CAACoB,GAAZ,CAAiBJ,GAAD,IAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,GAAG,CAACK,IAAV,CAAzB,CAAP;AACD,GAHD;;AAKApC,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,eAAe;AACf,WAAO,MAAM;AACXqB,MAAAA,OAAO;AACR,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,QAAM;AACJC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAF;AAAUnB,MAAAA;AAAV;AADJ,MAEFX,KAFJ;AAIAgB,EAAAA,OAAO,CAACC,GAAR,CAAYa,MAAZ,EAAoBnB,QAApB;AAEA,QAAMY,KAAK,GAAG,EAAd,CAvCI,CA0CJ;AACA;AACA;;AACA,SACE;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGjB,WAAW,IAAIJ,WAAf,IAA8BuB,cAAc,EAD/C;AAHF;AA8BD,CAnFD,C,CAqFA;;;AAEA,eAAe1B,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\nimport { Redirect } from 'react-router';\nimport { useState } from 'react';\n\nconst SearchIndex = ({\n  match,\n  loadUser,\n  currentUser,\n  loadingHandler,\n  loading,\n  setSearchIndex,\n  searchIndex,\n}) => {\n  const loadSearchIndex = async () => {\n    let csv = '';\n    try {\n      let res = await Axios.get(`http://localhost:3000/searches/${searchId}`);\n      csv = res.data.csv;\n    } catch (err) {}\n    csv = csv.split(',');\n    csv.pop();\n    console.log(csv, 'CSV FROM LOADSEARCHINDEX');\n    await csv.forEach(async (id) => {\n      console.log(id);\n      let doctorId = parseInt(id);\n      let res = await Axios.get(`http://localhost:3000/doctors/${doctorId}`);\n      let doc = res.data;\n      console.log(doc);\n      index.push(doc);\n    });\n    console.log(index);\n    await setSearchIndex(index);\n  };\n  const displayDoctors = () => {\n    console.log(searchIndex);\n    return searchIndex.map((doc) => <div>{doc.name}</div>);\n  };\n\n  useEffect(() => {\n    loadSearchIndex()\n    return () => {\n      cleanup\n    }\n  }, [])\n\n  const {\n    params: { userId, searchId },\n  } = match;\n\n  console.log(userId, searchId);\n\n  const index = [];\n\n\n  // if(userId !== currentUser.id){\n  //   return <Redirect to={'/search'} />\n  // }\n  return (\n    // <h4>{JSON.stringify(searchIndex, null, 2)}</h4>\n\n    <div>\n      {searchIndex && currentUser && displayDoctors()}\n      {/* <Grid\n        container\n        textAlign='center'\n        style={{ height: '100vh' }}\n        verticalAlign='middle'\n      >\n        <br></br>\n        <Card.Group\n          style={{ maxHeight: '35em' }}\n          display='flex'\n          justify-content='center'\n          itemsPerRow={3}\n        >\n          {searchIndex.map((doctor) => (\n            <DoctorCard\n              currentUser={this.props.currentUser}\n              getDoctorById={this.props.getDoctorById}\n              key={doctor.id}\n              doctor={doctor}\n            />\n          ))}\n        </Card.Group>\n      </Grid> */}\n    </div>\n  );\n};\n\n// SearchIndex.propTypes = {};\n\nexport default SearchIndex;\n"]},"metadata":{},"sourceType":"module"}