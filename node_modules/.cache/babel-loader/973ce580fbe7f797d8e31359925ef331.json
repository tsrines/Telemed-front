{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport axios from 'axios';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport { createDoctors, fetchApiDoctors } from './helpers/helpers';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: '',\n        email: '',\n        address: '',\n        password: '',\n        passwordConfirmation: '',\n        firstName: '',\n        lastName: '',\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      allDocs: [],\n      searchedPlaceIds: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter( // eslint-disable-next-line\n      doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find( // eslint-disable-next-line\n      favorite => favorite.api_id == doctor.api_id); // eslint-disable-next-line\n\n      if (typeof favorite == 'object') {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      //\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      // eslint-disable-next-line\n      fetch(`http://localhost:3000/favorites/${favorite.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch('http://localhost:3000/favorites', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      fetch('http://localhost:3000/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`http://localhost:3000/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.fetchDoctors = async () => {\n      let allDocs;\n      allDocs = await axios.get(`http://localhost:3000/doctors`);\n      allDocs = allDocs.data;\n      this.setState({\n        allDocs\n      });\n    };\n\n    this.googleSearch = async payload => {\n      try {\n        const apiDoctors = await fetchApiDoctors(payload);\n        const doctors = await createDoctors(apiDoctors);\n        console.log(doctors, 'DOCTORS FROM GOOGLE SEARCH (GOING INTO SET STATE)');\n        console.log(apiDoctors, 'APIDOCTORS FROM GOOGLE SEARCH');\n        debugger;\n        this.setState({\n          doctors\n        }, () => this.props.history.push('/doctors'));\n      } catch (error) {\n        console.log(error, \"ERROR FROM GOOGLESEARCH\");\n      }\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch(`http://localhost:3000/users/${this.state.currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    this.fetchDoctors();\n  }\n\n  render() {\n    console.log('this.state from App.js: ', this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({}, routerProps, {\n        allDocs: this.state.allDocs,\n        doctors: this.state.doctors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        googleSearch: this.googleSearch,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        // eslint-disable-next-line\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Switch","withRouter","Button","Image","axios","DoctorShow","Doctors","Login","Profile","Search","createDoctors","fetchApiDoctors","App","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","allDocs","searchedPlaceIds","error","apiDoctors","users","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","heart","find","unHeart","fetch","method","then","resp","json","data","favoriteObject","user_id","doctor_id","headers","accepts","body","JSON","stringify","newdoc","first_name","last_name","title","gender","bio","phone_number","onSubmit","formData","logInOrSignUp","password_confirmation","history","push","userProfile","logOut","onSignUp","fetchDoctors","get","googleSearch","payload","console","log","isResolved","loadingHandler","patchUser","userData","searchButton","alert","componentDidMount","render","routerProps","rate"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport axios from 'axios';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport { createDoctors, fetchApiDoctors } from './helpers/helpers';\n\nclass App extends React.Component {\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: '',\n      email: '',\n      address: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      doctors: [],\n      favorites: [],\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    allDocs: [],\n    searchedPlaceIds: [],\n    error: false,\n    apiDoctors: [],\n    users: [],\n  };\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(\n      // eslint-disable-next-line\n      (doctor) => doctor.api_id == this.props.match.params.id\n    );\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1,\n      });\n    }\n  };\n\n  heart = (doctor) => {\n    let favorite = this.state.currentUser.favorites.find(\n      // eslint-disable-next-line\n      (favorite) => favorite.api_id == doctor.api_id\n    );\n\n    // eslint-disable-next-line\n    if (typeof favorite == 'object') {\n      this.unHeart(favorite);\n    } else {\n      this.favorite(doctor);\n    }\n  };\n\n  unHeart = (favorite) => {\n    //\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    // eslint-disable-next-line\n    fetch(`http://localhost:3000/favorites/${favorite.id}`, {\n      method: 'DELETE',\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = this.state.currentUser.favorites.filter(\n          (favorite) => favorite.id !== data.id\n        );\n        let doctors = this.state.currentUser.doctors.filter(\n          (doctor) => doctor.api_id !== data.api_id\n        );\n        this.setState({\n          ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors,\n          },\n        });\n      });\n  };\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id,\n    };\n\n    fetch('http://localhost:3000/favorites', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify(favoriteObject),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number,\n        };\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors],\n          },\n        });\n      });\n  };\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData);\n  };\n\n  logInOrSignUp = (formData) => {\n    fetch('http://localhost:3000/users', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              id: data.id,\n              email: data.email,\n              address: data.address,\n              password: data.password,\n              passwordConfirmation: data.password_confirmation,\n              firstName: data.first_name,\n              lastName: data.last_name,\n              doctors: data.doctors,\n              favorites: data.favorites,\n            },\n            isLoggedIn: true,\n          },\n          () => this.props.history.push('/search')\n        );\n      });\n  };\n\n  userProfile = () => {\n    let id = this.state.currentUser.id;\n    fetch(`http://localhost:3000/users/${id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              ...this.state.currentUser,\n              doctors: data.doctors,\n            },\n          },\n          () => {\n            this.props.history.push('/profile');\n          }\n        );\n      });\n  };\n\n  logOut = () => {\n    this.props.history.push('/');\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] });\n  };\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register });\n  };\n  // TODO retype this stuff\n  // TODO validations for max distance\n\n  fetchDoctors = async () => {\n    let allDocs;\n    allDocs = await axios.get(`http://localhost:3000/doctors`);\n    allDocs = allDocs.data;\n\n    this.setState({ allDocs });\n  };\n\n  googleSearch = async (payload) => {\n    try {\n      const apiDoctors = await fetchApiDoctors(payload);\n      const doctors = await createDoctors(apiDoctors);\n      console.log(doctors, 'DOCTORS FROM GOOGLE SEARCH (GOING INTO SET STATE)');\n      console.log(apiDoctors, 'APIDOCTORS FROM GOOGLE SEARCH');\n      debugger\n      this.setState({ doctors }, ()=> this.props.history.push('/doctors'));\n      \n    } catch (error) {\n      console.log(error, \"ERROR FROM GOOGLESEARCH\")\n    }\n  };\n\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true });\n  };\n\n  patchUser = (userData) => {\n    fetch(`http://localhost:3000/users/${this.state.currentUser.id}`, {\n      method: 'PATCH',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        password_confirmation: userData.passwordConfirmation,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        address: userData.address,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n          },\n        })\n      );\n  };\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    this.fetchDoctors();\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search');\n    } else {\n      alert('Please log in before searching');\n    }\n  };\n\n  render() {\n    console.log('this.state from App.js: ', this.state);\n    return (\n      <div>\n        <Button color='red' onClick={() => this.searchButton()}>\n          Search\n        </Button>\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={() => this.userProfile()}>\n            Profile\n          </Button>\n        )}\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={this.logOut}>\n            Logout\n          </Button>\n        )}\n        <Image alt='' src=''></Image>\n        {!this.state.isLoggedIn && (\n          <Login\n            isLoggedIn={this.state.isLoggedIn}\n            onSignUp={this.onSignUp}\n            onSubmit={this.onSubmit}\n            register={this.state.register}\n          />\n        )}\n        <Switch>\n          <Route\n            exact\n            path='/doctors'\n            render={(routerProps) => (\n              <Doctors\n                {...routerProps}\n                allDocs={this.state.allDocs}\n                doctors={this.state.doctors}\n\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/search'\n            render={(routerProps) => (\n              <Search\n                error={this.state.error}\n                isLoading={this.state.isLoading}\n                currentUser={this.state.currentUser}\n                loadingHandler={this.loadingHandler}\n                {...routerProps}\n                googleSearch={this.googleSearch}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/doctors/:id'\n            render={(routerProps) => (\n              <DoctorShow\n                rate={this.rate}\n                doctors={this.state.doctors}\n                favorite={this.state.favorite}\n                isFavorite={this.isFavorite}\n                heart={this.heart}\n                currentUser={this.state.currentUser}\n                {...routerProps}\n                // eslint-disable-next-line\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/profile'\n            render={(routerProps) => (\n              <Profile\n                patchUser={this.patchUser}\n                currentUser={this.state.currentUser}\n                doctors={this.state.doctors}\n                isLoggedIn={this.state.isLoggedIn}\n                {...routerProps}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}