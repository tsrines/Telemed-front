{"ast":null,"code":"import React from 'react';\nexport const createDoctors = async incomingDoctors => {\n  await incomingDoctors.map(async doctor => {\n    let detailedDoctor;\n\n    try {\n      let res = await axios.get(`http://localhost:3000/geocodes/details/${doctor.place_id}`);\n      detailedDoctor = res.data.result;\n    } catch (err) {\n      console.log(err, 'FROM CREATEDOCTORS HELPER');\n      throw err;\n    } // destructuring for values in schema\n\n\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: {\n          lat,\n          lng\n        }\n      }\n    } = detailedDoctor; // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews\n    };\n    let data;\n    let photoData; // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n      console.log(data, 'DATA IN CREATE DOCTOR');\n      let reviewData;\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n        console.log(photoData);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  });\n};\nexport const createReviews = () => {\n  reviews.forEach(async singleReview => {\n    const {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time\n    } = singleReview;\n    const reviewHash = {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n      place_id,\n      doctor_id: data.id\n    };\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n    reviewData = res.data;\n    console.log('reviewData from reviewPost', reviewData); //\n  });\n};\nexport const createPhotos = async ({\n  doctorId,\n  placeId\n}) => {\n  let data = [];\n  const myHeaders = new Headers();\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/helpers/helpers.js"],"names":["React","createDoctors","incomingDoctors","map","doctor","detailedDoctor","res","axios","get","place_id","data","result","err","console","log","formatted_address","formatted_phone_number","name","rating","url","website","user_ratings_total","reviews","photos","geometry","location","lat","lng","doctorHash","photoData","post","reviewData","photoPayload","incomingPhotos","doctorId","id","placeId","createPhotos","createReviews","forEach","singleReview","author_name","author_url","profile_photo_url","relative_time_description","text","time","reviewHash","doctor_id","myHeaders","Headers","photoHash","doctor_reference"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport const createDoctors = async (incomingDoctors) => {\n  await incomingDoctors.map(async (doctor) => {\n    let detailedDoctor;\n\n    try {\n      let res = await axios.get(\n        `http://localhost:3000/geocodes/details/${doctor.place_id}`\n      );\n      detailedDoctor = res.data.result;\n    } catch (err) {\n      console.log(err, 'FROM CREATEDOCTORS HELPER');\n      throw err;\n    }\n\n    // destructuring for values in schema\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: { lat, lng },\n      },\n    } = detailedDoctor;\n\n    // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews,\n    };\n\n\n    let data;\n    let photoData;\n\n    // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n\n      console.log(data, 'DATA IN CREATE DOCTOR');\n      let reviewData;\n\n\n\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id,\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n        console.log(photoData);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  });\n};\n\nexport const createReviews = () => {\n  reviews.forEach(async (singleReview) => {\n    const {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n    } = singleReview;\n    const reviewHash = {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n      place_id,\n      doctor_id: data.id,\n    };\n\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n\n    reviewData = res.data;\n    console.log('reviewData from reviewPost', reviewData);\n\n    //\n  });\n};\n\nexport const createPhotos = async ({ doctorId, placeId }) => {\n  let data = [];\n  const myHeaders = new Headers();\n\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId,\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}