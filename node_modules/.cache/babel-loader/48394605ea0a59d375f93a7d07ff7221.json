{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: \"\",\n        email: \"\",\n        address: \"\",\n        password: \"\",\n        passwordConfirmation: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.apiDown = () => {};\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.rate = (e, data) => {};\n\n    this.createDoctor = doctor => {\n      let doctorObj = {\n        api_id: doctor.id,\n        first_name: doctor.firstName,\n        last_name: doctor.lastName,\n        address: doctor.address,\n        image: doctor.image,\n        specialty: doctor.specialty,\n        title: doctor.title,\n        gender: doctor.gender,\n        bio: doctor.bio,\n        phone_number: doctor.phone\n      };\n      fetch(\"https://cryptic-island-45793.herokuapp.com/doctors\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accepts\": \"application/json\"\n        },\n        body: JSON.stringify(doctorObj)\n      }).then(resp => resp.json()).then(data => {\n        let doctors = [...this.state.doctors];\n        this.setState({ ...this.state,\n          doctors: [data, ...doctors]\n        }, () => {\n          this.props.history.push('/doctors');\n        });\n      }, this.setState({\n        isLoading: false\n      }));\n    };\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id);\n\n      if (typeof favorite == \"object\") {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      // debugger\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      fetch(`https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`, {\n        method: \"DELETE\"\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch(\"https://cryptic-island-45793.herokuapp.com/favorites\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accepts\": \"application/json\"\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      fetch(\"https://cryptic-island-45793.herokuapp.com/users\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accepts\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.toGeoCode = formData => {\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${formData.address}&key=AIzaSyAkZI07elJzbOUJR5DCnSDGTZuDGmcptBM`).then(resp => resp.json()).then(data => this.setState({\n        lat: data[\"results\"][0].geometry.location.lat,\n        lng: data[\"results\"][0].geometry.location.lng\n      }, () => this.getDoctors(formData))).catch(err => console.dir(err));\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.getDoctors = formData => {\n      fetch(`https://api.betterdoctor.com/2015-01-27/doctors?query=${formData.ailment}&location=${this.state.lat}%2C${this.state.lng}%2C${formData.miles}&skip=0&limit=100&user_key=456c38f1b8349922db25eb4a4fd44429`).then(resp => resp.json()).then(data => {\n        console.log(\"data from betterdoc\", data);\n        this.setState({\n          apiDoctors: data.data,\n          isLoading: false\n        }, () => this.isResolved());\n        this.parseDoctors(data.data);\n      }).catch(err => {\n        if (err) this.setState();\n      });\n    };\n\n    this.parseDoctors = doctorsArray => {\n      let doctors = [];\n      doctorsArray.map(element => {\n        try {\n          let doctorHash = {};\n          doctorHash.id = element.uid; // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n\n          doctorHash.firstName = element.profile.first_name;\n          doctorHash.lastName = element.profile.last_name;\n\n          if (element.profile.gender === 'male') {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/matthew.png';\n          } else if (element.profile.gender === 'female') {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/kristy.png';\n          } else {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/elyse.png';\n          }\n\n          doctorHash.title = element.profile.title;\n          doctorHash.bio = element.profile.bio;\n          doctorHash.address = element.practices[0].address;\n          doctorHash.gender = element.profile.gender;\n          doctorHash.phone = element.practices[0].phones[0].number;\n          doctorHash.specialty = element.specialties[0].name;\n          doctors.push(doctorHash);\n          this.createDoctor(doctorHash);\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users/${this.state.currentUser.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          \"accepts\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users`).then(resp => resp.json()).then(users => {\n      this.setState({\n        users\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({\n        createDoctor: this.createDoctor\n      }, routerProps, {\n        doctors: this.state.doctors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        toGeoCode: this.toGeoCode,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Switch","withRouter","Button","Image","DoctorShow","Doctors","Login","Profile","Search","App","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","error","apiDoctors","users","apiDown","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","rate","e","data","createDoctor","doctorObj","first_name","last_name","image","specialty","title","gender","bio","phone_number","phone","fetch","method","headers","body","JSON","stringify","then","resp","json","history","push","heart","find","unHeart","favoriteObject","user_id","doctor_id","newdoc","onSubmit","formData","logInOrSignUp","password_confirmation","userProfile","logOut","onSignUp","toGeoCode","geometry","location","getDoctors","catch","err","console","dir","isResolved","ailment","miles","log","parseDoctors","doctorsArray","map","element","doctorHash","uid","profile","practices","phones","number","specialties","name","loadingHandler","patchUser","userData","searchButton","alert","componentDidMount","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Route,\n  Switch,\n  withRouter,\n} from 'react-router-dom'\nimport { Button, Image } from 'semantic-ui-react'\nimport DoctorShow from './components/DoctorShow'\nimport Doctors from './containers/Doctors'\nimport Login from './components/Login'\nimport Profile from './components/Profile'\nimport Search from './components/Search'\nimport './App.css';\n\n\n\nclass App extends React.Component {\n\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: \"\",\n      email: \"\",\n      address: \"\",\n      password: \"\",\n      passwordConfirmation: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      doctors: [],\n      favorites: []\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    error: false,\n    apiDoctors: [],\n    users: []\n  }\n  apiDown = () => {\n\n  }\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id)\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1\n      })\n    }\n\n  }\n\n  rate = (e, data) => {\n\n  }\n\n  createDoctor = (doctor) => {\n\n    let doctorObj = {\n      api_id: doctor.id,\n      first_name: doctor.firstName,\n      last_name: doctor.lastName,\n      address: doctor.address,\n      image: doctor.image,\n      specialty: doctor.specialty,\n      title: doctor.title,\n      gender: doctor.gender,\n      bio: doctor.bio,\n      phone_number: doctor.phone\n    }\n\n    fetch(\"https://cryptic-island-45793.herokuapp.com/doctors\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"Accepts\": \"application/json\"\n      },\n      body: JSON.stringify(doctorObj)\n    }).then(resp => resp.json())\n      .then(data => {\n\n        let doctors = [...this.state.doctors]\n        this.setState({\n          ...this.state,\n          doctors: [data, ...doctors]\n        }, () => { this.props.history.push('/doctors') })\n      }, this.setState({ isLoading: false }))\n  }\n\n  heart = (doctor) => {\n\n\n    let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id)\n\n\n    if (typeof favorite == \"object\") {\n\n      this.unHeart(favorite)\n    } else {\n\n      this.favorite(doctor)\n    }\n  }\n\n  unHeart = (favorite) => {\n    // debugger\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    fetch(`https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`, {\n      method: \"DELETE\",\n    }).then(resp => resp.json()).then(data => {\n      let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id)\n      let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id)\n      this.setState({\n        ...this.state,\n        favorite: 0,\n        doctors: [data.doctor, ...this.state.doctors],\n        currentUser: {\n          ...this.state.currentUser,\n          favorites: favorites,\n          doctors: doctors\n        }\n      })\n    })\n  }\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id\n    }\n\n    fetch(\"https://cryptic-island-45793.herokuapp.com/favorites\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify(favoriteObject)\n    }).then(resp => resp.json())\n      .then(data => {\n        let favorites = [...this.state.currentUser.favorites]\n        let doctors = [...this.state.currentUser.doctors]\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n\n          }\n        })\n\n      })\n\n  }\n\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData)\n  }\n\n  logInOrSignUp = (formData) => {\n    fetch(\"https://cryptic-island-45793.herokuapp.com/users\", {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation\n\n      })\n    }).then(resp => resp.json())\n      .then(data => {\n\n        this.setState({\n          ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'))\n      }\n\n      )\n\n  }\n\n  userProfile = () => {\n\n\n    let id = this.state.currentUser.id\n    fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`)\n      .then(resp => resp.json())\n      .then(data => {\n        this.setState({\n          ...this.state,\n          currentUser: {\n            ...this.state.currentUser,\n            doctors: data.doctors\n          }\n\n        }, () => {\n\n          this.props.history.push('/profile')\n        })\n      })\n  }\n\n  logOut = () => {\n    this.props.history.push('/')\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] })\n  }\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register })\n  }\n  // request to Google GeoCode API to turn string into Longitude/Latitude\n  toGeoCode = (formData) => {\n\n\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${formData.address}&key=AIzaSyAkZI07elJzbOUJR5DCnSDGTZuDGmcptBM`)\n      .then(resp => resp.json())\n      .then(data => this.setState({\n        lat: data[\"results\"][0].geometry.location.lat,\n        lng: data[\"results\"][0].geometry.location.lng\n      }, () => this.getDoctors(formData))).catch(err => console.dir(err))\n\n  }\n\n  // request to BetterDoc API with Long/Lat\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true })\n    } else {\n      this.setState({ error: false })\n    }\n  }\n\n  getDoctors = (formData) => {\n\n    fetch(`https://api.betterdoctor.com/2015-01-27/doctors?query=${formData.ailment}&location=${this.state.lat}%2C${this.state.lng}%2C${formData.miles}&skip=0&limit=100&user_key=456c38f1b8349922db25eb4a4fd44429`)\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(\"data from betterdoc\",data)\n\n        this.setState({\n          apiDoctors: data.data,\n          isLoading: false\n        }, () => this.isResolved())\n        this.parseDoctors(data.data)\n      }).catch((err) => {\n        if(err) this.setState()\n      })\n  }\n\n  // imageApi = (firstName, lastName, title) => {\n\n  //   fetch(`https://serpapi.com/search?q=${firstName}%20${lastName},%20${title}&tbm=isch&ijn=0&api_key=${REACT_APP_SERP_API_KEY}`)\n  //     .then(resp => { resp.json() })\n  //     .then(data => {\n\n  //       return data.images_results[0].original\n  //     })\n  //     .catch(err => {\n\n  //       console.error(err)\n  //     })\n  // }\n\n  parseDoctors = (doctorsArray) => {\n\n    let doctors = []\n    doctorsArray.map(element => {\n\n\n      try {\n        let doctorHash = {}\n        doctorHash.id = element.uid\n        // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n        doctorHash.firstName = element.profile.first_name\n        doctorHash.lastName = element.profile.last_name\n        if (element.profile.gender === 'male') {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/matthew.png'\n        } else if (element.profile.gender === 'female') {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/kristy.png'\n        } else {\n          doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/elyse.png'\n        }\n        doctorHash.title = element.profile.title\n        doctorHash.bio = element.profile.bio\n        doctorHash.address = element.practices[0].address\n        doctorHash.gender = element.profile.gender\n        doctorHash.phone = element.practices[0].phones[0].number\n\n        doctorHash.specialty = element.specialties[0].name\n        doctors.push(doctorHash)\n        this.createDoctor(doctorHash)\n      }\n      catch (err) {\n        console.log(err)\n      }\n    })\n  }\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true })\n  }\n\n\n  patchUser = (userData) => {\n\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users/${this.state.currentUser.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        \"accepts\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        password_confirmation: userData.passwordConfirmation,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        address: userData.address,\n\n      })\n    }).then(resp => resp.json())\n      .then(data =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name\n          }\n        }))\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(\"https://cryptic-island-45793.herokuapp.com\" + `/users`)\n      .then(resp => resp.json())\n      .then(users => {\n        this.setState({\n          users\n        })\n      })\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search')\n    } else {\n      alert('Please log in before searching')\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Button color=\"red\" onClick={() => this.searchButton()} >Search</Button>\n        {this.state.isLoggedIn && <Button color=\"red\" onClick={() => this.userProfile()}>Profile</Button>}\n        {this.state.isLoggedIn && <Button color=\"red\" onClick={this.logOut}>Logout</Button>}\n        <Image alt=\"\" src=\"\"></Image>\n        {!this.state.isLoggedIn && <Login isLoggedIn={this.state.isLoggedIn} onSignUp={this.onSignUp} onSubmit={this.onSubmit} register={this.state.register} />}\n        <Switch>\n          <Route exact path='/doctors' render={routerProps => <Doctors createDoctor={this.createDoctor}  {...routerProps} doctors={this.state.doctors} />} />\n          <Route exact path='/search' render={routerProps => <Search error={this.state.error} isLoading={this.state.isLoading} currentUser={this.state.currentUser} loadingHandler={this.loadingHandler} {...routerProps} toGeoCode={this.toGeoCode} favorite={this.favorite} />} />\n          <Route exact path='/doctors/:id' render={routerProps => <DoctorShow rate={this.rate} doctors={this.state.doctors} favorite={this.state.favorite} isFavorite={this.isFavorite} heart={this.heart} currentUser={this.state.currentUser} {...routerProps} favorite={this.favorite} />} />\n          <Route exact path='/profile' render={routerProps => <Profile patchUser={this.patchUser} currentUser={this.state.currentUser} doctors={this.state.doctors} isLoggedIn={this.state.isLoggedIn} {...routerProps} />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App)"]},"metadata":{},"sourceType":"module"}