{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/layout/Landing.js\";\n// import PropTypes from 'prop-types'\n// import {\n//   Button,\n//   Container,\n//   Divider,\n//   Grid,\n//   Header,\n//   Icon,\n//   Image,\n//   List,\n//   Menu,\n//   Responsive,\n//   Segment,\n//   Sidebar,\n//   Visibility,\n// } from 'semantic-ui-react'\nimport React from 'react';\n\nconst Landing = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Landed\");\n};\n\nexport default Landing; // // Heads up!\n// // We using React Static to prerender our docs with server side rendering, this is a quite simple solution.\n// // For more advanced usage please check Responsive docs under the \"Usage\" section.\n// const getWidth = () => {\n//   const isSSR = typeof window === 'undefined'\n//   return isSSR ? Responsive.onlyTablet.minWidth : window.innerWidth\n// }\n// /* eslint-disable react/no-multi-comp */\n// /* Heads up! HomepageHeading uses inline styling, however it's not the best practice. Use CSS or styled components for\n//  * such things.\n//  */\n// const HomepageHeading = ({ mobile }) => (\n//   <Container text>\n//     <Header\n//       as='h1'\n//       content='Imagine-a-Company'\n//       inverted\n//       style={{\n//         fontSize: mobile ? '2em' : '4em',\n//         fontWeight: 'normal',\n//         marginBottom: 0,\n//         marginTop: mobile ? '1.5em' : '3em',\n//       }}\n//     />\n//     <Header\n//       as='h2'\n//       content='Do whatever you want when you want to.'\n//       inverted\n//       style={{\n//         fontSize: mobile ? '1.5em' : '1.7em',\n//         fontWeight: 'normal',\n//         marginTop: mobile ? '0.5em' : '1.5em',\n//       }}\n//     />\n//     <Button primary size='huge'>\n//       Get Started\n//       <Icon name='right arrow' />\n//     </Button>\n//   </Container>\n// )\n// HomepageHeading.propTypes = {\n//   mobile: PropTypes.bool,\n// }\n// /* Heads up!\n//  * Neither Semantic UI nor Semantic UI React offer a responsive navbar, however, it can be implemented easily.\n//  * It can be more complicated, but you can create really flexible markup.\n//  */\n// class DesktopContainer extends Component {\n//   state = {}\n//   hideFixedMenu = () => this.setState({ fixed: false })\n//   showFixedMenu = () => this.setState({ fixed: true })\n//   render() {\n//     const { children } = this.props\n//     const { fixed } = this.state\n//     return (\n//       <Responsive getWidth={getWidth} minWidth={Responsive.onlyTablet.minWidth}>\n//         <Visibility\n//           once={false}\n//           onBottomPassed={this.showFixedMenu}\n//           onBottomPassedReverse={this.hideFixedMenu}\n//         >\n//           <Segment\n//             inverted\n//             textAlign='center'\n//             style={{ minHeight: 700, padding: '1em 0em' }}\n//             vertical\n//           >\n//             <Menu\n//               fixed={fixed ? 'top' : null}\n//               inverted={!fixed}\n//               pointing={!fixed}\n//               secondary={!fixed}\n//               size='large'\n//             >\n//               <Container>\n//                 <Menu.Item as='a' active>\n//                   Home\n//                 </Menu.Item>\n//                 <Menu.Item as='a'>Work</Menu.Item>\n//                 <Menu.Item as='a'>Company</Menu.Item>\n//                 <Menu.Item as='a'>Careers</Menu.Item>\n//                 <Menu.Item position='right'>\n//                   <Button as='a' inverted={!fixed}>\n//                     Log in\n//                   </Button>\n//                   <Button as='a' inverted={!fixed} primary={fixed} style={{ marginLeft: '0.5em' }}>\n//                     Sign Up\n//                   </Button>\n//                 </Menu.Item>\n//               </Container>\n//             </Menu>\n//             <HomepageHeading />\n//           </Segment>\n//         </Visibility>\n//         {children}\n//       </Responsive>\n//     )\n//   }\n// }\n// DesktopContainer.propTypes = {\n//   children: PropTypes.node,\n// }\n// class MobileContainer extends Component {\n//   state = {}\n//   handleSidebarHide = () => this.setState({ sidebarOpened: false })\n//   handleToggle = () => this.setState({ sidebarOpened: true })\n//   render() {\n//     const { children } = this.props\n//     const { sidebarOpened } = this.state\n//     return (\n//       <Responsive\n//         as={Sidebar.Pushable}\n//         getWidth={getWidth}\n//         maxWidth={Responsive.onlyMobile.maxWidth}\n//       >\n//         <Sidebar\n//           as={Menu}\n//           animation='push'\n//           inverted\n//           onHide={this.handleSidebarHide}\n//           vertical\n//           visible={sidebarOpened}\n//         >\n//           <Menu.Item as='a' active>\n//             Home\n//           </Menu.Item>\n//           <Menu.Item as='a'>Work</Menu.Item>\n//           <Menu.Item as='a'>Company</Menu.Item>\n//           <Menu.Item as='a'>Careers</Menu.Item>\n//           <Menu.Item as='a'>Log in</Menu.Item>\n//           <Menu.Item as='a'>Sign Up</Menu.Item>\n//         </Sidebar>\n//         <Sidebar.Pusher dimmed={sidebarOpened}>\n//           <Segment\n//             inverted\n//             textAlign='center'\n//             style={{ minHeight: 350, padding: '1em 0em' }}\n//             vertical\n//           >\n//             <Container>\n//               <Menu inverted pointing secondary size='large'>\n//                 <Menu.Item onClick={this.handleToggle}>\n//                   <Icon name='sidebar' />\n//                 </Menu.Item>\n//                 <Menu.Item position='right'>\n//                   <Button as='a' inverted>\n//                     Log in\n//                   </Button>\n//                   <Button as='a' inverted style={{ marginLeft: '0.5em' }}>\n//                     Sign Up\n//                   </Button>\n//                 </Menu.Item>\n//               </Menu>\n//             </Container>\n//             <HomepageHeading mobile />\n//           </Segment>\n//           {children}\n//         </Sidebar.Pusher>\n//       </Responsive>\n//     )\n//   }\n// }\n// MobileContainer.propTypes = {\n//   children: PropTypes.node,\n// }\n// const ResponsiveContainer = ({ children }) => (\n//   <div>\n//     <DesktopContainer>{children}</DesktopContainer>\n//     <MobileContainer>{children}</MobileContainer>\n//   </div>\n// )\n// ResponsiveContainer.propTypes = {\n//   children: PropTypes.node,\n// }","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/layout/Landing.js"],"names":["React","Landing"],"mappings":";AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,CAND;;AAQA,eAAeA,OAAfsourcesContent":["// import PropTypes from 'prop-types'\n\n// import {\n//   Button,\n//   Container,\n//   Divider,\n//   Grid,\n//   Header,\n//   Icon,\n//   Image,\n//   List,\n//   Menu,\n//   Responsive,\n//   Segment,\n//   Sidebar,\n//   Visibility,\n// } from 'semantic-ui-react'\n\nimport React from 'react'\n\nconst Landing = () => {\n  return (\n    <div>\n      Landed\n    </div>\n  )\n}\n\nexport default Landing\n\n\n\n// // Heads up!\n// // We using React Static to prerender our docs with server side rendering, this is a quite simple solution.\n// // For more advanced usage please check Responsive docs under the \"Usage\" section.\n// const getWidth = () => {\n//   const isSSR = typeof window === 'undefined'\n\n//   return isSSR ? Responsive.onlyTablet.minWidth : window.innerWidth\n// }\n\n// /* eslint-disable react/no-multi-comp */\n// /* Heads up! HomepageHeading uses inline styling, however it's not the best practice. Use CSS or styled components for\n//  * such things.\n//  */\n// const HomepageHeading = ({ mobile }) => (\n//   <Container text>\n//     <Header\n//       as='h1'\n//       content='Imagine-a-Company'\n//       inverted\n//       style={{\n//         fontSize: mobile ? '2em' : '4em',\n//         fontWeight: 'normal',\n//         marginBottom: 0,\n//         marginTop: mobile ? '1.5em' : '3em',\n//       }}\n//     />\n//     <Header\n//       as='h2'\n//       content='Do whatever you want when you want to.'\n//       inverted\n//       style={{\n//         fontSize: mobile ? '1.5em' : '1.7em',\n//         fontWeight: 'normal',\n//         marginTop: mobile ? '0.5em' : '1.5em',\n//       }}\n//     />\n//     <Button primary size='huge'>\n//       Get Started\n//       <Icon name='right arrow' />\n//     </Button>\n//   </Container>\n// )\n\n// HomepageHeading.propTypes = {\n//   mobile: PropTypes.bool,\n// }\n\n// /* Heads up!\n//  * Neither Semantic UI nor Semantic UI React offer a responsive navbar, however, it can be implemented easily.\n//  * It can be more complicated, but you can create really flexible markup.\n//  */\n// class DesktopContainer extends Component {\n//   state = {}\n\n//   hideFixedMenu = () => this.setState({ fixed: false })\n//   showFixedMenu = () => this.setState({ fixed: true })\n\n//   render() {\n//     const { children } = this.props\n//     const { fixed } = this.state\n\n//     return (\n//       <Responsive getWidth={getWidth} minWidth={Responsive.onlyTablet.minWidth}>\n//         <Visibility\n//           once={false}\n//           onBottomPassed={this.showFixedMenu}\n//           onBottomPassedReverse={this.hideFixedMenu}\n//         >\n//           <Segment\n//             inverted\n//             textAlign='center'\n//             style={{ minHeight: 700, padding: '1em 0em' }}\n//             vertical\n//           >\n//             <Menu\n//               fixed={fixed ? 'top' : null}\n//               inverted={!fixed}\n//               pointing={!fixed}\n//               secondary={!fixed}\n//               size='large'\n//             >\n//               <Container>\n//                 <Menu.Item as='a' active>\n//                   Home\n//                 </Menu.Item>\n//                 <Menu.Item as='a'>Work</Menu.Item>\n//                 <Menu.Item as='a'>Company</Menu.Item>\n//                 <Menu.Item as='a'>Careers</Menu.Item>\n//                 <Menu.Item position='right'>\n//                   <Button as='a' inverted={!fixed}>\n//                     Log in\n//                   </Button>\n//                   <Button as='a' inverted={!fixed} primary={fixed} style={{ marginLeft: '0.5em' }}>\n//                     Sign Up\n//                   </Button>\n//                 </Menu.Item>\n//               </Container>\n//             </Menu>\n//             <HomepageHeading />\n//           </Segment>\n//         </Visibility>\n\n//         {children}\n//       </Responsive>\n//     )\n//   }\n// }\n\n// DesktopContainer.propTypes = {\n//   children: PropTypes.node,\n// }\n\n// class MobileContainer extends Component {\n//   state = {}\n\n//   handleSidebarHide = () => this.setState({ sidebarOpened: false })\n\n//   handleToggle = () => this.setState({ sidebarOpened: true })\n\n//   render() {\n//     const { children } = this.props\n//     const { sidebarOpened } = this.state\n\n//     return (\n//       <Responsive\n//         as={Sidebar.Pushable}\n//         getWidth={getWidth}\n//         maxWidth={Responsive.onlyMobile.maxWidth}\n//       >\n//         <Sidebar\n//           as={Menu}\n//           animation='push'\n//           inverted\n//           onHide={this.handleSidebarHide}\n//           vertical\n//           visible={sidebarOpened}\n//         >\n//           <Menu.Item as='a' active>\n//             Home\n//           </Menu.Item>\n//           <Menu.Item as='a'>Work</Menu.Item>\n//           <Menu.Item as='a'>Company</Menu.Item>\n//           <Menu.Item as='a'>Careers</Menu.Item>\n//           <Menu.Item as='a'>Log in</Menu.Item>\n//           <Menu.Item as='a'>Sign Up</Menu.Item>\n//         </Sidebar>\n\n//         <Sidebar.Pusher dimmed={sidebarOpened}>\n//           <Segment\n//             inverted\n//             textAlign='center'\n//             style={{ minHeight: 350, padding: '1em 0em' }}\n//             vertical\n//           >\n//             <Container>\n//               <Menu inverted pointing secondary size='large'>\n//                 <Menu.Item onClick={this.handleToggle}>\n//                   <Icon name='sidebar' />\n//                 </Menu.Item>\n//                 <Menu.Item position='right'>\n//                   <Button as='a' inverted>\n//                     Log in\n//                   </Button>\n//                   <Button as='a' inverted style={{ marginLeft: '0.5em' }}>\n//                     Sign Up\n//                   </Button>\n//                 </Menu.Item>\n//               </Menu>\n//             </Container>\n//             <HomepageHeading mobile />\n//           </Segment>\n\n//           {children}\n//         </Sidebar.Pusher>\n//       </Responsive>\n//     )\n//   }\n// }\n\n// MobileContainer.propTypes = {\n//   children: PropTypes.node,\n// }\n\n// const ResponsiveContainer = ({ children }) => (\n//   <div>\n//     <DesktopContainer>{children}</DesktopContainer>\n//     <MobileContainer>{children}</MobileContainer>\n//   </div>\n// )\n\n// ResponsiveContainer.propTypes = {\n//   children: PropTypes.node,\n// }\n\n"]},"metadata":{},"sourceType":"module"}