{"ast":null,"code":"import React from 'react';\nimport axios from 'axios';\nexport const fetchApiDoctors = async payload => {\n  const {\n    address,\n    query,\n    distance,\n    lat,\n    lng\n  } = payload;\n  let data;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`);\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n\n  return data;\n};\n\nconst createDoctor = async singleDoctor => {\n  let detailedDoctor;\n  let doctorFromBackend;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/details/${singleDoctor.place_id}`);\n    detailedDoctor = res.data.result;\n  } catch (err) {\n    console.log(err, 'FROM CREATEDOCTORS HELPER');\n    throw err;\n  }\n\n  const {\n    formatted_address,\n    formatted_phone_number,\n    name,\n    place_id,\n    rating,\n    url,\n    website,\n    user_ratings_total,\n    reviews,\n    photos,\n    geometry: {\n      location: {\n        lat,\n        lng\n      }\n    }\n  } = detailedDoctor; // ES6 key value assignment operator\n\n  const doctorHash = {\n    place_id,\n    name,\n    formatted_address,\n    rating,\n    user_ratings_total,\n    formatted_phone_number,\n    lat,\n    lng,\n    url,\n    website,\n    photos,\n    reviews\n  };\n  let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n  doctorFromBackend = res.data;\n  let createdReviews = createReviews(doctorFromBackend, reviews);\n  let createdPhotos = createPhotos(doctorFromBackend.place_id);\n  return doctorFromBackend;\n};\n\nexport const createDoctors = async incomingDoctors => {\n  incomingDoctors.map(async doctor => {\n    let detailedDoctor = await createDoctor(doctor); // destructuring for values in schema\n\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: {\n          lat,\n          lng\n        }\n      }\n    } = detailedDoctor; // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews\n    };\n    let data;\n    let photoData; // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    return data;\n  });\n};\n\nconst createReviews = async () => {\n  reviews.forEach(async singleReview => {\n    const {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time\n    } = singleReview;\n    const reviewHash = {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n      place_id,\n      doctor_id: data.id\n    };\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n    let reviewData = res.data;\n    console.log('reviewData from reviewPost', reviewData); //\n  });\n};\n\nexport const createPhotos = async ({\n  doctorId,\n  placeId\n}) => {\n  let data = [];\n  const myHeaders = new Headers();\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/helpers/helpers.js"],"names":["React","axios","fetchApiDoctors","payload","address","query","distance","lat","lng","data","res","get","results","err","console","log","createDoctor","singleDoctor","detailedDoctor","doctorFromBackend","place_id","result","formatted_address","formatted_phone_number","name","rating","url","website","user_ratings_total","reviews","photos","geometry","location","doctorHash","post","createdReviews","createReviews","createdPhotos","createPhotos","createDoctors","incomingDoctors","map","doctor","photoData","photoPayload","incomingPhotos","doctorId","id","placeId","forEach","singleReview","author_name","author_url","profile_photo_url","relative_time_description","text","time","reviewHash","doctor_id","reviewData","myHeaders","Headers","photoHash","doctor_reference"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport const fetchApiDoctors = async (payload) => {\n  const { address, query, distance, lat, lng } = payload;\n  let data;\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`\n    );\n\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n  return data;\n};\n\nconst createDoctor = async (singleDoctor) => {\n  let detailedDoctor\n  let doctorFromBackend\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/details/${singleDoctor.place_id}`\n    );\n    detailedDoctor = res.data.result;\n\n  } catch (err) {\n    console.log(err, 'FROM CREATEDOCTORS HELPER');\n    throw err;\n  }\n\n\n  const {\n    formatted_address,\n    formatted_phone_number,\n    name,\n    place_id,\n    rating,\n    url,\n    website,\n    user_ratings_total,\n    reviews,\n    photos,\n    geometry: {\n      location: { lat, lng },\n    },\n  } = detailedDoctor;\n\n  // ES6 key value assignment operator\n\n  const doctorHash = {\n    place_id,\n    name,\n    formatted_address,\n    rating,\n    user_ratings_total,\n    formatted_phone_number,\n    lat,\n    lng,\n    url,\n    website,\n    photos,\n    reviews,\n  };\n\n  let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n  doctorFromBackend = res.data\n  let createdReviews = createReviews(doctorFromBackend, reviews)\n  let createdPhotos = createPhotos(doctorFromBackend.place_id)\n  return doctorFromBackend\n  \n\n};\n\nexport const createDoctors = async (incomingDoctors) => {\n  incomingDoctors.map(async (doctor) => {\n    let detailedDoctor = await createDoctor(doctor)\n\n    // destructuring for values in schema\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: { lat, lng },\n      },\n    } = detailedDoctor;\n\n    // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews,\n    };\n\n    let data;\n    let photoData;\n\n    // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id,\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n    return data;\n  });\n};\n\nconst createReviews = async () => {\n  reviews.forEach(async (singleReview) => {\n    const {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n    } = singleReview;\n    const reviewHash = {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n      place_id,\n      doctor_id: data.id,\n    };\n\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n\n    let reviewData = res.data;\n    console.log('reviewData from reviewPost', reviewData);\n\n    //\n  });\n};\n\nexport const createPhotos = async ({ doctorId, placeId }) => {\n  let data = [];\n  const myHeaders = new Headers();\n\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId,\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}