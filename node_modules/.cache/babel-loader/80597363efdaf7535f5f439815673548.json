{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js\";\nimport React from 'react';\nimport { Grid, Rating, Header, Message, Divider, Segment, Image, Container } from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass DoctorShow extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      favorite: 0\n    };\n\n    this.isFavorite = () => {\n      const favorite = this.props.currentUser.doctors.find(doc => doc.id === parseInt(this.props.match.params.id));\n      if (favorite) this.setState({\n        favorite: 1\n      });\n    };\n\n    this.postFavorite = async () => {\n      const favoriteObject = {\n        doctor_id: this.props.match.params.id,\n        user_id: this.props.currentUser.id\n      };\n\n      try {\n        let res = await axios.post(`http://localhost:3000/favorites`, favoriteObject);\n        this.setState({\n          favorite: 1,\n          id: res.data.id\n        }, () => {\n          this.props.loadUser();\n        });\n        console.log(res.data);\n      } catch (error) {}\n    };\n\n    this.deleteFavorite = async () => {\n      let favorite = this.props.currentUser.favorites.find(favorite => favorite.doctor_id === parseInt(this.props.match.params.id));\n\n      if (favorite === -1) {\n        this.setState({\n          favorite: 0\n        });\n      }\n\n      try {\n        let res = await axios.delete(`http://localhost:3000/favorites/${favorite.id}`);\n        console.log('res.data from deletefavorite', res.data);\n        this.setState({\n          favorite: 0,\n          id: null\n        }, () => {\n          this.props.loadUser();\n        });\n      } catch (err) {\n        console.log('error', err);\n      }\n\n      console.log('got here in delete');\n    };\n\n    this.rate = (e, {\n      rating\n    }) => {\n      if (rating === 0) {\n        this.deleteFavorite();\n      } else {\n        this.postFavorite();\n      }\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.getDoctorById(parseInt(this.props.match.params.id));\n    await this.props.loadUser();\n    this.isFavorite();\n  }\n\n  render() {\n    console.log('DOCTOR SHOW THIS.STATE: ', this.state); // debugger\n\n    const {\n      name,\n      formatted_phone_number,\n      formatted_address,\n      rating,\n      url,\n      website,\n      reviews,\n      photos,\n      photo\n    } = this.props.doctorShow;\n    return React.createElement(Container, {\n      style: {\n        padding: '3rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Image, {\n      centered: true,\n      size: \"large\",\n      src: photo && photo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Segment, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"a\",\n      href: website,\n      rel: \"noopener noreferrer\",\n      target: \"_blank\",\n      content: name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Rating, {\n      onRate: (e, data) => this.rate(e, data),\n      icon: \"heart\",\n      rating: this.state.favorite,\n      maxRating: 1,\n      size: \"huge\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      rel: \"noopener noreferrer\",\n      href: `tel:${formatted_phone_number}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, formatted_phone_number)), React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: url,\n      rel: \"noopener no referrer\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, formatted_address)), rating && React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Average Rating:\", ' ', React.createElement(Rating, {\n      disabled: true,\n      icon: \"star\",\n      maxRating: 5,\n      rating: rating,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })))), React.createElement(Divider, {\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      columns: 2,\n      centered: true,\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, reviews && reviews.map(review => React.createElement(Message, {\n      key: review.author_name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Container, {\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Image, {\n      as: \"icon\",\n      size: \"mini\",\n      src: review.profile_photo_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: review.author_url,\n      rel: \"no referrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(React.Fragment, null, review.author_name))), React.createElement(Rating, {\n      disabled: true,\n      icon: \"star\",\n      maxRating: 5,\n      rating: review.rating,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), React.createElement(Message.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, review.text))))), photos && React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Image.Group, {\n      size: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, photos && photos.map(photo => React.createElement(Image, {\n      key: photo.id,\n      alt: \"\",\n      src: photo.slug,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nexport default DoctorShow;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js"],"names":["React","Grid","Rating","Header","Message","Divider","Segment","Image","Container","axios","DoctorShow","Component","state","favorite","isFavorite","props","currentUser","doctors","find","doc","id","parseInt","match","params","setState","postFavorite","favoriteObject","doctor_id","user_id","res","post","data","loadUser","console","log","error","deleteFavorite","favorites","delete","err","rate","e","rating","componentDidMount","getDoctorById","render","name","formatted_phone_number","formatted_address","url","website","reviews","photos","photo","doctorShow","padding","height","map","review","author_name","profile_photo_url","author_url","text","slug"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Grid,\n  Rating,\n  Header,\n  Message,\n  Divider,\n  Segment,\n  Image,\n  Container,\n} from 'semantic-ui-react';\nimport axios from 'axios';\n\nclass DoctorShow extends React.Component {\n  state = {\n    favorite: 0,\n  };\n\n  isFavorite = () => {\n    const favorite = this.props.currentUser.doctors.find(\n      (doc) => doc.id === parseInt(this.props.match.params.id)\n    );\n    if (favorite) this.setState({ favorite: 1 });\n  };\n\n  async componentDidMount() {\n    await this.props.getDoctorById(parseInt(this.props.match.params.id));\n    await this.props.loadUser();\n    this.isFavorite();\n  }\n\n  postFavorite = async () => {\n    const favoriteObject = {\n      doctor_id: this.props.match.params.id,\n      user_id: this.props.currentUser.id,\n    };\n    try {\n      let res = await axios.post(\n        `http://localhost:3000/favorites`,\n        favoriteObject\n      );\n      this.setState({ favorite: 1, id: res.data.id }, () => {\n        this.props.loadUser();\n      });\n      console.log(res.data);\n    } catch (error) {}\n  };\n\n  deleteFavorite = async () => {\n    let favorite = this.props.currentUser.favorites.find(\n      (favorite) => favorite.doctor_id === parseInt(this.props.match.params.id)\n    );\n    if (favorite === -1) {\n      this.setState({ favorite: 0 });\n    }\n    try {\n      let res = await axios.delete(\n        `http://localhost:3000/favorites/${favorite.id}`\n      );\n      console.log('res.data from deletefavorite', res.data);\n      this.setState({ favorite: 0, id: null }, () => {\n        this.props.loadUser();\n      });\n    } catch (err) {\n      console.log('error', err);\n    }\n\n    console.log('got here in delete');\n  };\n\n  rate = (e, { rating }) => {\n    if (rating === 0) {\n      this.deleteFavorite();\n    } else {\n      this.postFavorite();\n    }\n  };\n\n  render() {\n    console.log('DOCTOR SHOW THIS.STATE: ', this.state);\n    // debugger\n    const {\n      name,\n      formatted_phone_number,\n      formatted_address,\n      rating,\n      url,\n      website,\n      reviews,\n      photos,\n      photo,\n    } = this.props.doctorShow;\n\n    return (\n      <Container style={{ padding: '3rem' }}>\n        <Image centered size='large' src={photo && photo}></Image>\n        <Segment textAlign='center'>\n          <Header\n            as='a'\n            href={website}\n            rel='noopener noreferrer'\n            target='_blank'\n            content={name}\n          ></Header>\n\n          <Rating\n            onRate={(e, data) => this.rate(e, data)}\n            icon='heart'\n            rating={this.state.favorite}\n            maxRating={1}\n            size='huge'\n          />\n          <Divider hidden />\n          <Message>\n            <a rel='noopener noreferrer' href={`tel:${formatted_phone_number}`}>\n              {formatted_phone_number}\n            </a>\n          </Message>\n          <Message>\n            <a href={url} rel='noopener no referrer' target='_blank'>\n              {formatted_address}\n            </a>\n          </Message>\n\n          {rating && (\n            <Message>\n              <strong>\n                Average Rating:{' '}\n                {\n                  <Rating disabled icon='star' maxRating={5} rating={rating}>\n                    {/* {review.rating} */}\n                  </Rating>\n                }\n              </strong>\n            </Message>\n          )}\n        </Segment>\n        <Divider hidden />\n\n        <Grid\n          columns={2}\n          centered\n          textAlign='center'\n          style={{ height: '100vh' }}\n          verticalAlign='top'\n        >\n          <Segment>\n            <Grid.Row>\n              {reviews &&\n                reviews.map((review) => (\n                  <Message key={review.author_name}>\n                    <Container centered>\n                      <Header>\n                        <Image\n                          as='icon'\n                          size='mini'\n                          src={review.profile_photo_url}\n                        />\n                        <a href={review.author_url} rel='no referrer'>\n                          <>{review.author_name}</>\n                        </a>\n                      </Header>\n\n                      <Rating\n                        disabled\n                        icon='star'\n                        maxRating={5}\n                        rating={review.rating}\n                      />\n                    </Container>\n\n                    <Message.Content>{review.text}</Message.Content>\n                  </Message>\n                ))}\n            </Grid.Row>\n          </Segment>\n   {  photos &&     <Segment>\n            <Grid.Row>\n              <Image.Group size='medium'>\n                {photos &&\n                  photos.map((photo) => (\n                    <Image key={photo.id} alt='' src={photo.slug} />\n                  ))}\n              </Image.Group>\n            </Grid.Row>\n          </Segment>}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default DoctorShow;\n"]},"metadata":{},"sourceType":"module"}