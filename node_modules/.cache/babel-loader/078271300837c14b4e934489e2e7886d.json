{"ast":null,"code":"import _toConsumableArray from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _possibleConstructorReturn from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import NewConversationForm from'./NewConversationForm';import MessagesArea from'./MessagesArea';import Cable from'./Cable';import ActionCableConsumer from'react-actioncable-provider';import{API_ROOT}from'../constants';var ConversationsList=/*#__PURE__*/function(_React$Component){_inherits(ConversationsList,_React$Component);function ConversationsList(){var _getPrototypeOf2;var _this;_classCallCheck(this,ConversationsList);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(ConversationsList)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={conversations:[],activeConversation:null};_this.componentDidMount=function(){fetch(\"\".concat(API_ROOT,\"/conversations\")).then(function(res){return res.json();}).then(function(conversations){return _this.setState({conversations:conversations});});};_this.handleClick=function(id){_this.setState({activeConversation:id});};_this.handleReceivedConversation=function(response){var conversation=response.conversation;_this.setState({conversations:[].concat(_toConsumableArray(_this.state.conversations),[conversation])});};_this.handleReceivedMessage=function(response){var message=response.message;var conversations=_toConsumableArray(_this.state.conversations);var conversation=conversations.find(function(conversation){return conversation.id===message.conversation_id;});conversation.messages=[].concat(_toConsumableArray(conversation.messages),[message]);_this.setState({conversations:conversations});};_this.render=function(){var _this$state=_this.state,conversations=_this$state.conversations,activeConversation=_this$state.activeConversation;return React.createElement(\"div\",{className:\"conversationsList\"},React.createElement(ActionCableConsumer,{channel:{channel:'ConversationsChannel'},onReceived:_this.handleReceivedConversation}),_this.state.conversations.length?React.createElement(Cable,{conversations:conversations,handleReceivedMessage:_this.handleReceivedMessage}):null,React.createElement(\"h2\",null,\"Conversations\"),React.createElement(\"ul\",null,mapConversations(conversations,_this.handleClick)),React.createElement(NewConversationForm,null),activeConversation?React.createElement(MessagesArea,{conversation:findActiveConversation(conversations,activeConversation)}):null);};return _this;}return ConversationsList;}(React.Component);export default ConversationsList;// helpers\nvar findActiveConversation=function findActiveConversation(conversations,activeConversation){return conversations.find(function(conversation){return conversation.id===activeConversation;});};var mapConversations=function mapConversations(conversations,handleClick){return conversations.map(function(conversation){return React.createElement(\"li\",{key:conversation.id,onClick:function onClick(){return handleClick(conversation.id);}},conversation.title);});};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/ConversationsList.js"],"names":["React","NewConversationForm","MessagesArea","Cable","ActionCableConsumer","API_ROOT","ConversationsList","state","conversations","activeConversation","componentDidMount","fetch","then","res","json","setState","handleClick","id","handleReceivedConversation","response","conversation","handleReceivedMessage","message","find","conversation_id","messages","render","channel","length","mapConversations","findActiveConversation","Component","map","title"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\n\nimport NewConversationForm from './NewConversationForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\nimport ActionCableConsumer from 'react-actioncable-provider';\nimport { API_ROOT } from '../constants';\n\nclass ConversationsList extends React.Component {\n  state = {\n    conversations: [],\n    activeConversation: null,\n  };\n\n  componentDidMount = () => {\n    fetch(`${API_ROOT}/conversations`)\n      .then((res) => res.json())\n      .then((conversations) => this.setState({ conversations }));\n  };\n\n  handleClick = (id) => {\n    this.setState({ activeConversation: id });\n  };\n\n  handleReceivedConversation = (response) => {\n    const { conversation } = response;\n    this.setState({\n      conversations: [...this.state.conversations, conversation],\n    });\n  };\n\n  handleReceivedMessage = (response) => {\n    const { message } = response;\n    const conversations = [...this.state.conversations];\n    const conversation = conversations.find(\n      (conversation) => conversation.id === message.conversation_id\n    );\n    conversation.messages = [...conversation.messages, message];\n    this.setState({ conversations });\n  };\n\n  render = () => {\n    const { conversations, activeConversation } = this.state;\n    return (\n      <div className='conversationsList'>\n        <ActionCableConsumer\n          channel={{ channel: 'ConversationsChannel' }}\n          onReceived={this.handleReceivedConversation}\n        />\n        {this.state.conversations.length ? (\n          <Cable\n            conversations={conversations}\n            handleReceivedMessage={this.handleReceivedMessage}\n          />\n        ) : null}\n        <h2>Conversations</h2>\n        <ul>{mapConversations(conversations, this.handleClick)}</ul>\n        <NewConversationForm />\n        {activeConversation ? (\n          <MessagesArea\n            conversation={findActiveConversation(\n              conversations,\n              activeConversation\n            )}\n          />\n        ) : null}\n      </div>\n    );\n  };\n}\n\nexport default ConversationsList;\n\n// helpers\n\nconst findActiveConversation = (conversations, activeConversation) => {\n  return conversations.find(\n    (conversation) => conversation.id === activeConversation\n  );\n};\n\nconst mapConversations = (conversations, handleClick) => {\n  return conversations.map((conversation) => {\n    return (\n      <li key={conversation.id} onClick={() => handleClick(conversation.id)}>\n        {conversation.title}\n      </li>\n    );\n  });\n};\n"]},"metadata":{},"sourceType":"module"}