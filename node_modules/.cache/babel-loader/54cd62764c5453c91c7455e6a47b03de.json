{"ast":null,"code":"import React from 'react';\nimport axios from 'axios';\nexport const fetchApiDoctors = async payload => {\n  const {\n    address,\n    query,\n    distance,\n    lat,\n    lng\n  } = payload;\n  let data;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`);\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n\n  return data;\n};\nexport const createDoctors = async incomingDoctors => {\n  const dockers = [];\n  await incomingDoctors.forEach(async doctor => {\n    let finalDoc;\n    let createdReviews;\n    let createdPhotos;\n\n    try {\n      finalDoc = await createDoctor(doctor);\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n\n    createdReviews = await createReviews(finalDoc);\n    finalDoc.reviews = createdReviews;\n    createdPhotos = await createPhotos(finalDoc);\n    finalDoc.photos = createdPhotos;\n    dockers.push(finalDoc);\n  });\n  debugger;\n  return dockers;\n};\n\nconst createDoctor = async singleDoctor => {\n  let detailedDoctor;\n  let doctorFromBackend;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/details/${singleDoctor.place_id}`);\n    detailedDoctor = res.data.result;\n  } catch (err) {\n    console.log(err, 'FROM CREATEDOCTORS HELPER');\n    throw err;\n  }\n\n  const {\n    formatted_address,\n    formatted_phone_number,\n    name,\n    place_id,\n    rating,\n    url,\n    website,\n    user_ratings_total,\n    reviews,\n    photos,\n    geometry: {\n      location: {\n        lat,\n        lng\n      }\n    }\n  } = detailedDoctor; // ES6 key value assignment operator\n\n  const doctorHash = {\n    place_id,\n    name,\n    formatted_address,\n    rating,\n    user_ratings_total,\n    formatted_phone_number,\n    lat,\n    lng,\n    url,\n    website,\n    photos,\n    reviews\n  };\n\n  try {\n    let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n    doctorFromBackend = res.data;\n  } catch (error) {\n    console.log('fixed?');\n  }\n\n  return doctorFromBackend;\n};\n\nconst createReviews = async ({\n  place_id,\n  doctor_id\n}) => {\n  const reviewPayload = {\n    place_id,\n    doctor_id\n  };\n  debugger;\n\n  try {\n    let res = await axios.post('http://localhost:3000/reviews', reviewPayload);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\nconst createPhotos = async doctorFromBackend => {\n  const photoHash = {\n    doctor_id: doctorFromBackend.id,\n    doctor_reference: doctorFromBackend.place_id\n  };\n  let data;\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/helpers/helpers.js"],"names":["React","axios","fetchApiDoctors","payload","address","query","distance","lat","lng","data","res","get","results","err","console","log","createDoctors","incomingDoctors","dockers","forEach","doctor","finalDoc","createdReviews","createdPhotos","createDoctor","createReviews","reviews","createPhotos","photos","push","singleDoctor","detailedDoctor","doctorFromBackend","place_id","result","formatted_address","formatted_phone_number","name","rating","url","website","user_ratings_total","geometry","location","doctorHash","post","error","doctor_id","reviewPayload","photoHash","id","doctor_reference"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport const fetchApiDoctors = async (payload) => {\n  const { address, query, distance, lat, lng } = payload;\n  let data;\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`\n    );\n\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n  return data;\n};\n\nexport const createDoctors = async (incomingDoctors) => {\n  const dockers = [];\n  await incomingDoctors.forEach(async (doctor) => {\n    let finalDoc;\n    let createdReviews\n    let createdPhotos\n    try {\n      finalDoc = await createDoctor(doctor);\n\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n    \n    createdReviews = await createReviews(finalDoc);\n    finalDoc.reviews = createdReviews;\n\n\n    createdPhotos = await createPhotos(finalDoc);\n    finalDoc.photos = createdPhotos;\n    dockers.push(finalDoc);\n  });\n  debugger;\n  return dockers;\n};\n\nconst createDoctor = async (singleDoctor) => {\n  let detailedDoctor;\n  let doctorFromBackend;\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/details/${singleDoctor.place_id}`\n    );\n    detailedDoctor = res.data.result;\n  } catch (err) {\n    console.log(err, 'FROM CREATEDOCTORS HELPER');\n    throw err;\n  }\n\n  const {\n    formatted_address,\n    formatted_phone_number,\n    name,\n    place_id,\n    rating,\n    url,\n    website,\n    user_ratings_total,\n    reviews,\n    photos,\n    geometry: {\n      location: { lat, lng },\n    },\n  } = detailedDoctor;\n\n  // ES6 key value assignment operator\n\n  const doctorHash = {\n    place_id,\n    name,\n    formatted_address,\n    rating,\n    user_ratings_total,\n    formatted_phone_number,\n    lat,\n    lng,\n    url,\n    website,\n    photos,\n    reviews,\n  };\n\n  try {\n    let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n    doctorFromBackend = res.data;\n\n\n\n  } catch (error) {\n    console.log('fixed?');\n  }\n  return doctorFromBackend\n  \n};\n\nconst createReviews = async ({ place_id, doctor_id }) => {\n  const reviewPayload = {\n    place_id,\n    doctor_id,\n  };\n  debugger;\n\n  try {\n    let res = await axios.post('http://localhost:3000/reviews', reviewPayload);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\nconst createPhotos = async (doctorFromBackend) => {\n  const photoHash = {\n    doctor_id: doctorFromBackend.id,\n    doctor_reference: doctorFromBackend.place_id,\n  };\n  let data;\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}