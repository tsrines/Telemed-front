{"ast":null,"code":"import React from 'react';\nimport axios from 'axios';\nexport const fetchApiDoctors = async payload => {\n  const {\n    address,\n    query,\n    distance,\n    lat,\n    lng\n  } = payload;\n  let data;\n\n  try {\n    let res = await axios.get(`http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`);\n    data = res.data.results;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n\n  return data;\n};\nexport const createDoctors = async incomingDoctors => {\n  incomingDoctors.map(async doctor => {\n    let detailedDoctor;\n\n    try {\n      let res = await axios.get(`http://localhost:3000/geocodes/details/${doctor.place_id}`);\n      detailedDoctor = res.data.result;\n    } catch (err) {\n      console.log(err, 'FROM CREATEDOCTORS HELPER');\n      throw err;\n    } // destructuring for values in schema\n\n\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: {\n          lat,\n          lng\n        }\n      }\n    } = detailedDoctor; // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews\n    };\n    let data;\n    let photoData; // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    return data;\n  });\n};\n\nconst createReviews = async () => {\n  reviews.forEach(async singleReview => {\n    const {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time\n    } = singleReview;\n    const reviewHash = {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n      place_id,\n      doctor_id: data.id\n    };\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n    let reviewData = res.data;\n    console.log('reviewData from reviewPost', reviewData); //\n  });\n};\n\nexport const createPhotos = async ({\n  doctorId,\n  placeId\n}) => {\n  let data = [];\n  const myHeaders = new Headers();\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n\n  return data;\n};","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/helpers/helpers.js"],"names":["React","axios","fetchApiDoctors","payload","address","query","distance","lat","lng","data","res","get","results","err","console","log","createDoctors","incomingDoctors","map","doctor","detailedDoctor","place_id","result","formatted_address","formatted_phone_number","name","rating","url","website","user_ratings_total","reviews","photos","geometry","location","doctorHash","photoData","post","photoPayload","incomingPhotos","doctorId","id","placeId","createPhotos","createReviews","forEach","singleReview","author_name","author_url","profile_photo_url","relative_time_description","text","time","reviewHash","doctor_id","reviewData","myHeaders","Headers","photoHash","doctor_reference"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\nexport const fetchApiDoctors = async (payload) => {\n  const { address, query, distance, lat, lng } = payload;\n  let data\n  try {\n    let res = await axios.get(\n      `http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`\n    );\n\n    data = res.data.results;\n\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err\n  }\n  return data\n}\n\nexport const createDoctors = async (incomingDoctors) => {\n  incomingDoctors.map(async (doctor) => {\n    let detailedDoctor;\n\n    try {\n      let res = await axios.get(\n        `http://localhost:3000/geocodes/details/${doctor.place_id}`\n      );\n      detailedDoctor = res.data.result;\n    } catch (err) {\n      console.log(err, 'FROM CREATEDOCTORS HELPER');\n      throw err;\n    }\n\n    // destructuring for values in schema\n    const {\n      formatted_address,\n      formatted_phone_number,\n      name,\n      place_id,\n      rating,\n      url,\n      website,\n      user_ratings_total,\n      reviews,\n      photos,\n      geometry: {\n        location: { lat, lng },\n      },\n    } = detailedDoctor;\n\n    // ES6 key value assignment operator\n\n    const doctorHash = {\n      place_id,\n      name,\n      formatted_address,\n      rating,\n      user_ratings_total,\n      formatted_phone_number,\n      lat,\n      lng,\n      url,\n      website,\n      photos,\n      reviews,\n    };\n\n    let data;\n    let photoData;\n\n    // CREATE DOCTOR\n\n    try {\n      let res = await axios.post('http://localhost:3000/doctors', doctorHash);\n      data = res.data;\n\n      \n      const photoPayload = {\n        incomingPhotos: photos,\n        doctorId: data.id,\n        placeId: place_id,\n      };\n\n      try {\n        photoData = await this.createPhotos(photoPayload);\n        \n      } catch (err) {\n        console.log(err);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n    return data\n  });\n};\n\nconst createReviews = async () => {\n  reviews.forEach(async (singleReview) => {\n    const {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n    } = singleReview;\n    const reviewHash = {\n      author_name,\n      author_url,\n      profile_photo_url,\n      rating,\n      relative_time_description,\n      text,\n      time,\n      place_id,\n      doctor_id: data.id,\n    };\n\n    let res = await axios.post('http://localhost:3000/reviews', reviewHash);\n\n    let reviewData = res.data;\n    console.log('reviewData from reviewPost', reviewData);\n\n    //\n  });\n};\n\nexport const createPhotos = async ({ doctorId, placeId }) => {\n  let data = [];\n  const myHeaders = new Headers();\n\n  const photoHash = {\n    doctor_id: doctorId,\n    doctor_reference: placeId,\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n\n    data = res.data;\n  } catch (err) {\n    console.log(err);\n    throw err;\n  }\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}