{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: '',\n        email: '',\n        address: '',\n        password: '',\n        passwordConfirmation: '',\n        firstName: '',\n        lastName: '',\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.rate = (e, data) => {};\n\n    this.createDoctor = doctor => {\n      let doctorObj = {\n        api_id: doctor.id,\n        first_name: doctor.firstName,\n        last_name: doctor.lastName,\n        address: doctor.address,\n        image: doctor.image,\n        specialty: doctor.specialty,\n        title: doctor.title,\n        gender: doctor.gender,\n        bio: doctor.bio,\n        phone_number: doctor.phone\n      };\n      fetch('https://cryptic-island-45793.herokuapp.com/doctors', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n          Accepts: 'application/json'\n        },\n        body: JSON.stringify(doctorObj)\n      }).then(resp => resp.json()).then(data => {\n        let doctors = [...this.state.doctors];\n        this.setState({ ...this.state,\n          doctors: [data, ...doctors]\n        }, () => {\n          this.props.history.push('/doctors');\n        });\n      }, this.setState({\n        isLoading: false\n      }));\n    };\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id);\n\n      if (typeof favorite == 'object') {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      // debugger\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      fetch(`https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch('https://cryptic-island-45793.herokuapp.com/favorites', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      fetch('https://cryptic-island-45793.herokuapp.com/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.toGeoCode = formData => {\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${formData.address}&key=AIzaSyAkZI07elJzbOUJR5DCnSDGTZuDGmcptBM`).then(resp => resp.json()).then(data => this.setState({\n        lat: data['results'][0].geometry.location.lat,\n        lng: data['results'][0].geometry.location.lng\n      }, () => this.getDoctors(formData))).catch(err => console.dir(err));\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.getDoctors = formData => {\n      fetch(`https://api.betterdoctor.com/2015-01-27/doctors?query=${formData.ailment}&location=${this.state.lat}%2C${this.state.lng}%2C${formData.miles}&skip=0&limit=100&user_key=456c38f1b8349922db25eb4a4fd44429`).then(resp => resp.json()).then(data => {\n        this.setState({\n          apiDoctors: data.data,\n          isLoading: false\n        }, () => this.isResolved());\n        this.parseDoctors(data.data);\n      }).catch(err => {\n        if (err) this.setState({\n          error: true,\n          isLoading: false\n        });\n      });\n    };\n\n    this.parseDoctors = doctorsArray => {\n      let doctors = [];\n      doctorsArray.map(element => {\n        try {\n          let doctorHash = {};\n          doctorHash.id = element.uid; // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n\n          doctorHash.firstName = element.profile.first_name;\n          doctorHash.lastName = element.profile.last_name;\n\n          if (element.profile.gender === 'male') {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/matthew.png';\n          } else if (element.profile.gender === 'female') {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/kristy.png';\n          } else {\n            doctorHash.image = 'https://semantic-ui.com/images/avatar2/large/elyse.png';\n          }\n\n          doctorHash.title = element.profile.title;\n          doctorHash.bio = element.profile.bio;\n          doctorHash.address = element.practices[0].address;\n          doctorHash.gender = element.profile.gender;\n          doctorHash.phone = element.practices[0].phones[0].number;\n          doctorHash.specialty = element.specialties[0].name;\n          doctors.push(doctorHash);\n          this.createDoctor(doctorHash);\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch('https://cryptic-island-45793.herokuapp.com' + `/users/${this.state.currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch('https://cryptic-island-45793.herokuapp.com' + `/users`).then(resp => resp.json()).then(users => {\n      this.setState({\n        users\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({\n        createDoctor: this.createDoctor\n      }, routerProps, {\n        doctors: this.state.doctors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        toGeoCode: this.toGeoCode,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["Route","Switch","withRouter","Button","Image","DoctorShow","Doctors","Login","Profile","Search","App","React","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","error","apiDoctors","users","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","rate","e","data","createDoctor","doctorObj","first_name","last_name","image","specialty","title","gender","bio","phone_number","phone","fetch","method","headers","Accepts","body","JSON","stringify","then","resp","json","history","push","heart","find","unHeart","favoriteObject","user_id","doctor_id","accepts","newdoc","onSubmit","formData","logInOrSignUp","password_confirmation","userProfile","logOut","onSignUp","toGeoCode","geometry","location","getDoctors","catch","err","console","dir","isResolved","ailment","miles","parseDoctors","doctorsArray","map","element","doctorHash","uid","profile","practices","phones","number","specialties","name","log","loadingHandler","patchUser","userData","searchButton","alert","componentDidMount","render","routerProps"],"mappings":"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","sourcesContent":["\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: '',\n      email: '',\n      address: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      doctors: [],\n      favorites: [],\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    error: false,\n    apiDoctors: [],\n    users: [],\n  };\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(\n      (doctor) => doctor.api_id == this.props.match.params.id\n    );\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1,\n      });\n    }\n  };\n\n  rate = (e, data) => {};\n\n  createDoctor = (doctor) => {\n    let doctorObj = {\n      api_id: doctor.id,\n      first_name: doctor.firstName,\n      last_name: doctor.lastName,\n      address: doctor.address,\n      image: doctor.image,\n      specialty: doctor.specialty,\n      title: doctor.title,\n      gender: doctor.gender,\n      bio: doctor.bio,\n      phone_number: doctor.phone,\n    };\n\n    fetch('https://cryptic-island-45793.herokuapp.com/doctors', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        Accepts: 'application/json',\n      },\n      body: JSON.stringify(doctorObj),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let doctors = [...this.state.doctors];\n        this.setState(\n          {\n            ...this.state,\n            doctors: [data, ...doctors],\n          },\n          () => {\n            this.props.history.push('/doctors');\n          }\n        );\n      }, this.setState({ isLoading: false }));\n  };\n\n  heart = (doctor) => {\n    let favorite = this.state.currentUser.favorites.find(\n      (favorite) => favorite.api_id == doctor.api_id\n    );\n\n    if (typeof favorite == 'object') {\n      this.unHeart(favorite);\n    } else {\n      this.favorite(doctor);\n    }\n  };\n\n  unHeart = (favorite) => {\n    // debugger\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    fetch(\n      `https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`,\n      {\n        method: 'DELETE',\n      }\n    )\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = this.state.currentUser.favorites.filter(\n          (favorite) => favorite.id !== data.id\n        );\n        let doctors = this.state.currentUser.doctors.filter(\n          (doctor) => doctor.api_id !== data.api_id\n        );\n        this.setState({\n          ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors,\n          },\n        });\n      });\n  };\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id,\n    };\n\n    fetch('https://cryptic-island-45793.herokuapp.com/favorites', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify(favoriteObject),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number,\n        };\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors],\n          },\n        });\n      });\n  };\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData);\n  };\n\n  logInOrSignUp = (formData) => {\n    fetch('https://cryptic-island-45793.herokuapp.com/users', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              id: data.id,\n              email: data.email,\n              address: data.address,\n              password: data.password,\n              passwordConfirmation: data.password_confirmation,\n              firstName: data.first_name,\n              lastName: data.last_name,\n              doctors: data.doctors,\n              favorites: data.favorites,\n            },\n            isLoggedIn: true,\n          },\n          () => this.props.history.push('/search')\n        );\n      });\n  };\n\n  userProfile = () => {\n    let id = this.state.currentUser.id;\n    fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              ...this.state.currentUser,\n              doctors: data.doctors,\n            },\n          },\n          () => {\n            this.props.history.push('/profile');\n          }\n        );\n      });\n  };\n\n  logOut = () => {\n    this.props.history.push('/');\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] });\n  };\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register });\n  };\n  // request to Google GeoCode API to turn string into Longitude/Latitude\n  toGeoCode = (formData) => {\n    fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?address=${formData.address}&key=AIzaSyAkZI07elJzbOUJR5DCnSDGTZuDGmcptBM`\n    )\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState(\n          {\n            lat: data['results'][0].geometry.location.lat,\n            lng: data['results'][0].geometry.location.lng,\n          },\n          () => this.getDoctors(formData)\n        )\n      )\n      .catch((err) => console.dir(err));\n  };\n\n  // request to BetterDoc API with Long/Lat\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  getDoctors = (formData) => {\n    fetch(\n      `https://api.betterdoctor.com/2015-01-27/doctors?query=${formData.ailment}&location=${this.state.lat}%2C${this.state.lng}%2C${formData.miles}&skip=0&limit=100&user_key=456c38f1b8349922db25eb4a4fd44429`\n    )\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            apiDoctors: data.data,\n            isLoading: false,\n          },\n          () => this.isResolved()\n        );\n        this.parseDoctors(data.data);\n      })\n      .catch((err) => {\n        if (err) this.setState({ error: true, isLoading: false });\n      });\n  };\n\n  parseDoctors = (doctorsArray) => {\n    let doctors = [];\n    doctorsArray.map((element) => {\n      try {\n        let doctorHash = {};\n        doctorHash.id = element.uid;\n        // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n        doctorHash.firstName = element.profile.first_name;\n        doctorHash.lastName = element.profile.last_name;\n        if (element.profile.gender === 'male') {\n          doctorHash.image =\n            'https://semantic-ui.com/images/avatar2/large/matthew.png';\n        } else if (element.profile.gender === 'female') {\n          doctorHash.image =\n            'https://semantic-ui.com/images/avatar2/large/kristy.png';\n        } else {\n          doctorHash.image =\n            'https://semantic-ui.com/images/avatar2/large/elyse.png';\n        }\n        doctorHash.title = element.profile.title;\n        doctorHash.bio = element.profile.bio;\n        doctorHash.address = element.practices[0].address;\n        doctorHash.gender = element.profile.gender;\n        doctorHash.phone = element.practices[0].phones[0].number;\n\n        doctorHash.specialty = element.specialties[0].name;\n        doctors.push(doctorHash);\n        this.createDoctor(doctorHash);\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  };\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true });\n  };\n\n  patchUser = (userData) => {\n    fetch(\n      'https://cryptic-island-45793.herokuapp.com' +\n        `/users/${this.state.currentUser.id}`,\n      {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json',\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address,\n        }),\n      }\n    )\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n          },\n        })\n      );\n  };\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch('https://cryptic-island-45793.herokuapp.com' + `/users`)\n      .then((resp) => resp.json())\n      .then((users) => {\n        this.setState({\n          users,\n        });\n      });\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search');\n    } else {\n      alert('Please log in before searching');\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Button color='red' onClick={() => this.searchButton()}>\n          Search\n        </Button>\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={() => this.userProfile()}>\n            Profile\n          </Button>\n        )}\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={this.logOut}>\n            Logout\n          </Button>\n        )}\n        <Image alt='' src=''></Image>\n        {!this.state.isLoggedIn && (\n          <Login\n            isLoggedIn={this.state.isLoggedIn}\n            onSignUp={this.onSignUp}\n            onSubmit={this.onSubmit}\n            register={this.state.register}\n          />\n        )}\n        <Switch>\n          <Route\n            exact\n            path='/doctors'\n            render={(routerProps) => (\n              <Doctors\n                createDoctor={this.createDoctor}\n                {...routerProps}\n                doctors={this.state.doctors}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/search'\n            render={(routerProps) => (\n              <Search\n                error={this.state.error}\n                isLoading={this.state.isLoading}\n                currentUser={this.state.currentUser}\n                loadingHandler={this.loadingHandler}\n                {...routerProps}\n                toGeoCode={this.toGeoCode}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/doctors/:id'\n            render={(routerProps) => (\n              <DoctorShow\n                rate={this.rate}\n                doctors={this.state.doctors}\n                favorite={this.state.favorite}\n                isFavorite={this.isFavorite}\n                heart={this.heart}\n                currentUser={this.state.currentUser}\n                {...routerProps}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/profile'\n            render={(routerProps) => (\n              <Profile\n                patchUser={this.patchUser}\n                currentUser={this.state.currentUser}\n                doctors={this.state.doctors}\n                isLoggedIn={this.state.isLoggedIn}\n                {...routerProps}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}