{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\nimport { Redirect } from 'react-router';\n\nconst SearchIndex = ({\n  match,\n  loadUser,\n  currentUser,\n  loadingHandler,\n  loading\n}) => {\n  useEffect(() => {\n    loadUser();\n    loadSearchIndex();\n    console.log('got here in SearchIndex');\n  }, [loadUser]);\n  const [searchIndex, setSearchIndex] = useState([]);\n  const {\n    params: {\n      userId,\n      searchId\n    }\n  } = match;\n  console.log(userId, searchId);\n\n  const loadSearchIndex = async () => {\n    let csv;\n\n    try {\n      let res = await Axios.get(`http://localhost:3000/searches/${parseInt(searchId)}`);\n      csv = res.data.csv;\n      console.log(csv, \"CSV FROM LOADSEARCHINDEX\");\n    } catch (err) {}\n\n    const index = [];\n    csv.forEach(async id => {\n      let res = await Axios.get(`http://localhost:3000/doctors/${id}`);\n      let doc = res.data;\n      index.push(doc);\n    });\n    setSearchIndex(index);\n    useState;\n  };\n\n  console.log(searchIndex); // if(userId !== currentUser.id){\n  //   return <Redirect to={'/search'} />\n  // } \n\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, JSON.stringify(searchIndex, null, 2)) // <div>\n  //   <Grid\n  //     container\n  //     textAlign='center'\n  //     style={{ height: '100vh' }}\n  //     verticalAlign='middle'\n  //   >\n  //     <br></br>\n  //     <Card.Group\n  //       style={{ maxHeight: '35em' }}\n  //       display='flex'\n  //       justify-content='center'\n  //       itemsPerRow={3}\n  //     >\n  //       <DoctorCard />\n  //     </Card.Group>\n  //   </Grid>\n  // </div>\n  ;\n}; // SearchIndex.propTypes = {};\n\n\nexport default SearchIndex;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js"],"names":["React","useEffect","PropTypes","Card","Grid","DoctorCard","Axios","Redirect","SearchIndex","match","loadUser","currentUser","loadingHandler","loading","loadSearchIndex","console","log","searchIndex","setSearchIndex","useState","params","userId","searchId","csv","res","get","parseInt","data","err","index","forEach","id","doc","push","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,WAAlB;AAA+BC,EAAAA,cAA/B;AAA+CC,EAAAA;AAA/C,CAAD,KAA6D;AAE7EZ,EAAAA,SAAS,CAAC,MAAM;AAChBS,IAAAA,QAAQ;AACRI,IAAAA,eAAe;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,GAJU,EAIR,CAACN,QAAD,CAJQ,CAAT;AAME,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCC,QAAQ,CAAC,EAAD,CAA9C;AAGJ,QAAM;AAACC,IAAAA,MAAM,EAAC;AAACC,MAAAA,MAAD;AAASC,MAAAA;AAAT;AAAR,MAA8Bb,KAApC;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAYK,MAAZ,EAAoBC,QAApB;;AAEA,QAAMR,eAAe,GAAG,YAAa;AACnC,QAAIS,GAAJ;;AACE,QAAI;AACF,UAAIC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAW,kCAAiCC,QAAQ,CAACJ,QAAD,CAAW,EAA/D,CAAhB;AACCC,MAAAA,GAAG,GAAGC,GAAG,CAACG,IAAJ,CAASJ,GAAf;AACDR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ,EAAiB,0BAAjB;AACD,KAJD,CAIE,OAAOK,GAAP,EAAY,CAEb;;AACD,UAAMC,KAAK,GAAG,EAAd;AACAN,IAAAA,GAAG,CAACO,OAAJ,CAAY,MAAOC,EAAP,IAAc;AACxB,UAAIP,GAAG,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAW,iCAAgCM,EAAG,EAA9C,CAAhB;AACA,UAAIC,GAAG,GAAGR,GAAG,CAACG,IAAd;AACAE,MAAAA,KAAK,CAACI,IAAN,CAAWD,GAAX;AACD,KAJD;AAMAd,IAAAA,cAAc,CAACW,KAAD,CAAd;AAENV,IAAAA,QAAQ;AACL,GAnBD;;AAqBAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ,EApC+E,CAsC/E;AACA;AACA;;AACA,SAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKiB,IAAI,CAACC,SAAL,CAAelB,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAAL,CAFF,CAGE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBF;AAsBD,CA/DD,C,CAiEA;;;AAEA,eAAeT,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\nimport { Redirect } from 'react-router';\n\n\nconst SearchIndex = ({match, loadUser, currentUser, loadingHandler, loading}) => {\n  \n    useEffect(() => {\n    loadUser();\n    loadSearchIndex();\n    console.log('got here in SearchIndex');\n  }, [loadUser])\n\n      const [searchIndex, setSearchIndex] = useState([])\n\n\n  const {params:{userId, searchId}} = match\n  \n  console.log(userId, searchId)\n\n  const loadSearchIndex = async  () => {\n    let csv \n      try {\n        let res = await Axios.get(`http://localhost:3000/searches/${parseInt(searchId)}`)\n         csv = res.data.csv\n        console.log(csv, \"CSV FROM LOADSEARCHINDEX\")\n      } catch (err) {\n        \n      }\n      const index = []\n      csv.forEach(async (id) => {\n        let res = await Axios.get(`http://localhost:3000/doctors/${id}`)\n        let doc = res.data\n        index.push(doc)\n      })\n\n      setSearchIndex(index)\n\nuseState\n  }\n\n  console.log(searchIndex)\n\n  // if(userId !== currentUser.id){\n  //   return <Redirect to={'/search'} />\n  // } \n  return (\n    \n    <h1>{JSON.stringify(searchIndex, null, 2)}</h1>\n    // <div>\n    //   <Grid\n    //     container\n    //     textAlign='center'\n    //     style={{ height: '100vh' }}\n    //     verticalAlign='middle'\n    //   >\n    //     <br></br>\n    //     <Card.Group\n    //       style={{ maxHeight: '35em' }}\n    //       display='flex'\n    //       justify-content='center'\n    //       itemsPerRow={3}\n    //     >\n    //       <DoctorCard />\n    //     </Card.Group>\n    //   </Grid>\n    // </div>\n  );\n};\n\n// SearchIndex.propTypes = {};\n\nexport default SearchIndex;\n"]},"metadata":{},"sourceType":"module"}