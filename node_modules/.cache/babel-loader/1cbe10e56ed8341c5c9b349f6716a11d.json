{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport { fetchApiDoctors, createDoctors, createReviews } from './helpers/helpers';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: '',\n        email: '',\n        address: '',\n        password: '',\n        passwordConfirmation: '',\n        firstName: '',\n        lastName: '',\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.googleSearch = async payload => {\n      let apidocs = await fetchApiDoctors(payload);\n      apidocs.data.forEach(async doc => {\n        let reviews = await createReviews(doc.place_id, doc.id);\n\n        if (reviews) {\n          doc.reviews = reviews;\n        }\n\n        console.log(reviews);\n      });\n      console.log(apidocs);\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.rate = (e, data) => {};\n\n    this.createDoctor = doctor => {\n      let doctorObj = {\n        api_id: doctor.id,\n        first_name: doctor.firstName,\n        last_name: doctor.lastName,\n        address: doctor.address,\n        image: doctor.image,\n        specialty: doctor.specialty,\n        title: doctor.title,\n        gender: doctor.gender,\n        bio: doctor.bio,\n        phone_number: doctor.phone\n      };\n      fetch('https://cryptic-island-45793.herokuapp.com/doctors', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n          Accepts: 'application/json'\n        },\n        body: JSON.stringify(doctorObj)\n      }).then(resp => resp.json()).then(data => {\n        let doctors = [...this.state.doctors];\n        this.setState({ ...this.state,\n          doctors: [data, ...doctors]\n        }, () => {\n          this.props.history.push('/doctors');\n        });\n      }, this.setState({\n        isLoading: false\n      }));\n    };\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id);\n\n      if (typeof favorite == 'object') {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      // debugger\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      fetch(`https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch('https://cryptic-island-45793.herokuapp.com/favorites', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      fetch('https://cryptic-island-45793.herokuapp.com/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch('https://cryptic-island-45793.herokuapp.com' + `/users/${this.state.currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({\n        createDoctor: this.createDoctor\n      }, routerProps, {\n        doctors: this.state.doctors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        googleSearch: this.googleSearch,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Switch","withRouter","Button","Image","DoctorShow","Doctors","Login","Profile","Search","fetchApiDoctors","createDoctors","createReviews","App","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","error","apiDoctors","users","googleSearch","payload","apidocs","data","forEach","doc","reviews","place_id","console","log","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","rate","e","createDoctor","doctorObj","first_name","last_name","image","specialty","title","gender","bio","phone_number","phone","fetch","method","headers","Accepts","body","JSON","stringify","then","resp","json","history","push","heart","find","unHeart","favoriteObject","user_id","doctor_id","accepts","newdoc","onSubmit","formData","logInOrSignUp","password_confirmation","userProfile","logOut","onSignUp","isResolved","loadingHandler","patchUser","userData","searchButton","alert","componentDidMount","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport { fetchApiDoctors, createDoctors, createReviews } from './helpers/helpers';\n\n\nclass App extends React.Component {\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: '',\n      email: '',\n      address: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      doctors: [],\n      favorites: [],\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    error: false,\n    apiDoctors: [],\n    users: [],\n  };\n  \n\n  googleSearch = async (payload) => {\n    let apidocs = await fetchApiDoctors(payload)\n    apidocs.data.forEach(async doc => {\n      let reviews = await createReviews( doc.place_id,doc.id)\n      if (reviews) {\n        doc.reviews = reviews\n      }\n      console.log(reviews)\n    })\n    console.log(apidocs)\n\n  }\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(\n      (doctor) => doctor.api_id == this.props.match.params.id\n    );\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1,\n      });\n    }\n  };\n\n  rate = (e, data) => {};\n\n  createDoctor = (doctor) => {\n    let doctorObj = {\n      api_id: doctor.id,\n      first_name: doctor.firstName,\n      last_name: doctor.lastName,\n      address: doctor.address,\n      image: doctor.image,\n      specialty: doctor.specialty,\n      title: doctor.title,\n      gender: doctor.gender,\n      bio: doctor.bio,\n      phone_number: doctor.phone,\n    };\n\n    fetch('https://cryptic-island-45793.herokuapp.com/doctors', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        Accepts: 'application/json',\n      },\n      body: JSON.stringify(doctorObj),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let doctors = [...this.state.doctors];\n        this.setState(\n          {\n            ...this.state,\n            doctors: [data, ...doctors],\n          },\n          () => {\n            this.props.history.push('/doctors');\n          }\n        );\n      }, this.setState({ isLoading: false }));\n  };\n\n  heart = (doctor) => {\n    let favorite = this.state.currentUser.favorites.find(\n      (favorite) => favorite.api_id == doctor.api_id\n    );\n\n    if (typeof favorite == 'object') {\n      this.unHeart(favorite);\n    } else {\n      this.favorite(doctor);\n    }\n  };\n\n  unHeart = (favorite) => {\n    // debugger\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    fetch(\n      `https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`,\n      {\n        method: 'DELETE',\n      }\n    )\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = this.state.currentUser.favorites.filter(\n          (favorite) => favorite.id !== data.id\n        );\n        let doctors = this.state.currentUser.doctors.filter(\n          (doctor) => doctor.api_id !== data.api_id\n        );\n        this.setState({\n          ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors,\n          },\n        });\n      });\n  };\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id,\n    };\n\n    fetch('https://cryptic-island-45793.herokuapp.com/favorites', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify(favoriteObject),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number,\n        };\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors],\n          },\n        });\n      });\n  };\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData);\n  };\n\n  logInOrSignUp = (formData) => {\n    fetch('https://cryptic-island-45793.herokuapp.com/users', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              id: data.id,\n              email: data.email,\n              address: data.address,\n              password: data.password,\n              passwordConfirmation: data.password_confirmation,\n              firstName: data.first_name,\n              lastName: data.last_name,\n              doctors: data.doctors,\n              favorites: data.favorites,\n            },\n            isLoggedIn: true,\n          },\n          () => this.props.history.push('/search')\n        );\n      });\n  };\n\n  userProfile = () => {\n    let id = this.state.currentUser.id;\n    fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              ...this.state.currentUser,\n              doctors: data.doctors,\n            },\n          },\n          () => {\n            this.props.history.push('/profile');\n          }\n        );\n      });\n  };\n\n  logOut = () => {\n    this.props.history.push('/');\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] });\n  };\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register });\n  };\n  // request to Google GeoCode API to turn string into Longitude/Latitude\n\n\n  // request to BetterDoc API with Long/Lat\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  \n\n  \n  loadingHandler = () => {\n    this.setState({ isLoading: true });\n  };\n\n  patchUser = (userData) => {\n    fetch(\n      'https://cryptic-island-45793.herokuapp.com' +\n        `/users/${this.state.currentUser.id}`,\n      {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json',\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address,\n        }),\n      }\n    )\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n          },\n        })\n      );\n  };\n\n  componentDidMount() {\n    \n  \n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search');\n    } else {\n      alert('Please log in before searching');\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Button color='red' onClick={() => this.searchButton()}>\n          Search\n        </Button>\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={() => this.userProfile()}>\n            Profile\n          </Button>\n        )}\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={this.logOut}>\n            Logout\n          </Button>\n        )}\n        <Image alt='' src=''></Image>\n        {!this.state.isLoggedIn && (\n          <Login\n            isLoggedIn={this.state.isLoggedIn}\n            onSignUp={this.onSignUp}\n            onSubmit={this.onSubmit}\n            register={this.state.register}\n          />\n        )}\n        <Switch>\n          <Route\n            exact\n            path='/doctors'\n            render={(routerProps) => (\n              <Doctors\n                createDoctor={this.createDoctor}\n                {...routerProps}\n                doctors={this.state.doctors}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/search'\n            render={(routerProps) => (\n              <Search\n                error={this.state.error}\n                isLoading={this.state.isLoading}\n                currentUser={this.state.currentUser}\n                loadingHandler={this.loadingHandler}\n                {...routerProps}\n                googleSearch={this.googleSearch}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/doctors/:id'\n            render={(routerProps) => (\n              <DoctorShow\n                rate={this.rate}\n                doctors={this.state.doctors}\n                favorite={this.state.favorite}\n                isFavorite={this.isFavorite}\n                heart={this.heart}\n                currentUser={this.state.currentUser}\n                {...routerProps}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/profile'\n            render={(routerProps) => (\n              <Profile\n                patchUser={this.patchUser}\n                currentUser={this.state.currentUser}\n                doctors={this.state.doctors}\n                isLoggedIn={this.state.isLoggedIn}\n                {...routerProps}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}