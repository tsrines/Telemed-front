{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport { fetchApiDoctors, createReviews, createPhotos, getDoctors } from './helpers/helpers';\nimport axios from 'axios';\nimport Landing from './components/Landing';\nimport SignUp from './components/SignUp';\nimport Login from './components/Login';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      loading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: '',\n        email: '',\n        address: '',\n        password: '',\n        passwordConfirmation: '',\n        firstName: '',\n        lastName: '',\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      searchedDocs: [],\n      error: false,\n      apiDoctors: [],\n      users: [],\n      doctorShow: {}\n    };\n\n    this.googleSearch = async payload => {\n      const apidocs = await fetchApiDoctors(payload);\n      await apidocs.forEach(async doc => {\n        let reviews = await createReviews(doc.place_id, doc.id);\n\n        if (reviews) {\n          doc.reviews = reviews;\n        }\n      });\n      await apidocs.forEach(async doc => {\n        let photos = await createPhotos(doc.place_id, doc.id);\n\n        if (photos) {\n          doc.photos = photos;\n        }\n      });\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id);\n\n      if (typeof favorite == 'object') {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      // debugger\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      fetch(`https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch('https://cryptic-island-45793.herokuapp.com/favorites', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch('https://cryptic-island-45793.herokuapp.com' + `/users/${this.state.currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.getDoctorById = async id => {\n      // debugger\n      try {\n        let res = await axios.get(`http://localhost:3000/doctors/${id}`);\n        let doctorShow = res.data;\n        this.setState({\n          doctorShow,\n          loading: false\n        });\n      } catch (err) {\n        console.log(err);\n        throw err;\n      }\n    };\n\n    this.getDoctors = async () => {\n      try {\n        let res = await axios.get(`http://localhost:3000/doctors`);\n        this.setState({\n          doctors: res.data\n        });\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n\n    this.login = async formData => {\n      try {\n        let res = await axios.post(`http://localhost:3000/login`, formData);\n        let data = res.data;\n        console.log(data);\n      } catch (err) {\n        console.log(err, \"error\");\n      }\n    };\n\n    this.signUp = async formData => {\n      try {\n        let res = await axios.post(`http://localhost:3000/users`, formData);\n        let data = res.data;\n        console.log(data);\n      } catch (err) {\n        console.log(err, \"error\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getDoctors();\n  }\n\n  render() {\n    console.log('THIS.STATE FROM APP', this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: Landing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({\n        getDoctorById: this.getDoctorById,\n        loading: this.state.loading,\n        getDoctors: this.getDoctors,\n        searchedDocs: this.state.searchedDocs\n      }, routerProps, {\n        doctors: this.state.doctors,\n        showDoctor: this.showDoctor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/signup\",\n      render: routerProps => React.createElement(SignUp, Object.assign({}, routerProps, {\n        signUp: this.signUp,\n        register: this.state.register,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: routerProps => React.createElement(Login, Object.assign({}, routerProps, {\n        login: this.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        googleSearch: this.googleSearch,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        getDoctorById: this.getDoctorById,\n        doctorShow: this.state.doctorShow,\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Switch","withRouter","Button","Image","DoctorShow","Doctors","Profile","Search","fetchApiDoctors","createReviews","createPhotos","getDoctors","axios","Landing","SignUp","Login","App","Component","state","isLoading","loading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","searchedDocs","error","apiDoctors","users","doctorShow","googleSearch","payload","apidocs","forEach","doc","reviews","place_id","photos","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","heart","find","unHeart","fetch","method","then","resp","json","data","favoriteObject","user_id","doctor_id","headers","accepts","body","JSON","stringify","newdoc","first_name","last_name","title","gender","bio","phone_number","userProfile","history","push","logOut","isResolved","loadingHandler","patchUser","userData","password_confirmation","getDoctorById","res","get","err","console","log","searchButton","alert","login","formData","post","signUp","componentDidMount","render","routerProps","showDoctor","rate"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\n\n\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport {\n  fetchApiDoctors,\n  createReviews,\n  createPhotos,\n  getDoctors,\n} from './helpers/helpers';\nimport axios from 'axios';\n\nimport Landing from './components/Landing';\nimport SignUp from './components/SignUp';\nimport Login from './components/Login';\n\n\nclass App extends React.Component {\n  state = {\n    isLoading: false,\n    loading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: '',\n      email: '',\n      address: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      doctors: [],\n      favorites: [],\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    searchedDocs: [],\n    error: false,\n    apiDoctors: [],\n    users: [],\n    doctorShow: {},\n  };\n\n  googleSearch = async (payload) => {\n    const apidocs = await fetchApiDoctors(payload);\n\n    await apidocs.forEach(async (doc) => {\n      let reviews = await createReviews(doc.place_id, doc.id);\n      if (reviews) {\n        doc.reviews = reviews;\n      }\n    });\n    await apidocs.forEach(async (doc) => {\n      let photos = await createPhotos(doc.place_id, doc.id);\n      if (photos) {\n        doc.photos = photos;\n      }\n    });\n  };\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(\n      (doctor) => doctor.api_id == this.props.match.params.id\n    );\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1,\n      });\n    }\n  };\n\n  heart = (doctor) => {\n    let favorite = this.state.currentUser.favorites.find(\n      (favorite) => favorite.api_id == doctor.api_id\n    );\n\n    if (typeof favorite == 'object') {\n      this.unHeart(favorite);\n    } else {\n      this.favorite(doctor);\n    }\n  };\n\n  unHeart = (favorite) => {\n    // debugger\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    fetch(\n      `https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`,\n      {\n        method: 'DELETE',\n      }\n    )\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = this.state.currentUser.favorites.filter(\n          (favorite) => favorite.id !== data.id\n        );\n        let doctors = this.state.currentUser.doctors.filter(\n          (doctor) => doctor.api_id !== data.api_id\n        );\n        this.setState({\n          ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors,\n          },\n        });\n      });\n  };\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id,\n    };\n\n    fetch('https://cryptic-island-45793.herokuapp.com/favorites', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify(favoriteObject),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number,\n        };\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors],\n          },\n        });\n      });\n  };\n\n \n\n  \n\n  userProfile = () => {\n    let id = this.state.currentUser.id;\n    fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              ...this.state.currentUser,\n              doctors: data.doctors,\n            },\n          },\n          () => {\n            this.props.history.push('/profile');\n          }\n        );\n      });\n  };\n\n  logOut = () => {\n    this.props.history.push('/');\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] });\n  };\n\n  // request to Google GeoCode API to turn string into Longitude/Latitude\n\n  // request to BetterDoc API with Long/Lat\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true });\n  };\n\n  patchUser = (userData) => {\n    fetch(\n      'https://cryptic-island-45793.herokuapp.com' +\n        `/users/${this.state.currentUser.id}`,\n      {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json',\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address,\n        }),\n      }\n    )\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n          },\n        })\n      );\n  };\n  getDoctorById = async (id) => {\n    // debugger\n    try {\n      let res = await axios.get(`http://localhost:3000/doctors/${id}`);\n\n      let doctorShow = res.data;\n      this.setState({ doctorShow, loading: false });\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n  };\n\n  getDoctors = async () => {\n    try {\n      let res = await axios.get(`http://localhost:3000/doctors`);\n      this.setState({ doctors: res.data });\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  componentDidMount() {\n    this.getDoctors();\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search');\n    } else {\n      alert('Please log in before searching');\n    }\n  };\n\n  login = async (formData) => {\n    try {\n      let res = await axios.post(`http://localhost:3000/login`, formData)\n      let data = res.data\n      console.log(data)\n    } catch (err) {\n      console.log(err, \"error\")\n    }\n  }\n  signUp = async (formData) => {\n    try {\n      let res = await axios.post(`http://localhost:3000/users`, formData)\n      let data = res.data\n      console.log(data)\n    } catch (err) {\n      console.log(err, \"error\")\n    }\n\n  }\n\n  \n\n  render() {\n    console.log('THIS.STATE FROM APP', this.state);\n    return (\n      <div>\n        <Button color='red' onClick={() => this.searchButton()}>\n          Search\n        </Button>\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={() => this.userProfile()}>\n            Profile\n          </Button>\n        )}\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={this.logOut}>\n            Logout\n          </Button>\n        )}\n        <Image alt='' src=''></Image> \n        <Switch>\n          <Route\n          exact \n          path='/'\n          component={Landing}\n          >\n            \n          </Route>\n          <Route\n            exact\n            path='/doctors'\n            render={(routerProps) => (\n              <Doctors\n                getDoctorById={this.getDoctorById}\n                loading={this.state.loading}\n                getDoctors={this.getDoctors}\n                searchedDocs={this.state.searchedDocs}\n                {...routerProps}\n                doctors={this.state.doctors}\n                showDoctor={this.showDoctor}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/signup'\n            render={(routerProps) => (\n              <SignUp\n              {...routerProps}\n\n              signUp={this.signUp}\n\n              register={this.state.register}\n            />\n            )}\n          />\n\n          <Route\n            exact\n            path='/login'\n            render={(routerProps) => (\n              <Login\n              {...routerProps}\n              login={this.login}\n            />\n            )}\n          />\n          <Route\n            exact\n            path='/search'\n            render={(routerProps) => (\n              <Search\n                error={this.state.error}\n                isLoading={this.state.isLoading}\n                currentUser={this.state.currentUser}\n                loadingHandler={this.loadingHandler}\n                {...routerProps}\n                googleSearch={this.googleSearch}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/doctors/:id'\n            render={(routerProps) => (\n              <DoctorShow\n                getDoctorById={this.getDoctorById}\n                doctorShow={this.state.doctorShow}\n                rate={this.rate}\n                doctors={this.state.doctors}\n                favorite={this.state.favorite}\n                isFavorite={this.isFavorite}\n                heart={this.heart}\n                currentUser={this.state.currentUser}\n                {...routerProps}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/profile'\n            render={(routerProps) => (\n              <Profile\n                patchUser={this.patchUser}\n                currentUser={this.state.currentUser}\n                doctors={this.state.doctors}\n                isLoggedIn={this.state.isLoggedIn}\n                {...routerProps}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}