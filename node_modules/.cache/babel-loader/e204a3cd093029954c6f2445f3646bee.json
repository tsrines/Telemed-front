{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js\";\nimport React from 'react';\nimport { Grid, Rating, Header, Message, Button, Divider, Segment } from 'semantic-ui-react';\n\nclass DoctorShow extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.isFavorite = () => {\n      // eslint-disable-next-line\n      let favoriteArray = this.props.currentUser.doctors.filter(doctor => doctor.id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.state = {\n      favorite: 0\n    };\n\n    this.favoriteHandler = () => {\n      this.setState({\n        favorite: 0\n      });\n    };\n\n    this.docCheck = () => {\n      let doc;\n\n      if (this.props.doctors.length > 0) {\n        doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id);\n\n        if (!!doc) {\n          this.renderDocJsx(doc);\n        }\n      } else {\n        doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id);\n\n        if (!!doc) {\n          this.renderDocJsx(doc);\n        }\n      }\n    };\n\n    this.rate = (e, data, doc) => {\n      this.setState({\n        favorite: data.rating\n      }, () => this.props.heart(doc));\n    };\n  }\n\n  componentDidMount() {\n    if (Array.isArray(this.props.currentUser.doctors)) {\n      this.isFavorite();\n    }\n  }\n\n  render() {\n    let doc;\n    doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id);\n\n    if (doc == undefined) {\n      doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: 2,\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      style: {\n        maxWidth: 750\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, doc.first_name ? doc.first_name : doc.firstName, \" \", doc.last_name ? doc.last_name : doc.lastName, \" \", doc.title), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Phone Number: \", doc.phone_number), React.createElement(Rating, {\n      onRate: (e, data) => this.rate(e, data, doc),\n      icon: \"heart\",\n      rating: this.state.favorite,\n      maxRating: 1,\n      size: \"huge\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, doc.bio)))));\n  }\n\n} // DoctorShow.defaultProps = {\n//   currentUser: {\n//     userDoctors: []\n//   }\n// };\n\n\nexport default DoctorShow;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js"],"names":["React","Grid","Rating","Header","Message","Button","Divider","Segment","DoctorShow","Component","isFavorite","favoriteArray","props","currentUser","doctors","filter","doctor","id","match","params","length","setState","favorite","state","favoriteHandler","docCheck","doc","find","renderDocJsx","rate","e","data","rating","heart","componentDidMount","Array","isArray","render","undefined","height","maxWidth","first_name","firstName","last_name","lastName","title","phone_number","bio"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Grid, Rating, Header, Message, Button, Divider, Segment } from 'semantic-ui-react'\n\n\n\nclass DoctorShow extends React.Component {\n\n  isFavorite = () => {\n\n// eslint-disable-next-line\n    let favoriteArray = this.props.currentUser.doctors.filter(doctor => doctor.id == this.props.match.params.id)\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1\n      })\n    }\n\n  }\n  \n  state = {\n    favorite: 0\n  }\n\n  favoriteHandler = () => {\n    this.setState({\n      favorite: 0\n    })\n  }\n\n  docCheck = () => {\n    let doc\n    if (this.props.doctors.length > 0) {\n      doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id)\n      if (!!doc) {\n        this.renderDocJsx(doc)\n      }\n    } else {\n      doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id)\n      if (!!doc) {\n        this.renderDocJsx(doc)\n      }\n    }\n  }\n\n\n  componentDidMount() {\n    if (Array.isArray(this.props.currentUser.doctors)) {\n      this.isFavorite()\n    }\n  }\n\n  rate = (e, data, doc) => {\n    this.setState({\n      favorite: data.rating\n    }, () => this.props.heart(doc))\n  }\n\n  render() {\n    let doc\n    doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id)\n\n    if (doc == undefined) {\n      doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id)\n\n    }\n\n    return (\n      <div>\n        <Grid columns={2} textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n          <Grid.Row style={{ maxWidth: 750 }}>\n            <Grid.Column>\n              <Segment >\n                <Header>{doc.first_name ? doc.first_name : doc.firstName} {doc.last_name ? doc.last_name : doc.lastName} {doc.title}</Header>\n                <Divider />\n                <Message>Phone Number: {doc.phone_number}</Message>                \n                <Rating onRate={(e, data) => this.rate(e, data, doc)} icon=\"heart\" rating={this.state.favorite} maxRating={1} size=\"huge\" />\n              </Segment >\n            </Grid.Column>\n            <Grid.Column>\n              <Message>{doc.bio}</Message>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\n// DoctorShow.defaultProps = {\n//   currentUser: {\n//     userDoctors: []\n//   }\n// };\n\nexport default DoctorShow"]},"metadata":{},"sourceType":"module"}