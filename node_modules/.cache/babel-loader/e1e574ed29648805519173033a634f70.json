{"ast":null,"code":"import React from 'react';\nimport axios from 'axios';\nexport const fetchApiDoctors = async payload => {\n  console.log('got here in fetchapi');\n\n  try {\n    let res = await axios.post(`http://localhost:3000/doctors`, payload);\n    return res.data;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n};\nexport const createReviews = async (place_id, doctor_id) => {\n  const reviewPayload = {\n    place_id,\n    doctor_id\n  };\n\n  try {\n    let res = await axios.post('http://localhost:3000/reviews', reviewPayload);\n    return res.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const createPhotos = async (doctor_reference, doctor_id) => {\n  const photoHash = {\n    doctor_id,\n    doctor_reference\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    return res.data;\n  } catch (err) {\n    throw err;\n  }\n};\nwindow.addEventListener('DOMContentLoaded', event => {\n  // Defining pagination variables in parent scope for later\n  let start = 0;\n  let end = 10;\n  let current_page = 1; // Defining body variable in parent scope for use throughout\n\n  let body = document.querySelector('body'); // Creating page title element \n\n  createPageTitle = () => {\n    let title = document.createElement('p');\n    title.className = 'title';\n    title.innerText = 'Release the (Grey)hounds!';\n    body.appendChild(title);\n  };\n\n  createPageTitle(); // Creating page description element\n\n  createPageDesc = () => {\n    let desc = document.createElement('p');\n    desc.className = 'text';\n    desc.innerText = 'Welcome to the Italian Greyhound love fest. Show us your lil hounds.';\n    body.appendChild(desc);\n  };\n\n  createPageDesc(); // Creating a div that will act as a wrapper containing dog image div\n\n  let pageDiv = document.createElement('div');\n\n  createContainerDiv = () => {\n    pageDiv.className = 'page-div';\n    body.appendChild(pageDiv);\n  };\n\n  createContainerDiv(); // Create individual dog thumbnail card\n\n  createPetCard = (url, dogDiv) => {\n    // Dog image wrapped in parent div for styling purposes\n    let petCard = document.createElement('div');\n    petCard.className = 'pet-card';\n    dogDiv.appendChild(petCard);\n    let petImg = document.createElement('img');\n    petImg.src = url;\n    petImg.className = \"pet-img\";\n    petCard.appendChild(petImg);\n  }; // Fetch data from the Italian Greyhound endpoint of Dog CEO API\n  // https://dog.ceo/dog-api/\n\n\n  fetchPets = (start, end) => {\n    fetch(`https://dog.ceo/api/breed/greyhound/italian/images`).then(resp => resp.json()).then(data => {\n      // Creating a div that will hold all dog thumbnail cards\n      // This div is the child of pageDiv wrapper\n      let dogDiv = document.createElement('div');\n      dogDiv.className = 'dog-div';\n      pageDiv.appendChild(dogDiv); // Depending on current page, mapping over subsection of \n      // 10 results to create a thumbnail card of each result\n\n      data.message.slice(start, end).map(url => createPetCard(url, dogDiv));\n    });\n  };\n\n  fetchPets(start, end); // Creating a div to hold page forward and page backwards buttons\n  // Purely for styling purposes\n\n  let buttonDiv = document.createElement('div');\n\n  createNavBtnDiv = () => {\n    buttonDiv.className = 'nav-btn-div';\n    body.appendChild(buttonDiv);\n  };\n\n  createNavBtnDiv(); // Create previous page button\n\n  let backwardBtn = document.createElement('button');\n\n  createBackwardBtn = () => {\n    backwardBtn.className = \"btn\"; // This button has an id for styling purposes\n\n    backwardBtn.id = 'backwards-btn';\n    backwardBtn.dataset.name = 'backward-btn';\n    backwardBtn.innerText = 'Previous Page'; // Button is disabled by default\n\n    backwardBtn.disabled = true;\n    buttonDiv.appendChild(backwardBtn);\n  };\n\n  createBackwardBtn(); // Create forward page button\n\n  let forwardBtn = document.createElement('button');\n\n  createForwardBtn = () => {\n    forwardBtn.className = \"btn\";\n    forwardBtn.dataset.name = 'forward-btn';\n    forwardBtn.innerText = 'Next Page';\n    buttonDiv.appendChild(forwardBtn);\n  };\n\n  createForwardBtn(); // Create a little text element denoting current page number\n\n  let pageRendered = document.createElement('p');\n\n  pageNumber = current_page => {\n    pageRendered.className = 'text';\n    pageRendered.innerText = `Page ${current_page}`;\n    body.appendChild(pageRendered);\n  };\n\n  pageNumber(current_page); // Function to go to next page\n\n  paginateForward = () => {\n    // No more dog images are rendered past page 19\n    // Only able to navigate to next page if current page is less than 19\n    if (current_page < 19) {\n      // As now not on 1st page, backward button functionality is introduced\n      backwardBtn.disabled = false; // Increment current page by 1\n\n      current_page = current_page + 1; // Start and end increased by 10 to grab next 10 dogs\n\n      start = start + 10;\n      end = end + 10; // Clearing pageDiv wrapper of children\n      // New dogDiv with next 10 results will be new child node of pageDiv\n\n      pageDiv.innerHTML = ''; // Fetch request for next 10 results\n\n      fetchPets(start, end); // Render curent page number with new current page\n\n      pageNumber(current_page);\n    } else {\n      // Next page button disabled if on page 19\n      // Else would be able to click through to blank pages, rending no dog images\n      forwardBtn.disabled = true;\n    }\n  }; // Function to go to previous page\n\n\n  paginateBackward = () => {\n    // Only if current page in not the page 1, can move to previous page\n    // Else we would be able to click through to negative page numbers\n    if (current_page > 1) {\n      // Enable previous page button\n      backwardBtn.disabled = false; // Decrement current page by 1\n\n      current_page = current_page - 1; // Start and end decreased by 10 to grab previous 10 dogs\n\n      start = start - 10;\n      end = end - 10;\n      pageDiv.innerHTML = ''; // Fetch previous 10 results & render current page number with new current page\n\n      fetchPets(start, end);\n      pageNumber(current_page);\n    } else {\n      // If current page is first page, previous page button disabled\n      backwardBtn.disabled = true;\n    }\n  }; // Create the modal holding full-size image of dog\n\n\n  let dialog = document.createElement('dialog');\n\n  createModal = photo => {\n    dialog.className = 'modal';\n    document.body.appendChild(dialog); // Create div to hold 'Done' button for styling\n\n    let modalDiv = document.createElement('div');\n    modalDiv.className = 'exit-btn-div';\n    dialog.appendChild(modalDiv); // Create 'Done' button to exit out of modal\n\n    let exitBtn = document.createElement('button');\n    exitBtn.innerText = 'Done';\n    exitBtn.className = 'btn'; // This button has an id for styling\n\n    exitBtn.id = 'exit-btn';\n    exitBtn.dataset.name = 'exit-btn';\n    modalDiv.appendChild(exitBtn);\n    let fullImg = document.createElement('img');\n    fullImg.className = 'full-img';\n    fullImg.src = photo;\n    dialog.appendChild(fullImg);\n  }; // Function open model of desired dog image\n\n\n  openModal = photo => {\n    createModal(photo);\n    dialog.showModal();\n  }; // Function to close modal on pressing 'Done' button\n\n\n  closeModal = () => {\n    dialog.close(); // Clearing inner HTML of modal or else multiple images are \n    // appended to the modal on subsequent clicks\n\n    dialog.innerHTML = '';\n  }; // Single event listener on body uses event delegation\n\n\n  body.addEventListener('click', event => {\n    // On clicking thumbnail\n    if (event.target.className === 'pet-img') {\n      let photo = event.target.src;\n      openModal(photo);\n    } // On clicking next page\n\n\n    if (event.target.dataset.name === 'forward-btn') {\n      paginateForward();\n    } // On clicking previous page\n\n\n    if (event.target.dataset.name === 'backward-btn') {\n      paginateBackward();\n    } // On clicking 'Done' to exit modal\n\n\n    if (event.target.dataset.name === 'exit-btn') {\n      closeModal();\n    }\n  });\n});","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/helpers/helpers.js"],"names":["React","axios","fetchApiDoctors","payload","console","log","res","post","data","err","createReviews","place_id","doctor_id","reviewPayload","error","createPhotos","doctor_reference","photoHash","window","addEventListener","event","start","end","current_page","body","document","querySelector","createPageTitle","title","createElement","className","innerText","appendChild","createPageDesc","desc","pageDiv","createContainerDiv","createPetCard","url","dogDiv","petCard","petImg","src","fetchPets","fetch","then","resp","json","message","slice","map","buttonDiv","createNavBtnDiv","backwardBtn","createBackwardBtn","id","dataset","name","disabled","forwardBtn","createForwardBtn","pageRendered","pageNumber","paginateForward","innerHTML","paginateBackward","dialog","createModal","photo","modalDiv","exitBtn","fullImg","openModal","showModal","closeModal","close","target"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nexport const fetchApiDoctors = async (payload) => {\n  console.log('got here in fetchapi');\n  try {\n    let res = await axios.post(`http://localhost:3000/doctors`, payload);\n    return res.data;\n  } catch (err) {\n    console.log('This is your error:', err);\n    throw err;\n  }\n};\n\nexport const createReviews = async (place_id, doctor_id) => {\n  const reviewPayload = {\n    place_id,\n    doctor_id,\n  };\n\n  try {\n    let res = await axios.post('http://localhost:3000/reviews', reviewPayload);\n    return res.data;\n  } catch (error) {\n\n    throw error;\n  }\n};\n\nexport const createPhotos = async (doctor_reference, doctor_id) => {\n  const photoHash = {\n    doctor_id,\n    doctor_reference,\n  };\n\n  try {\n    let res = await axios.post(`http://localhost:3000/photos`, photoHash);\n    return res.data;\n  } catch (err) {\n\n    throw err;\n  }\n};\n\n\nwindow.addEventListener('DOMContentLoaded', (event) => {\n\n  // Defining pagination variables in parent scope for later\n  let start = 0\n  let end = 10\n  let current_page = 1\n  \n  // Defining body variable in parent scope for use throughout\n  let body = document.querySelector('body')\n  \n  // Creating page title element \n  createPageTitle = () => {\n      let title = document.createElement('p')\n      title.className = 'title'\n      title.innerText = 'Release the (Grey)hounds!'\n      body.appendChild(title)\n  }\n  createPageTitle()\n\n  // Creating page description element\n  createPageDesc = () => {\n      let desc = document.createElement('p')\n      desc.className = 'text'\n      desc.innerText = 'Welcome to the Italian Greyhound love fest. Show us your lil hounds.'\n      body.appendChild(desc)\n  }\n  createPageDesc()\n  \n  // Creating a div that will act as a wrapper containing dog image div\n  let pageDiv = document.createElement('div')\n  createContainerDiv = () => {\n      pageDiv.className = 'page-div'\n      body.appendChild(pageDiv)\n  }\n  createContainerDiv()\n  \n  // Create individual dog thumbnail card\n  createPetCard = (url, dogDiv) => {\n      // Dog image wrapped in parent div for styling purposes\n      let petCard = document.createElement('div')\n      petCard.className = 'pet-card'\n      dogDiv.appendChild(petCard) \n\n      let petImg = document.createElement('img')\n      petImg.src = url \n      petImg.className = \"pet-img\"\n      petCard.appendChild(petImg)\n  }\n\n  // Fetch data from the Italian Greyhound endpoint of Dog CEO API\n  // https://dog.ceo/dog-api/\n  fetchPets = (start, end) => {\n      fetch(`https://dog.ceo/api/breed/greyhound/italian/images`)\n      .then(resp => resp.json())\n      .then(data => {\n          // Creating a div that will hold all dog thumbnail cards\n          // This div is the child of pageDiv wrapper\n          let dogDiv = document.createElement('div')\n          dogDiv.className = 'dog-div'\n          pageDiv.appendChild(dogDiv)\n          // Depending on current page, mapping over subsection of \n          // 10 results to create a thumbnail card of each result\n          data.message.slice(start, end).map( url => createPetCard(url, dogDiv))  \n      })\n  }\n  fetchPets(start, end)\n  \n  // Creating a div to hold page forward and page backwards buttons\n  // Purely for styling purposes\n  let buttonDiv = document.createElement('div')\n  createNavBtnDiv = () => {\n      buttonDiv.className ='nav-btn-div'\n      body.appendChild(buttonDiv) \n  }\n  createNavBtnDiv()\n  \n  // Create previous page button\n  let backwardBtn = document.createElement('button')\n  createBackwardBtn = () => {\n      backwardBtn.className = \"btn\"\n      // This button has an id for styling purposes\n      backwardBtn.id = 'backwards-btn'\n      backwardBtn.dataset.name = 'backward-btn'\n      backwardBtn.innerText = 'Previous Page'\n      // Button is disabled by default\n      backwardBtn.disabled = true\n      buttonDiv.appendChild(backwardBtn)\n  }\n  createBackwardBtn()\n  \n  // Create forward page button\n  let forwardBtn = document.createElement('button')\n  createForwardBtn = () => {\n      forwardBtn.className = \"btn\"\n      forwardBtn.dataset.name = 'forward-btn'\n      forwardBtn.innerText = 'Next Page'\n      buttonDiv.appendChild(forwardBtn)\n  }\n  createForwardBtn()\n\n  // Create a little text element denoting current page number\n  let pageRendered = document.createElement('p')\n  pageNumber = (current_page) => {\n      pageRendered.className = 'text'\n      pageRendered.innerText = `Page ${current_page}`\n      body.appendChild(pageRendered)\n  }\n  pageNumber(current_page)\n\n  // Function to go to next page\n  paginateForward = () => {\n      // No more dog images are rendered past page 19\n      // Only able to navigate to next page if current page is less than 19\n      if(current_page < 19) {\n          // As now not on 1st page, backward button functionality is introduced\n          backwardBtn.disabled = false\n          // Increment current page by 1\n          current_page = current_page + 1\n          // Start and end increased by 10 to grab next 10 dogs\n          start = start + 10\n          end = end + 10\n          // Clearing pageDiv wrapper of children\n          // New dogDiv with next 10 results will be new child node of pageDiv\n          pageDiv.innerHTML = ''\n          \n          // Fetch request for next 10 results\n          fetchPets(start, end)\n          // Render curent page number with new current page\n          pageNumber(current_page)\n\n      } else {\n          // Next page button disabled if on page 19\n          // Else would be able to click through to blank pages, rending no dog images\n          forwardBtn.disabled = true\n      }\n  }\n  \n  // Function to go to previous page\n  paginateBackward = () => {\n      // Only if current page in not the page 1, can move to previous page\n      // Else we would be able to click through to negative page numbers\n      if (current_page > 1) {\n          // Enable previous page button\n          backwardBtn.disabled = false\n          // Decrement current page by 1\n          current_page = current_page - 1\n          // Start and end decreased by 10 to grab previous 10 dogs\n          start = start - 10\n          end = end - 10\n          pageDiv.innerHTML = ''\n          \n          // Fetch previous 10 results & render current page number with new current page\n          fetchPets(start, end)\n          pageNumber(current_page)\n      } else {\n          // If current page is first page, previous page button disabled\n          backwardBtn.disabled = true\n      }\n  }\n  \n  // Create the modal holding full-size image of dog\n  let dialog = document.createElement('dialog');\n  createModal = (photo) => {\n      dialog.className = 'modal'\n      document.body.appendChild(dialog);\n      \n      // Create div to hold 'Done' button for styling\n      let modalDiv = document.createElement('div')\n      modalDiv.className = 'exit-btn-div'\n      dialog.appendChild(modalDiv)\n\n      // Create 'Done' button to exit out of modal\n      let exitBtn = document.createElement('button')\n      exitBtn.innerText = 'Done'\n      exitBtn.className = 'btn' \n      // This button has an id for styling\n      exitBtn.id = 'exit-btn'\n      exitBtn.dataset.name = 'exit-btn'\n      modalDiv.appendChild(exitBtn)\n\n      let fullImg = document.createElement('img')\n      fullImg.className = 'full-img'\n      fullImg.src = photo\n      dialog.appendChild(fullImg)\n  }\n\n  // Function open model of desired dog image\n  openModal = (photo) => {\n      createModal(photo)\n      dialog.showModal();\n  }\n\n  // Function to close modal on pressing 'Done' button\n  closeModal = () => {\n      dialog.close()\n      // Clearing inner HTML of modal or else multiple images are \n      // appended to the modal on subsequent clicks\n      dialog.innerHTML = ''\n  }\n\n  // Single event listener on body uses event delegation\n  body.addEventListener('click', (event) => {\n      // On clicking thumbnail\n      if(event.target.className === 'pet-img') {\n          let photo = event.target.src\n          openModal(photo)\n      }\n      // On clicking next page\n      if(event.target.dataset.name === 'forward-btn') {\n          paginateForward()\n\n      }\n      // On clicking previous page\n      if(event.target.dataset.name === 'backward-btn') {\n          paginateBackward()\n      }\n      // On clicking 'Done' to exit modal\n      if(event.target.dataset.name === 'exit-btn') {\n          closeModal()\n      }\n  })\n})\n\n"]},"metadata":{},"sourceType":"module"}