{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js\";\nimport { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\nimport React, { Component } from 'react';\nexport default class SearchIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.loadSearchIndex = async () => {// this.props.loadUser();\n      // const index = [];\n      // debugger\n      // const searchId = parseInt(this.props.match.params.searchId) ;\n      // const userId = parseInt(this.props.match.params.userId);\n      // // if (userId !== this.props.currentUser.id)\n      // //   this.props.history.push('/search');\n      // const searches = this.props.currentUser.searches;\n      // let csv = searches.find(id => searchId === id).csv;\n      // csv = csv.split(',');\n      // csv.pop();\n      // await csv.map(async (id) => {\n      //   // console.log(id);\n      //   let doctorId = parseInt(id);\n      //   let res = await Axios.get(`http://localhost:3000/doctors/${doctorId}`);\n      //   let doc = res.data;\n      //   // console.log(doc);\n      //   index.push(doc);\n      //   this.props.setSearchIndex(index);\n      // });\n    };\n\n    this.displayDoctors = () => {\n      return this.props.searchIndex.map(doctor => React.createElement(DoctorCard, {\n        currentUser: this.props.currentUser,\n        getDoctorById: this.props.getDoctorById,\n        key: doctor.id,\n        doctor: doctor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }));\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.loadUser();\n    this.loadSearchIndex();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, ' ', React.createElement(Grid, {\n      container: true,\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      style: {\n        maxHeight: '35em',\n        padding: '3em'\n      },\n      display: \"flex\",\n      \"justify-content\": \"center\",\n      itemsPerRow: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.displayDoctors())));\n  }\n\n}","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js"],"names":["Card","Grid","DoctorCard","Axios","React","Component","SearchIndex","loadSearchIndex","displayDoctors","props","searchIndex","map","doctor","currentUser","getDoctorById","id","componentDidMount","loadUser","render","height","maxHeight","padding"],"mappings":";AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAAA;AAAA;;AAAA,SACjDE,eADiD,GAC/B,YAAY,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD,KAxBgD;;AAAA,SA0BjDC,cA1BiD,GA0BhC,MAAM;AACrB,aAAO,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,GAAvB,CAA4BC,MAAD,IAChC,oBAAC,UAAD;AACE,QAAA,WAAW,EAAE,KAAKH,KAAL,CAAWI,WAD1B;AAEE,QAAA,aAAa,EAAE,KAAKJ,KAAL,CAAWK,aAF5B;AAGE,QAAA,GAAG,EAAEF,MAAM,CAACG,EAHd;AAIE,QAAA,MAAM,EAAEH,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,CAAP;AAQD,KAnCgD;AAAA;;AAqCjD,QAAMI,iBAAN,GAA0B;AACxB,UAAM,KAAKP,KAAL,CAAWQ,QAAX,EAAN;AACA,SAAKV,eAAL;AACD;;AACDW,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,EAEE,oBAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EAAC,QAFZ;AAGE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAHT;AAIE,MAAA,aAAa,EAAC,QAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,IAAD,CAAM,KAAN;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,MAAb;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OADT;AAEE,MAAA,OAAO,EAAC,MAFV;AAGE,yBAAgB,QAHlB;AAIE,MAAA,WAAW,EAAE,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKb,cAAL,EANH,CANF,CAFF,CADF;AAoBD;;AA9DgD","sourcesContent":["import { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\n\nimport React, { Component } from 'react';\n\nexport default class SearchIndex extends Component {\n  loadSearchIndex = async () => {\n    // this.props.loadUser();\n    // const index = [];\n    // debugger\n    // const searchId = parseInt(this.props.match.params.searchId) ;\n    // const userId = parseInt(this.props.match.params.userId);\n    // // if (userId !== this.props.currentUser.id)\n    // //   this.props.history.push('/search');\n    // const searches = this.props.currentUser.searches;\n\n    // let csv = searches.find(id => searchId === id).csv;\n    // csv = csv.split(',');\n    // csv.pop();\n    // await csv.map(async (id) => {\n    //   // console.log(id);\n    //   let doctorId = parseInt(id);\n    //   let res = await Axios.get(`http://localhost:3000/doctors/${doctorId}`);\n    //   let doc = res.data;\n\n    //   // console.log(doc);\n    //   index.push(doc);\n    //   this.props.setSearchIndex(index);\n    // });\n  };\n\n  displayDoctors = () => {\n    return this.props.searchIndex.map((doctor) => (\n      <DoctorCard\n        currentUser={this.props.currentUser}\n        getDoctorById={this.props.getDoctorById}\n        key={doctor.id}\n        doctor={doctor}\n      />\n    ));\n  };\n\n  async componentDidMount() {\n    await this.props.loadUser();\n    this.loadSearchIndex();\n  }\n  render() {\n    return (\n      <div>\n        {' '}\n        <Grid\n          container\n          textAlign='center'\n          style={{ height: '100vh' }}\n          verticalAlign='middle'\n        >\n          <Card.Group\n            style={{ maxHeight: '35em', padding: '3em' }}\n            display='flex'\n            justify-content='center'\n            itemsPerRow={3}\n          >\n            {this.displayDoctors()}\n          </Card.Group>\n        </Grid>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}