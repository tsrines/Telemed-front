{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js\";\nimport { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\nimport React, { Component } from 'react';\nexport default class SearchIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.loadSearchIndex = async () => {\n      // this.props.loadUser();\n      const index = []; // debugger;\n\n      const searchId = parseInt(this.props.match.params.searchId);\n      const searches = this.props.currentUser.searches;\n\n      try {\n        let csv = searches.find(search => searchId === search.id).csv;\n        csv = csv.split(',');\n        await csv.map(async id => {\n          // console.log(id);\n          let doctorId = parseInt(id);\n          let res = await Axios.get(`http://localhost:3000/doctors/${doctorId}`);\n          let doc = res.data; // console.log(doc);\n\n          index.push(doc);\n          this.props.setSearchIndex(index);\n        });\n      } catch (err) {\n        alert('Something went wrong, please search again');\n        this.props.history.push('/search');\n        console.log(err);\n        throw err;\n      }\n    };\n\n    this.displayDoctors = () => {\n      // this.props.loadingHandler(false)\n      let sortedIndex = [...this.props.searchIndex].sort((a, b) => a.id - b.id);\n      return sortedIndex.map(doctor => React.createElement(DoctorCard, {\n        currentUser: this.props.currentUser,\n        getDoctorById: this.props.getDoctorById,\n        key: doctor.id,\n        doctor: doctor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }));\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.loadUser();\n    await this.loadSearchIndex();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, ' ', React.createElement(Grid, {\n      container: true,\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      style: {\n        maxHeight: '35em',\n        padding: '3em'\n      },\n      display: \"flex\",\n      \"justify-content\": \"center\",\n      itemsPerRow: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.displayDoctors())));\n  }\n\n}","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/containers/SearchIndex.js"],"names":["Card","Grid","DoctorCard","Axios","React","Component","SearchIndex","loadSearchIndex","index","searchId","parseInt","props","match","params","searches","currentUser","csv","find","search","id","split","map","doctorId","res","get","doc","data","push","setSearchIndex","err","alert","history","console","log","displayDoctors","sortedIndex","searchIndex","sort","a","b","doctor","getDoctorById","componentDidMount","loadUser","render","height","maxHeight","padding"],"mappings":"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","sourcesContent":["import { Card, Grid } from 'semantic-ui-react';\nimport DoctorCard from '../components/DoctorCard';\nimport Axios from 'axios';\n\nimport React, { Component } from 'react';\n\nexport default class SearchIndex extends Component {\n  loadSearchIndex = async () => {\n    // this.props.loadUser();\n    const index = [];\n    // debugger;\n    const searchId = parseInt(this.props.match.params.searchId);\n\n    const searches = this.props.currentUser.searches;\n    try {\n      let csv = searches.find((search) => searchId === search.id).csv;\n      csv = csv.split(',');\n\n      await csv.map(async (id) => {\n        // console.log(id);\n        let doctorId = parseInt(id);\n        let res = await Axios.get(`http://localhost:3000/doctors/${doctorId}`);\n        let doc = res.data;\n\n        // console.log(doc);\n        index.push(doc);\n\n        this.props.setSearchIndex(index);\n      });\n    } catch (err) {\n      alert('Something went wrong, please search again');\n      this.props.history.push('/search');\n      console.log(err);\n      throw err;\n    }\n  };\n\n  displayDoctors = () => {\n    // this.props.loadingHandler(false)\n    let sortedIndex = [...this.props.searchIndex].sort((a, b) => a.id - b.id);\n    return sortedIndex.map((doctor) => (\n      <DoctorCard\n        currentUser={this.props.currentUser}\n        getDoctorById={this.props.getDoctorById}\n        key={doctor.id}\n        doctor={doctor}\n      />\n    ));\n  };\n\n  async componentDidMount() {\n    await this.props.loadUser();\n    await this.loadSearchIndex();\n  }\n  render() {\n    return (\n      <div>\n        {' '}\n        <Grid\n          container\n          textAlign='center'\n          style={{ height: '100vh' }}\n          verticalAlign='middle'\n        >\n          <Card.Group\n            style={{ maxHeight: '35em', padding: '3em' }}\n            display='flex'\n            justify-content='center'\n            itemsPerRow={3}\n          >\n            {this.displayDoctors()}\n          </Card.Group>\n        </Grid>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}