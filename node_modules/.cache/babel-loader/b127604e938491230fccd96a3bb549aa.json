{"ast":null,"code":"import _classCallCheck from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/rines/Development/code/mod5/Telemed/Telemed-front/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import{Grid,Rating,Header,Message,Button,Divider,Segment}from'semantic-ui-react';var DoctorShow=/*#__PURE__*/function(_React$Component){_inherits(DoctorShow,_React$Component);function DoctorShow(){var _getPrototypeOf2;var _this;_classCallCheck(this,DoctorShow);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(DoctorShow)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.isFavorite=function(){var favoriteArray=_this.props.currentUser.doctors.filter(function(doctor){return doctor.id==_this.props.match.params.id;});if(favoriteArray.length>0){_this.setState({favorite:1});}// debugger\n};_this.state={favorite:0};_this.favoriteHandler=function(){_this.setState({favorite:0});};_this.docCheck=function(){var doc;if(_this.props.doctors.length>0){doc=_this.props.doctors.find(function(doctor){return doctor.id==_this.props.match.params.id;});if(!!doc){_this.renderDocJsx(doc);}}else{doc=_this.props.currentUser.doctors.find(function(doctor){return doctor.id==_this.props.match.params.id;});if(!!doc){_this.renderDocJsx(doc);}}};_this.rate=function(e,data,doc){_this.setState({favorite:data.rating},function(){return _this.props.heart(doc);});};return _this;}_createClass(DoctorShow,[{key:\"componentDidMount\",value:function componentDidMount(){if(Array.isArray(this.props.currentUser.doctors)){this.isFavorite();}}},{key:\"render\",value:function render(){var _this2=this;var doc;doc=this.props.currentUser.doctors.find(function(doctor){return doctor.id==_this2.props.match.params.id;});console.log(\"doc after currentUser find:\",doc);if(doc==undefined){doc=this.props.doctors.find(function(doctor){return doctor.id==_this2.props.match.params.id;});console.log(\"doc after doctor find:\",doc);}// if (doc === undefined){\n// console.log(\"before push\", doc)\n// this.props.history.push('/profile')\n// debugger\n// }\n// console.log(\"this.props.doctors \", this.props.doctors)\n// console.log(\"this.props.match \", this.props.match)\n// console.log(\"this.props.match.params.id: \", this.props.match.params.id)\n// console.log(\"doc: \", doc)\n// console.log(\"this.props.currentUser\", this.props.currentUser)\n// debugger\nreturn(// <div>Hello</div>\nReact.createElement(\"div\",null,React.createElement(Grid,{columns:2,textAlign:\"center\",style:{height:'100vh'},verticalAlign:\"middle\"},React.createElement(Grid.Row,{style:{maxWidth:750}},React.createElement(Grid.Column,null,React.createElement(Segment,null,React.createElement(Header,null,doc.first_name?doc.first_name:doc.firstName,\" \",doc.last_name?doc.last_name:doc.lastName,\" \",doc.title),React.createElement(Divider,null),React.createElement(Message,null,\"Phone Number: \",doc.phone_number),React.createElement(Rating,{onRate:function onRate(e,data){return _this2.rate(e,data,doc);},icon:\"heart\",rating:this.state.favorite,maxRating:1,size:\"huge\"}))),React.createElement(Grid.Column,null,React.createElement(Message,null,doc.bio))))));}}]);return DoctorShow;}(React.Component);// DoctorShow.defaultProps = {\n//   currentUser: {\n//     userDoctors: []\n//   }\n// };\nexport default DoctorShow;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/DoctorShow.js"],"names":["React","Grid","Rating","Header","Message","Button","Divider","Segment","DoctorShow","isFavorite","favoriteArray","props","currentUser","doctors","filter","doctor","id","match","params","length","setState","favorite","state","favoriteHandler","docCheck","doc","find","renderDocJsx","rate","e","data","rating","heart","Array","isArray","console","log","undefined","height","maxWidth","first_name","firstName","last_name","lastName","title","phone_number","bio","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Grid, Rating, Header, Message, Button, Divider, Segment } from 'semantic-ui-react'\n\n\n\nclass DoctorShow extends React.Component {\n\n  // sendEmail = () => {\n\n  //   emailjs.sendForm('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', e.target, 'YOUR_USER_ID')\n  //     .then((result) => {\n  //       console.log(result.text);\n  //     }, (error) => {\n  //       console.log(error.text)\n  //       this.props.history.push('/video');\n  //     });\n  // }\n\n\n  isFavorite = () => {\n\n\n    let favoriteArray = this.props.currentUser.doctors.filter(doctor => doctor.id == this.props.match.params.id)\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1\n      })\n    }\n    // debugger\n  }\n  // let apiDoc = this.props.apiDoctors.find(doctor => doctor.uid === this.props.match.params.id)\n  // if (Array.isArray(this.props.currentUser.userDoctors) && this.props.currentUser.userDoctors.length > 0) {\n  //   let doctorArray = this.props.currentUser.userDoctors.filter(doctor => doctor.api_id === apiDoc.uid)\n\n  //   if (doctorArray.length === 1) {\n  //     this.setState({\n  //       favorite: 1\n  //     })\n  //   }\n  // }\n\n\n  state = {\n    favorite: 0\n  }\n\n  favoriteHandler = () => {\n    this.setState({\n      favorite: 0\n    })\n  }\n\n  docCheck = () => {\n    let doc\n    if (this.props.doctors.length > 0) {\n      doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id)\n      if (!!doc) {\n        this.renderDocJsx(doc)\n      }\n    } else {\n      doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id)\n      if (!!doc) {\n        this.renderDocJsx(doc)\n      }\n    }\n  }\n\n\n  componentDidMount() {\n    if (Array.isArray(this.props.currentUser.doctors)) {\n      this.isFavorite()\n    }\n  }\n\n  rate = (e, data, doc) => {\n    this.setState({\n      favorite: data.rating\n    }, () => this.props.heart(doc))\n  }\n\n  render() {\n    let doc\n    doc = this.props.currentUser.doctors.find(doctor => doctor.id == this.props.match.params.id)\n    console.log(\"doc after currentUser find:\", doc)\n    if (doc == undefined) {\n      doc = this.props.doctors.find(doctor => doctor.id == this.props.match.params.id)\n      console.log(\"doc after doctor find:\", doc)\n    }\n    // if (doc === undefined){\n    // console.log(\"before push\", doc)\n\n    // this.props.history.push('/profile')\n    // debugger\n    // }\n\n\n\n\n    // console.log(\"this.props.doctors \", this.props.doctors)\n    // console.log(\"this.props.match \", this.props.match)\n    // console.log(\"this.props.match.params.id: \", this.props.match.params.id)\n    // console.log(\"doc: \", doc)\n\n    // console.log(\"this.props.currentUser\", this.props.currentUser)\n    // debugger\n\n\n\n\n    return (\n      // <div>Hello</div>\n\n      <div>\n        <Grid columns={2} textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n          <Grid.Row style={{ maxWidth: 750 }}>\n            <Grid.Column>\n              <Segment >\n                <Header>{doc.first_name ? doc.first_name : doc.firstName} {doc.last_name ? doc.last_name : doc.lastName} {doc.title}</Header>\n                <Divider />\n                <Message>Phone Number: {doc.phone_number}</Message>                \n                <Rating onRate={(e, data) => this.rate(e, data, doc)} icon=\"heart\" rating={this.state.favorite} maxRating={1} size=\"huge\" />\n              </Segment >\n            </Grid.Column>\n            <Grid.Column>\n              <Message>{doc.bio}</Message>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\n// DoctorShow.defaultProps = {\n//   currentUser: {\n//     userDoctors: []\n//   }\n// };\n\nexport default DoctorShow"]},"metadata":{},"sourceType":"module"}