{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport { fetchApiDoctors, createReviews, createPhotos, getDoctors } from './helpers/helpers';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: '',\n        email: '',\n        address: '',\n        password: '',\n        passwordConfirmation: '',\n        firstName: '',\n        lastName: '',\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      searchedDocs: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.googleSearch = async payload => {\n      const apidocs = await fetchApiDoctors(payload);\n      this.setState({\n        searchedDocs: apidocs\n      });\n      await apidocs.forEach(async doc => {\n        let reviews = await createReviews(doc.place_id, doc.id);\n\n        if (reviews) {\n          doc.reviews = reviews;\n        }\n      });\n      await apidocs.forEach(async doc => {\n        let photos = await createPhotos(doc.place_id, doc.id);\n\n        if (photos) {\n          doc.photos = photos;\n        }\n      });\n      const doctors = await getDoctors();\n      const searchedDocs = doctors.filter(doc => apidocs.includes(doc.id));\n      console.log(searchedDocs);\n      console.log(doctors);\n      debugger;\n      this.setState({\n        doctors,\n        searchedDocs\n      });\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter(doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find(favorite => favorite.api_id == doctor.api_id);\n\n      if (typeof favorite == 'object') {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      // debugger\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      fetch(`https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch('https://cryptic-island-45793.herokuapp.com/favorites', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      fetch('https://cryptic-island-45793.herokuapp.com/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch('https://cryptic-island-45793.herokuapp.com' + `/users/${this.state.currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    console.log('THIS.STATE FROM APP', this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({\n        createDoctor: this.createDoctor\n      }, routerProps, {\n        doctors: this.state.doctors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        googleSearch: this.googleSearch,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Switch","withRouter","Button","Image","DoctorShow","Doctors","Login","Profile","Search","fetchApiDoctors","createReviews","createPhotos","getDoctors","App","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","searchedDocs","error","apiDoctors","users","googleSearch","payload","apidocs","setState","forEach","doc","reviews","place_id","photos","filter","includes","console","log","isFavorite","favoriteArray","doctor","api_id","props","match","params","length","heart","find","unHeart","fetch","method","then","resp","json","data","favoriteObject","user_id","doctor_id","headers","accepts","body","JSON","stringify","newdoc","first_name","last_name","title","gender","bio","phone_number","onSubmit","formData","logInOrSignUp","password_confirmation","history","push","userProfile","logOut","onSignUp","isResolved","loadingHandler","patchUser","userData","searchButton","alert","componentDidMount","render","routerProps","createDoctor","rate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,UAAxB,QAA0C,kBAA1C;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,mBAA9B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,WAAP;AACA,SACEC,eADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,UAJF,QAKO,mBALP;;AAOA,MAAMC,GAAN,SAAkBf,KAAK,CAACgB,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,SAAS,EAAE,KADL;AAENC,MAAAA,UAAU,EAAE,KAFN;AAGNC,MAAAA,QAAQ,EAAE,KAHJ;AAINC,MAAAA,QAAQ,EAAE,CAJJ;AAKNC,MAAAA,WAAW,EAAE;AACXC,QAAAA,EAAE,EAAE,EADO;AAEXC,QAAAA,KAAK,EAAE,EAFI;AAGXC,QAAAA,OAAO,EAAE,EAHE;AAIXC,QAAAA,QAAQ,EAAE,EAJC;AAKXC,QAAAA,oBAAoB,EAAE,EALX;AAMXC,QAAAA,SAAS,EAAE,EANA;AAOXC,QAAAA,QAAQ,EAAE,EAPC;AAQXC,QAAAA,OAAO,EAAE,EARE;AASXC,QAAAA,SAAS,EAAE;AATA,OALP;AAgBNC,MAAAA,GAAG,EAAE,CAhBC;AAiBNC,MAAAA,GAAG,EAAE,CAjBC;AAkBNH,MAAAA,OAAO,EAAE,EAlBH;AAmBNI,MAAAA,YAAY,EAAE,EAnBR;AAoBNC,MAAAA,KAAK,EAAE,KApBD;AAqBNC,MAAAA,UAAU,EAAE,EArBN;AAsBNC,MAAAA,KAAK,EAAE;AAtBD,KADwB;;AAAA,SA0BhCC,YA1BgC,GA0BjB,MAAOC,OAAP,IAAmB;AAChC,YAAMC,OAAO,GAAG,MAAM7B,eAAe,CAAC4B,OAAD,CAArC;AACA,WAAKE,QAAL,CAAc;AAACP,QAAAA,YAAY,EAAEM;AAAf,OAAd;AACA,YAAMA,OAAO,CAACE,OAAR,CAAgB,MAAOC,GAAP,IAAe;AACnC,YAAIC,OAAO,GAAG,MAAMhC,aAAa,CAAC+B,GAAG,CAACE,QAAL,EAAeF,GAAG,CAACpB,EAAnB,CAAjC;;AACA,YAAIqB,OAAJ,EAAa;AACXD,UAAAA,GAAG,CAACC,OAAJ,GAAcA,OAAd;AACD;AAEF,OANK,CAAN;AAOA,YAAMJ,OAAO,CAACE,OAAR,CAAgB,MAAOC,GAAP,IAAe;AACnC,YAAIG,MAAM,GAAG,MAAMjC,YAAY,CAAC8B,GAAG,CAACE,QAAL,EAAeF,GAAG,CAACpB,EAAnB,CAA/B;;AACA,YAAIuB,MAAJ,EAAY;AACVH,UAAAA,GAAG,CAACG,MAAJ,GAAaA,MAAb;AACD;AAEF,OANK,CAAN;AAQA,YAAMhB,OAAO,GAAG,MAAMhB,UAAU,EAAhC;AACA,YAAMoB,YAAY,GAAGJ,OAAO,CAACiB,MAAR,CAAgBJ,GAAD,IAASH,OAAO,CAACQ,QAAR,CAAiBL,GAAG,CAACpB,EAArB,CAAxB,CAArB;AACA0B,MAAAA,OAAO,CAACC,GAAR,CAAYhB,YAAZ;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYpB,OAAZ;AACA;AACA,WAAKW,QAAL,CAAc;AAAEX,QAAAA,OAAF;AAAWI,QAAAA;AAAX,OAAd;AACD,KAlD+B;;AAAA,SAoDhCiB,UApDgC,GAoDnB,MAAM;AACjB,UAAIC,aAAa,GAAG,KAAKnC,KAAL,CAAWK,WAAX,CAAuBQ,OAAvB,CAA+BiB,MAA/B,CACjBM,MAAD,IAAYA,MAAM,CAACC,MAAP,IAAiB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBlC,EADnC,CAApB;;AAGA,UAAI6B,aAAa,CAACM,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,aAAKjB,QAAL,CAAc;AACZpB,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGD;AACF,KA7D+B;;AAAA,SA+DhCsC,KA/DgC,GA+DvBN,MAAD,IAAY;AAClB,UAAIhC,QAAQ,GAAG,KAAKJ,KAAL,CAAWK,WAAX,CAAuBS,SAAvB,CAAiC6B,IAAjC,CACZvC,QAAD,IAAcA,QAAQ,CAACiC,MAAT,IAAmBD,MAAM,CAACC,MAD3B,CAAf;;AAIA,UAAI,OAAOjC,QAAP,IAAmB,QAAvB,EAAiC;AAC/B,aAAKwC,OAAL,CAAaxC,QAAb;AACD,OAFD,MAEO;AACL,aAAKA,QAAL,CAAcgC,MAAd;AACD;AACF,KAzE+B;;AAAA,SA2EhCQ,OA3EgC,GA2ErBxC,QAAD,IAAc;AACtB;AAEA;AACAyC,MAAAA,KAAK,CACF,wDAAuDzC,QAAQ,CAACE,EAAG,EADjE,EAEH;AACEwC,QAAAA,MAAM,EAAE;AADV,OAFG,CAAL,CAMGC,IANH,CAMSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EANlB,EAOGF,IAPH,CAOSG,IAAD,IAAU;AACd,YAAIpC,SAAS,GAAG,KAAKd,KAAL,CAAWK,WAAX,CAAuBS,SAAvB,CAAiCgB,MAAjC,CACb1B,QAAD,IAAcA,QAAQ,CAACE,EAAT,KAAgB4C,IAAI,CAAC5C,EADrB,CAAhB;AAGA,YAAIO,OAAO,GAAG,KAAKb,KAAL,CAAWK,WAAX,CAAuBQ,OAAvB,CAA+BiB,MAA/B,CACXM,MAAD,IAAYA,MAAM,CAACC,MAAP,KAAkBa,IAAI,CAACb,MADvB,CAAd;AAGA,aAAKb,QAAL,CAAc,EACZ,GAAG,KAAKxB,KADI;AAEZI,UAAAA,QAAQ,EAAE,CAFE;AAGZS,UAAAA,OAAO,EAAE,CAACqC,IAAI,CAACd,MAAN,EAAc,GAAG,KAAKpC,KAAL,CAAWa,OAA5B,CAHG;AAIZR,UAAAA,WAAW,EAAE,EACX,GAAG,KAAKL,KAAL,CAAWK,WADH;AAEXS,YAAAA,SAAS,EAAEA,SAFA;AAGXD,YAAAA,OAAO,EAAEA;AAHE;AAJD,SAAd;AAUD,OAxBH;AAyBD,KAxG+B;;AAAA,SA0GhCT,QA1GgC,GA0GpBgC,MAAD,IAAY;AACrB,UAAIe,cAAc,GAAG;AACnBC,QAAAA,OAAO,EAAE,KAAKpD,KAAL,CAAWK,WAAX,CAAuBC,EADb;AAEnB+C,QAAAA,SAAS,EAAEjB,MAAM,CAAC9B,EAFC;AAGnB+B,QAAAA,MAAM,EAAED,MAAM,CAACC;AAHI,OAArB;AAMAQ,MAAAA,KAAK,CAAC,sDAAD,EAAyD;AAC5DC,QAAAA,MAAM,EAAE,MADoD;AAE5DQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAFmD;AAM5DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,cAAf;AANsD,OAAzD,CAAL,CAQGJ,IARH,CAQSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EARlB,EASGF,IATH,CASSG,IAAD,IAAU;AACd,YAAIpC,SAAS,GAAG,CAAC,GAAG,KAAKd,KAAL,CAAWK,WAAX,CAAuBS,SAA3B,CAAhB;AACA,YAAID,OAAO,GAAG,CAAC,GAAG,KAAKb,KAAL,CAAWK,WAAX,CAAuBQ,OAA3B,CAAd;AAEA,YAAI8C,MAAM,GAAG;AACXrD,UAAAA,EAAE,EAAE4C,IAAI,CAACG,SADE;AAEXhB,UAAAA,MAAM,EAAED,MAAM,CAACC,MAFJ;AAGXuB,UAAAA,UAAU,EAAExB,MAAM,CAACwB,UAHR;AAIXC,UAAAA,SAAS,EAAEzB,MAAM,CAACyB,SAJP;AAKXC,UAAAA,KAAK,EAAE1B,MAAM,CAAC0B,KALH;AAMXC,UAAAA,MAAM,EAAE3B,MAAM,CAAC2B,MANJ;AAOXC,UAAAA,GAAG,EAAE5B,MAAM,CAAC4B,GAPD;AAQXC,UAAAA,YAAY,EAAE7B,MAAM,CAAC6B;AARV,SAAb,CAJc,CAed;;AACA,aAAKzC,QAAL,CAAc,EACZ,GAAG,KAAKxB,KADI;AAEZI,UAAAA,QAAQ,EAAE,CAFE;AAGZC,UAAAA,WAAW,EAAE,EACX,GAAG,KAAKL,KAAL,CAAWK,WADH;AAEXS,YAAAA,SAAS,EAAE,CAACoC,IAAD,EAAO,GAAGpC,SAAV,CAFA;AAGXD,YAAAA,OAAO,EAAE,CAAC8C,MAAD,EAAS,GAAG9C,OAAZ;AAHE;AAHD,SAAd;AASD,OAlCH;AAmCD,KApJ+B;;AAAA,SAsJhCqD,QAtJgC,GAsJpBC,QAAD,IAAc;AACvB,WAAKC,aAAL,CAAmBD,QAAnB;AACD,KAxJ+B;;AAAA,SA0JhCC,aA1JgC,GA0JfD,QAAD,IAAc;AAC5BtB,MAAAA,KAAK,CAAC,kDAAD,EAAqD;AACxDC,QAAAA,MAAM,EAAE,MADgD;AAExDQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAF+C;AAMxDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBnD,UAAAA,KAAK,EAAE4D,QAAQ,CAAC5D,KADG;AAEnBE,UAAAA,QAAQ,EAAE0D,QAAQ,CAAC1D,QAFA;AAGnB4D,UAAAA,qBAAqB,EAAEF,QAAQ,CAACzD;AAHb,SAAf;AANkD,OAArD,CAAL,CAYGqC,IAZH,CAYSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EAZlB,EAaGF,IAbH,CAaSG,IAAD,IAAU;AACd,aAAK1B,QAAL,CACE,EACE,GAAG,KAAKxB,KADV;AAEEK,UAAAA,WAAW,EAAE;AACXC,YAAAA,EAAE,EAAE4C,IAAI,CAAC5C,EADE;AAEXC,YAAAA,KAAK,EAAE2C,IAAI,CAAC3C,KAFD;AAGXC,YAAAA,OAAO,EAAE0C,IAAI,CAAC1C,OAHH;AAIXC,YAAAA,QAAQ,EAAEyC,IAAI,CAACzC,QAJJ;AAKXC,YAAAA,oBAAoB,EAAEwC,IAAI,CAACmB,qBALhB;AAMX1D,YAAAA,SAAS,EAAEuC,IAAI,CAACU,UANL;AAOXhD,YAAAA,QAAQ,EAAEsC,IAAI,CAACW,SAPJ;AAQXhD,YAAAA,OAAO,EAAEqC,IAAI,CAACrC,OARH;AASXC,YAAAA,SAAS,EAAEoC,IAAI,CAACpC;AATL,WAFf;AAaEZ,UAAAA,UAAU,EAAE;AAbd,SADF,EAgBE,MAAM,KAAKoC,KAAL,CAAWgC,OAAX,CAAmBC,IAAnB,CAAwB,SAAxB,CAhBR;AAkBD,OAhCH;AAiCD,KA5L+B;;AAAA,SA8LhCC,WA9LgC,GA8LlB,MAAM;AAClB,UAAIlE,EAAE,GAAG,KAAKN,KAAL,CAAWK,WAAX,CAAuBC,EAAhC;AACAuC,MAAAA,KAAK,CAAE,oDAAmDvC,EAAG,EAAxD,CAAL,CACGyC,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,aAAK1B,QAAL,CACE,EACE,GAAG,KAAKxB,KADV;AAEEK,UAAAA,WAAW,EAAE,EACX,GAAG,KAAKL,KAAL,CAAWK,WADH;AAEXQ,YAAAA,OAAO,EAAEqC,IAAI,CAACrC;AAFH;AAFf,SADF,EAQE,MAAM;AACJ,eAAKyB,KAAL,CAAWgC,OAAX,CAAmBC,IAAnB,CAAwB,UAAxB;AACD,SAVH;AAYD,OAfH;AAgBD,KAhN+B;;AAAA,SAkNhCE,MAlNgC,GAkNvB,MAAM;AACb,WAAKnC,KAAL,CAAWgC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACA,WAAK/C,QAAL,CAAc;AAAEtB,QAAAA,UAAU,EAAE,KAAd;AAAqBG,QAAAA,WAAW,EAAE,EAAlC;AAAsCQ,QAAAA,OAAO,EAAE;AAA/C,OAAd;AACD,KArN+B;;AAAA,SAuNhC6D,QAvNgC,GAuNrB,MAAM;AACf,WAAKlD,QAAL,CAAc;AAAErB,QAAAA,QAAQ,EAAE,CAAC,KAAKH,KAAL,CAAWG;AAAxB,OAAd;AACD,KAzN+B;;AAAA,SA6NhCwE,UA7NgC,GA6NnB,MAAM;AACjB,UAAI,KAAK3E,KAAL,CAAWmB,UAAX,CAAsBsB,MAAtB,GAA+B,CAAnC,EAAsC;AACpC,aAAKjB,QAAL,CAAc;AAAEN,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD,OAFD,MAEO;AACL,aAAKM,QAAL,CAAc;AAAEN,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD;AACF,KAnO+B;;AAAA,SAqOhC0D,cArOgC,GAqOf,MAAM;AACrB,WAAKpD,QAAL,CAAc;AAAEvB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAvO+B;;AAAA,SAyOhC4E,SAzOgC,GAyOnBC,QAAD,IAAc;AACxBjC,MAAAA,KAAK,CACH,+CACG,UAAS,KAAK7C,KAAL,CAAWK,WAAX,CAAuBC,EAAG,EAFnC,EAGH;AACEwC,QAAAA,MAAM,EAAE,OADV;AAEEQ,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAFX;AAMEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBnD,UAAAA,KAAK,EAAEuE,QAAQ,CAACvE,KADG;AAEnBE,UAAAA,QAAQ,EAAEqE,QAAQ,CAACrE,QAFA;AAGnB4D,UAAAA,qBAAqB,EAAES,QAAQ,CAACpE,oBAHb;AAInBkD,UAAAA,UAAU,EAAEkB,QAAQ,CAACnE,SAJF;AAKnBkD,UAAAA,SAAS,EAAEiB,QAAQ,CAAClE,QALD;AAMnBJ,UAAAA,OAAO,EAAEsE,QAAQ,CAACtE;AANC,SAAf;AANR,OAHG,CAAL,CAmBGuC,IAnBH,CAmBSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EAnBlB,EAoBGF,IApBH,CAoBSG,IAAD,IACJ,KAAK1B,QAAL,CAAc,EACZ,GAAG,KAAKxB,KADI;AAEZK,QAAAA,WAAW,EAAE;AACXQ,UAAAA,OAAO,EAAEqC,IAAI,CAACrC,OADH;AAEXC,UAAAA,SAAS,EAAEoC,IAAI,CAACpC,SAFL;AAGXR,UAAAA,EAAE,EAAE4C,IAAI,CAAC5C,EAHE;AAIXC,UAAAA,KAAK,EAAE2C,IAAI,CAAC3C,KAJD;AAKXC,UAAAA,OAAO,EAAE0C,IAAI,CAAC1C,OALH;AAMXC,UAAAA,QAAQ,EAAEyC,IAAI,CAACzC,QANJ;AAOXC,UAAAA,oBAAoB,EAAEwC,IAAI,CAACmB,qBAPhB;AAQX1D,UAAAA,SAAS,EAAEuC,IAAI,CAACU,UARL;AASXhD,UAAAA,QAAQ,EAAEsC,IAAI,CAACW;AATJ;AAFD,OAAd,CArBJ;AAoCD,KA9Q+B;;AAAA,SAkRhCkB,YAlRgC,GAkRjB,MAAM;AACnB,UAAI,KAAK/E,KAAL,CAAWE,UAAf,EAA2B;AACzB,aAAKoC,KAAL,CAAWgC,OAAX,CAAmBC,IAAnB,CAAwB,SAAxB;AACD,OAFD,MAEO;AACLS,QAAAA,KAAK,CAAC,gCAAD,CAAL;AACD;AACF,KAxR+B;AAAA;;AAgRhCC,EAAAA,iBAAiB,GAAG,CAAE;;AAUtBC,EAAAA,MAAM,GAAG;AACPlD,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC,KAAKjC,KAAxC;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,OAAO,EAAE,MAAM,KAAK+E,YAAL,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIG,KAAK/E,KAAL,CAAWE,UAAX,IACC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,OAAO,EAAE,MAAM,KAAKsE,WAAL,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,EASG,KAAKxE,KAAL,CAAWE,UAAX,IACC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,OAAO,EAAE,KAAKuE,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ,EAcE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,EAAX;AAAc,MAAA,GAAG,EAAC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,EAeG,CAAC,KAAKzE,KAAL,CAAWE,UAAZ,IACC,oBAAC,KAAD;AACE,MAAA,UAAU,EAAE,KAAKF,KAAL,CAAWE,UADzB;AAEE,MAAA,QAAQ,EAAE,KAAKwE,QAFjB;AAGE,MAAA,QAAQ,EAAE,KAAKR,QAHjB;AAIE,MAAA,QAAQ,EAAE,KAAKlE,KAAL,CAAWG,QAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBJ,EAuBE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,MAAM,EAAGgF,WAAD,IACN,oBAAC,OAAD;AACE,QAAA,YAAY,EAAE,KAAKC;AADrB,SAEMD,WAFN;AAGE,QAAA,OAAO,EAAE,KAAKnF,KAAL,CAAWa,OAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAYE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,MAAM,EAAGsE,WAAD,IACN,oBAAC,MAAD;AACE,QAAA,KAAK,EAAE,KAAKnF,KAAL,CAAWkB,KADpB;AAEE,QAAA,SAAS,EAAE,KAAKlB,KAAL,CAAWC,SAFxB;AAGE,QAAA,WAAW,EAAE,KAAKD,KAAL,CAAWK,WAH1B;AAIE,QAAA,cAAc,EAAE,KAAKuE;AAJvB,SAKMO,WALN;AAME,QAAA,YAAY,EAAE,KAAK9D,YANrB;AAOE,QAAA,QAAQ,EAAE,KAAKjB,QAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EA2BE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,cAFP;AAGE,MAAA,MAAM,EAAG+E,WAAD,IACN,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,KAAKE,IADb;AAEE,QAAA,OAAO,EAAE,KAAKrF,KAAL,CAAWa,OAFtB;AAGE,QAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWI,QAHvB;AAIE,QAAA,UAAU,EAAE,KAAK8B,UAJnB;AAKE,QAAA,KAAK,EAAE,KAAKQ,KALd;AAME,QAAA,WAAW,EAAE,KAAK1C,KAAL,CAAWK;AAN1B,SAOM8E,WAPN;AAQE,QAAA,QAAQ,EAAE,KAAK/E,QARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BF,EA2CE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,MAAM,EAAG+E,WAAD,IACN,oBAAC,OAAD;AACE,QAAA,SAAS,EAAE,KAAKN,SADlB;AAEE,QAAA,WAAW,EAAE,KAAK7E,KAAL,CAAWK,WAF1B;AAGE,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWa,OAHtB;AAIE,QAAA,UAAU,EAAE,KAAKb,KAAL,CAAWE;AAJzB,SAKMiF,WALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3CF,CAvBF,CADF;AAmFD;;AA/W+B;;AAkXlC,eAAejG,UAAU,CAACY,GAAD,CAAzB","sourcesContent":["import React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport {\n  fetchApiDoctors,\n  createReviews,\n  createPhotos,\n  getDoctors,\n} from './helpers/helpers';\n\nclass App extends React.Component {\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: '',\n      email: '',\n      address: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      doctors: [],\n      favorites: [],\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    searchedDocs: [],\n    error: false,\n    apiDoctors: [],\n    users: [],\n  };\n\n  googleSearch = async (payload) => {\n    const apidocs = await fetchApiDoctors(payload);\n    this.setState({searchedDocs: apidocs})\n    await apidocs.forEach(async (doc) => {\n      let reviews = await createReviews(doc.place_id, doc.id);\n      if (reviews) {\n        doc.reviews = reviews;\n      }\n\n    });\n    await apidocs.forEach(async (doc) => {\n      let photos = await createPhotos(doc.place_id, doc.id);\n      if (photos) {\n        doc.photos = photos;\n      }\n\n    });\n\n    const doctors = await getDoctors();\n    const searchedDocs = doctors.filter((doc) => apidocs.includes(doc.id));\n    console.log(searchedDocs);\n    console.log(doctors);\n    debugger;\n    this.setState({ doctors, searchedDocs });\n  };\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(\n      (doctor) => doctor.api_id == this.props.match.params.id\n    );\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1,\n      });\n    }\n  };\n\n  heart = (doctor) => {\n    let favorite = this.state.currentUser.favorites.find(\n      (favorite) => favorite.api_id == doctor.api_id\n    );\n\n    if (typeof favorite == 'object') {\n      this.unHeart(favorite);\n    } else {\n      this.favorite(doctor);\n    }\n  };\n\n  unHeart = (favorite) => {\n    // debugger\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    fetch(\n      `https://cryptic-island-45793.herokuapp.com/favorites/${favorite.id}`,\n      {\n        method: 'DELETE',\n      }\n    )\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = this.state.currentUser.favorites.filter(\n          (favorite) => favorite.id !== data.id\n        );\n        let doctors = this.state.currentUser.doctors.filter(\n          (doctor) => doctor.api_id !== data.api_id\n        );\n        this.setState({\n          ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors,\n          },\n        });\n      });\n  };\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id,\n    };\n\n    fetch('https://cryptic-island-45793.herokuapp.com/favorites', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify(favoriteObject),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number,\n        };\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors],\n          },\n        });\n      });\n  };\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData);\n  };\n\n  logInOrSignUp = (formData) => {\n    fetch('https://cryptic-island-45793.herokuapp.com/users', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              id: data.id,\n              email: data.email,\n              address: data.address,\n              password: data.password,\n              passwordConfirmation: data.password_confirmation,\n              firstName: data.first_name,\n              lastName: data.last_name,\n              doctors: data.doctors,\n              favorites: data.favorites,\n            },\n            isLoggedIn: true,\n          },\n          () => this.props.history.push('/search')\n        );\n      });\n  };\n\n  userProfile = () => {\n    let id = this.state.currentUser.id;\n    fetch(`https://cryptic-island-45793.herokuapp.com/users/${id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              ...this.state.currentUser,\n              doctors: data.doctors,\n            },\n          },\n          () => {\n            this.props.history.push('/profile');\n          }\n        );\n      });\n  };\n\n  logOut = () => {\n    this.props.history.push('/');\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] });\n  };\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register });\n  };\n  // request to Google GeoCode API to turn string into Longitude/Latitude\n\n  // request to BetterDoc API with Long/Lat\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true });\n  };\n\n  patchUser = (userData) => {\n    fetch(\n      'https://cryptic-island-45793.herokuapp.com' +\n        `/users/${this.state.currentUser.id}`,\n      {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json',\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address,\n        }),\n      }\n    )\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n          },\n        })\n      );\n  };\n\n  componentDidMount() {}\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search');\n    } else {\n      alert('Please log in before searching');\n    }\n  };\n\n  render() {\n    console.log('THIS.STATE FROM APP', this.state);\n    return (\n      <div>\n        <Button color='red' onClick={() => this.searchButton()}>\n          Search\n        </Button>\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={() => this.userProfile()}>\n            Profile\n          </Button>\n        )}\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={this.logOut}>\n            Logout\n          </Button>\n        )}\n        <Image alt='' src=''></Image>\n        {!this.state.isLoggedIn && (\n          <Login\n            isLoggedIn={this.state.isLoggedIn}\n            onSignUp={this.onSignUp}\n            onSubmit={this.onSubmit}\n            register={this.state.register}\n          />\n        )}\n        <Switch>\n          <Route\n            exact\n            path='/doctors'\n            render={(routerProps) => (\n              <Doctors\n                createDoctor={this.createDoctor}\n                {...routerProps}\n                doctors={this.state.doctors}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/search'\n            render={(routerProps) => (\n              <Search\n                error={this.state.error}\n                isLoading={this.state.isLoading}\n                currentUser={this.state.currentUser}\n                loadingHandler={this.loadingHandler}\n                {...routerProps}\n                googleSearch={this.googleSearch}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/doctors/:id'\n            render={(routerProps) => (\n              <DoctorShow\n                rate={this.rate}\n                doctors={this.state.doctors}\n                favorite={this.state.favorite}\n                isFavorite={this.isFavorite}\n                heart={this.heart}\n                currentUser={this.state.currentUser}\n                {...routerProps}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/profile'\n            render={(routerProps) => (\n              <Profile\n                patchUser={this.patchUser}\n                currentUser={this.state.currentUser}\n                doctors={this.state.doctors}\n                isLoggedIn={this.state.isLoggedIn}\n                {...routerProps}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}