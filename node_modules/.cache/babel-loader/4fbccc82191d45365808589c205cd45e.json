{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport axios from 'axios';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport { createDoctors } from './components/helpers/helpers';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: '',\n        email: '',\n        address: '',\n        password: '',\n        passwordConfirmation: '',\n        firstName: '',\n        lastName: '',\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter( // eslint-disable-next-line\n      doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.rate = (e, data) => {};\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find( // eslint-disable-next-line\n      favorite => favorite.api_id == doctor.api_id); // eslint-disable-next-line\n\n      if (typeof favorite == 'object') {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      // debugger\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      // eslint-disable-next-line\n      fetch(`http://localhost:3000/favorites/${favorite.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch('http://localhost:3000/favorites', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      fetch('http://localhost:3000/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`http://localhost:3000/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.googleSearch = async payload => {\n      const {\n        address,\n        query,\n        distance,\n        lat,\n        lng\n      } = payload;\n\n      try {\n        let res = await axios.get(`http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`);\n        res = res.data.results;\n        let dudes = createDoctors(res);\n        console.log((await dudes));\n      } catch (err) {\n        console.log('This is your error:', err);\n      }\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch(`http://localhost:3000/users/${this.state.currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(`http://localhost:3000/users`).then(resp => resp.json()).then(users => {\n      this.setState({\n        users\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({}, routerProps, {\n        doctors: this.state.doctors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        googleSearch: this.googleSearch,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        // eslint-disable-next-line\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Switch","withRouter","Button","Image","axios","DoctorShow","Doctors","Login","Profile","Search","createDoctors","App","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","error","apiDoctors","users","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","rate","e","data","heart","find","unHeart","fetch","method","then","resp","json","favoriteObject","user_id","doctor_id","headers","accepts","body","JSON","stringify","newdoc","first_name","last_name","title","gender","bio","phone_number","onSubmit","formData","logInOrSignUp","password_confirmation","history","push","userProfile","logOut","onSignUp","googleSearch","payload","query","distance","res","get","results","dudes","console","log","err","isResolved","loadingHandler","patchUser","userData","searchButton","alert","componentDidMount","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport axios from 'axios';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport { createDoctors } from './components/helpers/helpers';\n\nclass App extends React.Component {\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: '',\n      email: '',\n      address: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      doctors: [],\n      favorites: [],\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    error: false,\n    apiDoctors: [],\n    users: [],\n  };\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(\n      // eslint-disable-next-line\n      (doctor) => doctor.api_id == this.props.match.params.id\n    );\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1,\n      });\n    }\n  };\n\n  rate = (e, data) => {};\n\n  heart = (doctor) => {\n    let favorite = this.state.currentUser.favorites.find(\n      // eslint-disable-next-line\n      (favorite) => favorite.api_id == doctor.api_id\n    );\n\n    // eslint-disable-next-line\n    if (typeof favorite == 'object') {\n      this.unHeart(favorite);\n    } else {\n      this.favorite(doctor);\n    }\n  };\n\n  unHeart = (favorite) => {\n    // debugger\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    // eslint-disable-next-line\n    fetch(`http://localhost:3000/favorites/${favorite.id}`, {\n      method: 'DELETE',\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = this.state.currentUser.favorites.filter(\n          (favorite) => favorite.id !== data.id\n        );\n        let doctors = this.state.currentUser.doctors.filter(\n          (doctor) => doctor.api_id !== data.api_id\n        );\n        this.setState({\n          ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors,\n          },\n        });\n      });\n  };\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id,\n    };\n\n    fetch('http://localhost:3000/favorites', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify(favoriteObject),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number,\n        };\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors],\n          },\n        });\n      });\n  };\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData);\n  };\n\n  logInOrSignUp = (formData) => {\n    fetch('http://localhost:3000/users', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              id: data.id,\n              email: data.email,\n              address: data.address,\n              password: data.password,\n              passwordConfirmation: data.password_confirmation,\n              firstName: data.first_name,\n              lastName: data.last_name,\n              doctors: data.doctors,\n              favorites: data.favorites,\n            },\n            isLoggedIn: true,\n          },\n          () => this.props.history.push('/search')\n        );\n      });\n  };\n\n  userProfile = () => {\n    let id = this.state.currentUser.id;\n    fetch(`http://localhost:3000/users/${id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              ...this.state.currentUser,\n              doctors: data.doctors,\n            },\n          },\n          () => {\n            this.props.history.push('/profile');\n          }\n        );\n      });\n  };\n\n  logOut = () => {\n    this.props.history.push('/');\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] });\n  };\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register });\n  };\n  // TODO retype this stuff\n  // TODO validations for max distance\n  googleSearch = async (payload) => {\n    const { address, query, distance, lat, lng } = payload;\n\n    try {\n      let res = await axios.get(\n        `http://localhost:3000/geocodes/nearby/?address=${address}&query=${query}&distance=${distance}&lat=${lat}&lng=${lng}`\n      );\n\n      res = res.data.results;\n      let dudes =  createDoctors(res);\n       console.log(await dudes)\n    } catch (err) {\n      console.log('This is your error:', err);\n    }\n  };\n\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true });\n  };\n\n  patchUser = (userData) => {\n    fetch(`http://localhost:3000/users/${this.state.currentUser.id}`, {\n      method: 'PATCH',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        password_confirmation: userData.passwordConfirmation,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        address: userData.address,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n          },\n        })\n      );\n  };\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(`http://localhost:3000/users`)\n      .then((resp) => resp.json())\n      .then((users) => {\n        this.setState({\n          users,\n        });\n      });\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search');\n    } else {\n      alert('Please log in before searching');\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Button color='red' onClick={() => this.searchButton()}>\n          Search\n        </Button>\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={() => this.userProfile()}>\n            Profile\n          </Button>\n        )}\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={this.logOut}>\n            Logout\n          </Button>\n        )}\n        <Image alt='' src=''></Image>\n        {!this.state.isLoggedIn && (\n          <Login\n            isLoggedIn={this.state.isLoggedIn}\n            onSignUp={this.onSignUp}\n            onSubmit={this.onSubmit}\n            register={this.state.register}\n          />\n        )}\n        <Switch>\n          <Route\n            exact\n            path='/doctors'\n            render={(routerProps) => (\n              <Doctors {...routerProps} doctors={this.state.doctors} />\n            )}\n          />\n          <Route\n            exact\n            path='/search'\n            render={(routerProps) => (\n              <Search\n                error={this.state.error}\n                isLoading={this.state.isLoading}\n                currentUser={this.state.currentUser}\n                loadingHandler={this.loadingHandler}\n                {...routerProps}\n                googleSearch={this.googleSearch}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/doctors/:id'\n            render={(routerProps) => (\n              <DoctorShow\n                rate={this.rate}\n                doctors={this.state.doctors}\n                favorite={this.state.favorite}\n                isFavorite={this.isFavorite}\n                heart={this.heart}\n                currentUser={this.state.currentUser}\n                {...routerProps}\n                // eslint-disable-next-line\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/profile'\n            render={(routerProps) => (\n              <Profile\n                patchUser={this.patchUser}\n                currentUser={this.state.currentUser}\n                doctors={this.state.doctors}\n                isLoggedIn={this.state.isLoggedIn}\n                {...routerProps}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}