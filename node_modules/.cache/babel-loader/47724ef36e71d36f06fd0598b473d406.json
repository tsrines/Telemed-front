{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js\";\nimport React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport axios from 'axios';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: false,\n      isLoggedIn: false,\n      register: false,\n      favorite: 0,\n      currentUser: {\n        id: '',\n        email: '',\n        address: '',\n        password: '',\n        passwordConfirmation: '',\n        firstName: '',\n        lastName: '',\n        doctors: [],\n        favorites: []\n      },\n      lat: 0,\n      lng: 0,\n      doctors: [],\n      error: false,\n      apiDoctors: [],\n      users: []\n    };\n\n    this.isFavorite = () => {\n      let favoriteArray = this.state.currentUser.doctors.filter( // eslint-disable-next-line\n      doctor => doctor.api_id == this.props.match.params.id);\n\n      if (favoriteArray.length > 0) {\n        this.setState({\n          favorite: 1\n        });\n      }\n    };\n\n    this.rate = (e, data) => {};\n\n    this.createDoctor = (doctor, isSeed) => {\n      let doctorObj = {\n        api_id: doctor.id,\n        first_name: doctor.firstName,\n        last_name: doctor.lastName,\n        address: doctor.address,\n        image: doctor.image,\n        specialty: doctor.specialty,\n        title: doctor.title,\n        gender: doctor.gender,\n        bio: doctor.bio,\n        phone_number: doctor.phone\n      };\n      fetch('https://localhost:3000/doctors', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json',\n          Accepts: 'application/json'\n        },\n        body: JSON.stringify(doctorObj)\n      }).then(resp => resp.json()).then(data => {\n        let doctors = [...this.state.doctors];\n        this.setState({ ...this.state,\n          doctors: [data, ...doctors]\n        }, () => {\n          this.props.history.push('/doctors');\n        });\n      }, this.setState({\n        isLoading: false\n      }));\n    };\n\n    this.heart = doctor => {\n      let favorite = this.state.currentUser.favorites.find( // eslint-disable-next-line\n      favorite => favorite.api_id == doctor.api_id); // eslint-disable-next-line\n\n      if (typeof favorite == 'object') {\n        this.unHeart(favorite);\n      } else {\n        this.favorite(doctor);\n      }\n    };\n\n    this.unHeart = favorite => {\n      // debugger\n      // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n      // eslint-disable-next-line\n      fetch(`http://localhost:3000/favorites/${favorite.id}`, {\n        method: 'DELETE'\n      }).then(resp => resp.json()).then(data => {\n        let favorites = this.state.currentUser.favorites.filter(favorite => favorite.id !== data.id);\n        let doctors = this.state.currentUser.doctors.filter(doctor => doctor.api_id !== data.api_id);\n        this.setState({ ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: { ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors\n          }\n        });\n      });\n    };\n\n    this.favorite = doctor => {\n      let favoriteObject = {\n        user_id: this.state.currentUser.id,\n        doctor_id: doctor.id,\n        api_id: doctor.api_id\n      };\n      fetch('http://localhost:3000/favorites', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify(favoriteObject)\n      }).then(resp => resp.json()).then(data => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number\n        }; // userDoctors.filter\n\n        this.setState({ ...this.state,\n          favorite: 1,\n          currentUser: { ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors]\n          }\n        });\n      });\n    };\n\n    this.onSubmit = formData => {\n      this.logInOrSignUp(formData);\n    };\n\n    this.logInOrSignUp = formData => {\n      fetch('http://localhost:3000/users', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email,\n          password: formData.password,\n          password_confirmation: formData.passwordConfirmation\n        })\n      }).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: {\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            doctors: data.doctors,\n            favorites: data.favorites\n          },\n          isLoggedIn: true\n        }, () => this.props.history.push('/search'));\n      });\n    };\n\n    this.userProfile = () => {\n      let id = this.state.currentUser.id;\n      fetch(`http://localhost:3000/users/${id}`).then(resp => resp.json()).then(data => {\n        this.setState({ ...this.state,\n          currentUser: { ...this.state.currentUser,\n            doctors: data.doctors\n          }\n        }, () => {\n          this.props.history.push('/profile');\n        });\n      });\n    };\n\n    this.logOut = () => {\n      this.props.history.push('/');\n      this.setState({\n        isLoggedIn: false,\n        currentUser: {},\n        doctors: []\n      });\n    };\n\n    this.onSignUp = () => {\n      this.setState({\n        register: !this.state.register\n      });\n    };\n\n    this.googleSearch = async ({\n      address,\n      query,\n      distance\n    }) => {\n      try {\n        let res = await axios.get(`http://localhost:3000/doctors/getgeo/${address}/${query}/${distance}`);\n        this.setState({\n          doctors: res.data.results\n        }, () => this.props.history.push('/doctors'));\n      } catch (err) {\n        console.error('This is your error:', err);\n      }\n    };\n\n    this.isResolved = () => {\n      if (this.state.apiDoctors.length < 1) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.getDoctors = ({\n      address,\n      query,\n      distance\n    }) => {// original fetch prior to API going down for good\n      // fetch(\n      //   `https://api.betterdoctor.com/2015-01-27/doctors\n      //   ?query=${query}\n      //   &location=${lat}%2C${lng}\n      //   %2C${distance}\n      //   &skip=0\n      //   &limit=100\n      //   &user_key=456c38f1b8349922db25eb4a4fd44429`\n      // )\n      //   .then((resp) => resp.json())\n      //   .then((data) => {\n      //     this.setState(\n      //       {\n      //         apiDoctors: data.data,\n      //         isLoading: false,\n      //       },\n      //       () => this.isResolved()\n      //     );\n      //     this.parseDoctors(data.data);\n      //   })\n      //   .catch((err) => {\n      //     this.getSeeds();\n      //   });\n    };\n\n    this.getPlaceDetails = async (e, id) => {\n      const res = await Axios.get(`http://localhost:3000/doctors/details/${id}`);\n      this.setState({\n        details: res\n      });\n      this.props.history.push(`/doctors/${id}`);\n    };\n\n    this.parseDoctors = apiResults => {\n      let doctors = []; // eslint-disable-next-line\n\n      apiResults.results.map(element => {\n        try {\n          let doctorHash = {};\n          doctorHash.id = element.place_id; // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n\n          doctorHash.name = element.name;\n          doctorHash.status = element.business_status;\n          doctorHash.image = element.photos[0].html_attributions[0]; // if (element === 'male') {\n          //   doctorHash.image =\n          //     'https://semantic-ui.com/images/avatar2/large/matthew.png';\n          // } else if (element.profile.gender === 'female') {\n          //   doctorHash.image =\n          //     'https://semantic-ui.com/images/avatar2/large/kristy.png';\n          // } else {\n          //   doctorHash.image =\n          //     'https://semantic-ui.com/images/avatar2/large/elyse.png';\n          // }\n\n          doctorHash.title = element.profile.title;\n          doctorHash.bio = element.profile.bio;\n          doctorHash.address = element.practices[0].address;\n          doctorHash.gender = element.profile.gender;\n          doctorHash.phone = element.practices[0].phones[0].number;\n          doctorHash.specialty = element.specialties[0].name;\n          doctors.push(doctorHash);\n          this.createDoctor(doctorHash);\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    };\n\n    this.loadingHandler = () => {\n      this.setState({\n        isLoading: true\n      });\n    };\n\n    this.patchUser = userData => {\n      fetch(`http://localhost:3000/users/${this.state.currentUser.id}`, {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          accepts: 'application/json'\n        },\n        body: JSON.stringify({\n          email: userData.email,\n          password: userData.password,\n          password_confirmation: userData.passwordConfirmation,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          address: userData.address\n        })\n      }).then(resp => resp.json()).then(data => this.setState({ ...this.state,\n        currentUser: {\n          doctors: data.doctors,\n          favorites: data.favorites,\n          id: data.id,\n          email: data.email,\n          address: data.address,\n          password: data.password,\n          passwordConfirmation: data.password_confirmation,\n          firstName: data.first_name,\n          lastName: data.last_name\n        }\n      }));\n    };\n\n    this.searchButton = () => {\n      if (this.state.isLoggedIn) {\n        this.props.history.push('/search');\n      } else {\n        alert('Please log in before searching');\n      }\n    };\n\n    this.getSeeds = () => {\n      fetch('http://localhost:3000/seeds').then(res => res.json()).then(doctors => {\n        this.setState({\n          doctors,\n          isLoading: false\n        }, () => this.props.history.push('/doctors'));\n      }).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(`http://localhost:3000/users`).then(resp => resp.json()).then(users => {\n      this.setState({\n        users\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.doctors);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.searchButton(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Search\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: () => this.userProfile(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"Profile\"), this.state.isLoggedIn && React.createElement(Button, {\n      color: \"red\",\n      onClick: this.logOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"Logout\"), React.createElement(Image, {\n      alt: \"\",\n      src: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }), !this.state.isLoggedIn && React.createElement(Login, {\n      isLoggedIn: this.state.isLoggedIn,\n      onSignUp: this.onSignUp,\n      onSubmit: this.onSubmit,\n      register: this.state.register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/doctors\",\n      render: routerProps => React.createElement(Doctors, Object.assign({\n        getPlaceDetails: this.getPlaceDetails\n      }, routerProps, {\n        doctors: this.state.doctors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: routerProps => React.createElement(Search, Object.assign({\n        error: this.state.error,\n        isLoading: this.state.isLoading,\n        currentUser: this.state.currentUser,\n        loadingHandler: this.loadingHandler\n      }, routerProps, {\n        googleSearch: this.googleSearch,\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/doctors/:id\",\n      render: routerProps => React.createElement(DoctorShow, Object.assign({\n        getPlaceDetails: this.getPlaceDetails,\n        details: this.state.details,\n        rate: this.rate,\n        doctors: this.state.doctors,\n        favorite: this.state.favorite,\n        isFavorite: this.isFavorite,\n        heart: this.heart,\n        currentUser: this.state.currentUser\n      }, routerProps, {\n        // eslint-disable-next-line\n        favorite: this.favorite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/profile\",\n      render: routerProps => React.createElement(Profile, Object.assign({\n        patchUser: this.patchUser,\n        currentUser: this.state.currentUser,\n        doctors: this.state.doctors,\n        isLoggedIn: this.state.isLoggedIn\n      }, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/App.js"],"names":["React","Route","Switch","withRouter","Button","Image","axios","DoctorShow","Doctors","Login","Profile","Search","Axios","App","Component","state","isLoading","isLoggedIn","register","favorite","currentUser","id","email","address","password","passwordConfirmation","firstName","lastName","doctors","favorites","lat","lng","error","apiDoctors","users","isFavorite","favoriteArray","filter","doctor","api_id","props","match","params","length","setState","rate","e","data","createDoctor","isSeed","doctorObj","first_name","last_name","image","specialty","title","gender","bio","phone_number","phone","fetch","method","headers","Accepts","body","JSON","stringify","then","resp","json","history","push","heart","find","unHeart","favoriteObject","user_id","doctor_id","accepts","newdoc","onSubmit","formData","logInOrSignUp","password_confirmation","userProfile","logOut","onSignUp","googleSearch","query","distance","res","get","results","err","console","isResolved","getDoctors","getPlaceDetails","details","parseDoctors","apiResults","map","element","doctorHash","place_id","name","status","business_status","photos","html_attributions","profile","practices","phones","number","specialties","log","loadingHandler","patchUser","userData","searchButton","alert","getSeeds","catch","componentDidMount","render","routerProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Route, Switch, withRouter } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport axios from 'axios';\nimport DoctorShow from './components/DoctorShow';\nimport Doctors from './containers/Doctors';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Search from './components/Search';\nimport './App.css';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    isLoading: false,\n    isLoggedIn: false,\n    register: false,\n    favorite: 0,\n    currentUser: {\n      id: '',\n      email: '',\n      address: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      doctors: [],\n      favorites: [],\n    },\n    lat: 0,\n    lng: 0,\n    doctors: [],\n    error: false,\n    apiDoctors: [],\n    users: [],\n  };\n\n  isFavorite = () => {\n    let favoriteArray = this.state.currentUser.doctors.filter(\n      // eslint-disable-next-line\n      (doctor) => doctor.api_id == this.props.match.params.id\n    );\n    if (favoriteArray.length > 0) {\n      this.setState({\n        favorite: 1,\n      });\n    }\n  };\n\n  rate = (e, data) => {};\n\n  createDoctor = (doctor, isSeed) => {\n    let doctorObj = {\n      api_id: doctor.id,\n      first_name: doctor.firstName,\n      last_name: doctor.lastName,\n      address: doctor.address,\n      image: doctor.image,\n      specialty: doctor.specialty,\n      title: doctor.title,\n      gender: doctor.gender,\n      bio: doctor.bio,\n      phone_number: doctor.phone,\n    };\n    fetch('https://localhost:3000/doctors', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        Accepts: 'application/json',\n      },\n      body: JSON.stringify(doctorObj),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let doctors = [...this.state.doctors];\n        this.setState(\n          {\n            ...this.state,\n            doctors: [data, ...doctors],\n          },\n          () => {\n            this.props.history.push('/doctors');\n          }\n        );\n      }, this.setState({ isLoading: false }));\n  };\n\n  heart = (doctor) => {\n    let favorite = this.state.currentUser.favorites.find(\n      // eslint-disable-next-line\n      (favorite) => favorite.api_id == doctor.api_id\n    );\n\n    // eslint-disable-next-line\n    if (typeof favorite == 'object') {\n      this.unHeart(favorite);\n    } else {\n      this.favorite(doctor);\n    }\n  };\n\n  unHeart = (favorite) => {\n    // debugger\n\n    // let favorite = this.state.currentUser.userFavorites.find(favorite => favorite.api_id === doctor.uid)\n    // eslint-disable-next-line\n    fetch(`http://localhost:3000/favorites/${favorite.id}`, {\n      method: 'DELETE',\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = this.state.currentUser.favorites.filter(\n          (favorite) => favorite.id !== data.id\n        );\n        let doctors = this.state.currentUser.doctors.filter(\n          (doctor) => doctor.api_id !== data.api_id\n        );\n        this.setState({\n          ...this.state,\n          favorite: 0,\n          doctors: [data.doctor, ...this.state.doctors],\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: favorites,\n            doctors: doctors,\n          },\n        });\n      });\n  };\n\n  favorite = (doctor) => {\n    let favoriteObject = {\n      user_id: this.state.currentUser.id,\n      doctor_id: doctor.id,\n      api_id: doctor.api_id,\n    };\n\n    fetch('http://localhost:3000/favorites', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify(favoriteObject),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        let favorites = [...this.state.currentUser.favorites];\n        let doctors = [...this.state.currentUser.doctors];\n\n        let newdoc = {\n          id: data.doctor_id,\n          api_id: doctor.api_id,\n          first_name: doctor.first_name,\n          last_name: doctor.last_name,\n          title: doctor.title,\n          gender: doctor.gender,\n          bio: doctor.bio,\n          phone_number: doctor.phone_number,\n        };\n\n        // userDoctors.filter\n        this.setState({\n          ...this.state,\n          favorite: 1,\n          currentUser: {\n            ...this.state.currentUser,\n            favorites: [data, ...favorites],\n            doctors: [newdoc, ...doctors],\n          },\n        });\n      });\n  };\n\n  onSubmit = (formData) => {\n    this.logInOrSignUp(formData);\n  };\n\n  logInOrSignUp = (formData) => {\n    fetch('http://localhost:3000/users', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: formData.email,\n        password: formData.password,\n        password_confirmation: formData.passwordConfirmation,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              id: data.id,\n              email: data.email,\n              address: data.address,\n              password: data.password,\n              passwordConfirmation: data.password_confirmation,\n              firstName: data.first_name,\n              lastName: data.last_name,\n              doctors: data.doctors,\n              favorites: data.favorites,\n            },\n            isLoggedIn: true,\n          },\n          () => this.props.history.push('/search')\n        );\n      });\n  };\n\n  userProfile = () => {\n    let id = this.state.currentUser.id;\n    fetch(`http://localhost:3000/users/${id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        this.setState(\n          {\n            ...this.state,\n            currentUser: {\n              ...this.state.currentUser,\n              doctors: data.doctors,\n            },\n          },\n          () => {\n            this.props.history.push('/profile');\n          }\n        );\n      });\n  };\n\n  logOut = () => {\n    this.props.history.push('/');\n    this.setState({ isLoggedIn: false, currentUser: {}, doctors: [] });\n  };\n\n  onSignUp = () => {\n    this.setState({ register: !this.state.register });\n  };\n  // TODO retype this stuff\n  googleSearch = async ({ address, query, distance }) => {\n    try {\n      let res = await axios.get(\n        `http://localhost:3000/doctors/getgeo/${address}/${query}/${distance}`\n      );\n\n      this.setState({ doctors: res.data.results }, () =>\n        this.props.history.push('/doctors')\n      );\n    } catch (err) {\n      console.error('This is your error:', err);\n    }\n  };\n\n  // request to BetterDoc API with Long/Lat\n  isResolved = () => {\n    if (this.state.apiDoctors.length < 1) {\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  getDoctors = ({ address, query, distance }) => {\n    // original fetch prior to API going down for good\n    // fetch(\n    //   `https://api.betterdoctor.com/2015-01-27/doctors\n    //   ?query=${query}\n    //   &location=${lat}%2C${lng}\n    //   %2C${distance}\n    //   &skip=0\n    //   &limit=100\n    //   &user_key=456c38f1b8349922db25eb4a4fd44429`\n    // )\n    //   .then((resp) => resp.json())\n    //   .then((data) => {\n    //     this.setState(\n    //       {\n    //         apiDoctors: data.data,\n    //         isLoading: false,\n    //       },\n    //       () => this.isResolved()\n    //     );\n    //     this.parseDoctors(data.data);\n    //   })\n    //   .catch((err) => {\n    //     this.getSeeds();\n    //   });\n  };\n\n  getPlaceDetails = async (e, id) => {\n    const res = await Axios.get(`http://localhost:3000/doctors/details/${id}`);\n    this.setState({ details: res });\n    this.props.history.push(`/doctors/${id}`);\n  };\n\n  parseDoctors = (apiResults) => {\n    let doctors = [];\n    // eslint-disable-next-line\n    apiResults.results.map((element) => {\n      try {\n        let doctorHash = {};\n        doctorHash.id = element.place_id;\n        // doctorHash.image = this.imageApi(element.profile.first_name, element.profile.last_name, element.profile.title)\n        doctorHash.name = element.name;\n        doctorHash.status = element.business_status;\n        doctorHash.image = element.photos[0].html_attributions[0];\n        // if (element === 'male') {\n        //   doctorHash.image =\n        //     'https://semantic-ui.com/images/avatar2/large/matthew.png';\n        // } else if (element.profile.gender === 'female') {\n        //   doctorHash.image =\n        //     'https://semantic-ui.com/images/avatar2/large/kristy.png';\n        // } else {\n        //   doctorHash.image =\n        //     'https://semantic-ui.com/images/avatar2/large/elyse.png';\n        // }\n        doctorHash.title = element.profile.title;\n        doctorHash.bio = element.profile.bio;\n        doctorHash.address = element.practices[0].address;\n        doctorHash.gender = element.profile.gender;\n        doctorHash.phone = element.practices[0].phones[0].number;\n\n        doctorHash.specialty = element.specialties[0].name;\n        doctors.push(doctorHash);\n        this.createDoctor(doctorHash);\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  };\n\n  loadingHandler = () => {\n    this.setState({ isLoading: true });\n  };\n\n  patchUser = (userData) => {\n    fetch(`http://localhost:3000/users/${this.state.currentUser.id}`, {\n      method: 'PATCH',\n      headers: {\n        'content-type': 'application/json',\n        accepts: 'application/json',\n      },\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        password_confirmation: userData.passwordConfirmation,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        address: userData.address,\n      }),\n    })\n      .then((resp) => resp.json())\n      .then((data) =>\n        this.setState({\n          ...this.state,\n          currentUser: {\n            doctors: data.doctors,\n            favorites: data.favorites,\n            id: data.id,\n            email: data.email,\n            address: data.address,\n            password: data.password,\n            passwordConfirmation: data.password_confirmation,\n            firstName: data.first_name,\n            lastName: data.last_name,\n          },\n        })\n      );\n  };\n\n  componentDidMount() {\n    // let doctorsInCurrentState = [...this.state.doctors]\n    fetch(`http://localhost:3000/users`)\n      .then((resp) => resp.json())\n      .then((users) => {\n        this.setState({\n          users,\n        });\n      });\n  }\n\n  searchButton = () => {\n    if (this.state.isLoggedIn) {\n      this.props.history.push('/search');\n    } else {\n      alert('Please log in before searching');\n    }\n  };\n\n  getSeeds = () => {\n    fetch('http://localhost:3000/seeds')\n      .then((res) => res.json())\n      .then((doctors) => {\n        this.setState({ doctors, isLoading: false }, () =>\n          this.props.history.push('/doctors')\n        );\n      })\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    console.log(this.state.doctors);\n    return (\n      <div>\n        <Button color='red' onClick={() => this.searchButton()}>\n          Search\n        </Button>\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={() => this.userProfile()}>\n            Profile\n          </Button>\n        )}\n        {this.state.isLoggedIn && (\n          <Button color='red' onClick={this.logOut}>\n            Logout\n          </Button>\n        )}\n        <Image alt='' src=''></Image>\n        {!this.state.isLoggedIn && (\n          <Login\n            isLoggedIn={this.state.isLoggedIn}\n            onSignUp={this.onSignUp}\n            onSubmit={this.onSubmit}\n            register={this.state.register}\n          />\n        )}\n        <Switch>\n          <Route\n            exact\n            path='/doctors'\n            render={(routerProps) => (\n              <Doctors getPlaceDetails={this.getPlaceDetails} {...routerProps} doctors={this.state.doctors} />\n            )}\n          />\n          <Route\n            exact\n            path='/search'\n            render={(routerProps) => (\n              <Search\n                error={this.state.error}\n                isLoading={this.state.isLoading}\n                currentUser={this.state.currentUser}\n                loadingHandler={this.loadingHandler}\n                {...routerProps}\n                googleSearch={this.googleSearch}\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/doctors/:id'\n            render={(routerProps) => (\n              <DoctorShow\n                getPlaceDetails={this.getPlaceDetails}\n                details={this.state.details}\n                rate={this.rate}\n                doctors={this.state.doctors}\n                favorite={this.state.favorite}\n                isFavorite={this.isFavorite}\n                heart={this.heart}\n                currentUser={this.state.currentUser}\n                {...routerProps}\n                // eslint-disable-next-line\n                favorite={this.favorite}\n              />\n            )}\n          />\n          <Route\n            exact\n            path='/profile'\n            render={(routerProps) => (\n              <Profile\n                patchUser={this.patchUser}\n                currentUser={this.state.currentUser}\n                doctors={this.state.doctors}\n                isLoggedIn={this.state.isLoggedIn}\n                {...routerProps}\n              />\n            )}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n"]},"metadata":{},"sourceType":"module"}