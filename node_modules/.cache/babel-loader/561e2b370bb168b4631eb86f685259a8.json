{"ast":null,"code":"var _jsxFileName = \"/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/profile/Profile.js\";\nimport React from 'react';\nimport { Header, Divider, Button, Form, Input, Grid, Card, Icon } from 'semantic-ui-react';\nimport DoctorCard from '../DoctorCard';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst Profile = ({\n  currentUser,\n  loadUser\n}) => {\n  const profileDoctors = () => {\n    if (currentUser.doctors) {\n      return currentUser.doctors.map(doc => React.createElement(DoctorCard, {\n        key: doc.id,\n        doctor: doc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n    } else {\n      this.props.history.push('/login');\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n    profileDoctors();\n  }, [loadUser, profileDoctors]);\n  const [state, setstate] = useState(initialState);\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    style: {\n      padding: '2em'\n    },\n    columns: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, currentUser && React.createElement(React.Fragment, null, React.createElement(Header, {\n    display: \"flex\",\n    textAlign: \"center\",\n    color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    size: \"tiny\",\n    name: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), currentUser.email)), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), currentUser && React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h2\",\n    display: \"flex\",\n    textAlign: \"center\",\n    color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Favorite Doctors\"), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(Card.Group, {\n    style: {\n      overflow: 'auto',\n      maxHeight: '52em'\n    },\n    display: \"flex\",\n    \"justify-content\": \"center\",\n    itemsPerRow: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, this.profileDoctors()))));\n};\n\nProfile.propTypes = {\n  loadUser: PropTypes.func.isRequired\n};\nexport default Profile;","map":{"version":3,"sources":["/Users/rines/Development/code/mod5/Telemed/Telemed-front/src/components/profile/Profile.js"],"names":["React","Header","Divider","Button","Form","Input","Grid","Card","Icon","DoctorCard","Link","PropTypes","useEffect","useState","Profile","currentUser","loadUser","profileDoctors","doctors","map","doc","id","props","history","push","state","setstate","initialState","padding","email","overflow","maxHeight","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport {\n  Header,\n  Divider,\n  Button,\n  Form,\n  Input,\n  Grid,\n  Card,\n  Icon,\n} from 'semantic-ui-react';\n\nimport DoctorCard from '../DoctorCard';\nimport { Link } from 'react-router-dom';\n\n\n\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst Profile = ({ currentUser, loadUser }) => {\n  const profileDoctors = () => {\n    if (currentUser.doctors) {\n      return currentUser.doctors.map((doc) => (\n        <DoctorCard key={doc.id} doctor={doc} />\n      ));\n    } else {\n      this.props.history.push('/login');\n    }\n  };\n  useEffect(() => {\n    loadUser();\n    profileDoctors();\n  }, [loadUser, profileDoctors]);\n  const [state, setstate] = useState(initialState);\n  return (\n    <>\n      <Grid style={{ padding: '2em' }} columns={2}>\n        <Grid.Row>\n          {currentUser && (\n            <>\n              <Header display='flex' textAlign='center' color='red'>\n                <Icon size='tiny' name='edit'></Icon>\n                {currentUser.email}\n              </Header>\n            </>\n          )}\n          <Divider />\n        </Grid.Row>\n        {currentUser && (\n          <Grid.Row>\n            <Header as='h2' display='flex' textAlign='center' color='red'>\n              Favorite Doctors\n            </Header>\n            <Divider />\n            <Card.Group\n              style={{ overflow: 'auto', maxHeight: '52em' }}\n              display='flex'\n              justify-content='center'\n              itemsPerRow={1}\n            >\n              {this.profileDoctors()}\n            </Card.Group>\n          </Grid.Row>\n        )}\n      </Grid>\n    </>\n  );\n};\n\nProfile.propTypes = {\n  loadUser: PropTypes.func.isRequired,\n};\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}